src/uqm/save.c-
src/uqm/save.c-			StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/save.c-			hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/save.c:			SummPtr->ShipList[SummPtr->NumShips] = StarShipPtr->race_id;
src/uqm/save.c-			UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/save.c-		}
src/uqm/save.c-	}
--
src/uqm/cyborg.c-{
src/uqm/cyborg.c-	COUNT Index, Divisor;
src/uqm/cyborg.c-	
src/uqm/cyborg.c:	Index = StarShipPtr->RaceDescPtr->characteristics.max_thrust
src/uqm/cyborg.c:	* StarShipPtr->RaceDescPtr->characteristics.thrust_increment;
src/uqm/cyborg.c:	if ((Divisor = StarShipPtr->RaceDescPtr->characteristics.turn_wait
src/uqm/cyborg.c:		 + StarShipPtr->RaceDescPtr->characteristics.thrust_wait) > 0)
src/uqm/cyborg.c-		Index /= Divisor;
src/uqm/cyborg.c-	else
src/uqm/cyborg.c-		Index >>= 1;
--
src/uqm/cyborg.c-		char *shipName;
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		shipName = GetStringAddress (
src/uqm/cyborg.c:									 StarShipPtr->RaceDescPtr->ship_data.race_strings);
src/uqm/cyborg.c-		log_add (log_Debug, "MI(%s) -- <%u:%u> = %u", shipName,
src/uqm/cyborg.c:				 StarShipPtr->RaceDescPtr->characteristics.max_thrust *
src/uqm/cyborg.c:				 StarShipPtr->RaceDescPtr->characteristics.thrust_increment,
src/uqm/cyborg.c-				 Divisor, Index);
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-#endif /* PRINT_MI */
src/uqm/cyborg.c:	StarShipPtr->RaceDescPtr->cyborg_control.ManeuverabilityIndex = Index;
src/uqm/cyborg.c-}
src/uqm/cyborg.c-
src/uqm/cyborg.c-static void
--
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	GetElementStarShip (&Ship, &StarShipPtr);
src/uqm/cyborg.c-	num_weapons =
src/uqm/cyborg.c:	(*StarShipPtr->RaceDescPtr->init_weapon_func) (&Ship, Weapon);
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	if ((n = num_weapons))
src/uqm/cyborg.c-	{
--
src/uqm/cyborg.c-		ShipMoved = FALSE;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	ShipFired = TRUE;
src/uqm/cyborg.c:	if (StarShipPtr->weapon_counter == 0)
src/uqm/cyborg.c-	{
src/uqm/cyborg.c:		StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/cyborg.c:		if (!(StarShipPtr->RaceDescPtr->ship_info.ship_flags & SEEKING_WEAPON))
src/uqm/cyborg.c-			ShipFired = FALSE;
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-	
src/uqm/cyborg.c:	if (StarShipPtr->control & AWESOME_RATING)
src/uqm/cyborg.c-		margin_of_error = 0;
src/uqm/cyborg.c:	else if (StarShipPtr->control & GOOD_RATING)
src/uqm/cyborg.c-		margin_of_error = DISPLAY_TO_WORLD (20 << RESOLUTION_FACTOR); // JMS_GFX
src/uqm/cyborg.c:	else /* if (StarShipPtr->control & STANDARD_RATING) */
src/uqm/cyborg.c-		margin_of_error = DISPLAY_TO_WORLD (40 << RESOLUTION_FACTOR); // JMS_GFX
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	ObjectsOfConcern += ConcernCounter;
--
src/uqm/cyborg.c-					|| ObjectsOfConcern->MoveState == PURSUE
src/uqm/cyborg.c-					|| (ObjectsOfConcern->ObjectPtr->state_flags & CREW_OBJECT)
src/uqm/cyborg.c-					|| MANEUVERABILITY (
src/uqm/cyborg.c:										&StarShipPtr->RaceDescPtr->cyborg_control
src/uqm/cyborg.c-										) >= RESOLUTION_COMPENSATED(MEDIUM_SHIP) // JMS_GFX
src/uqm/cyborg.c-					)
src/uqm/cyborg.c-				)
--
src/uqm/cyborg.c-					|| (ConcernCounter == ENEMY_WEAPON_INDEX
src/uqm/cyborg.c-						&& ObjectsOfConcern->MoveState != AVOID
src/uqm/cyborg.c-#ifdef NEVER
src/uqm/cyborg.c:						&& !(StarShipPtr->control & STANDARD_RATING)
src/uqm/cyborg.c-#endif /* NEVER */		
src/uqm/cyborg.c-						)
src/uqm/cyborg.c-					)
--
src/uqm/cyborg.c-				ShipFired = ship_weapons (ShipPtr,ObjectsOfConcern->ObjectPtr, margin_of_error);
src/uqm/cyborg.c-				
src/uqm/cyborg.c-				if (ShipFired)
src/uqm/cyborg.c:					StarShipPtr->ship_input_state |= WEAPON;
src/uqm/cyborg.c-			}
src/uqm/cyborg.c-		}
src/uqm/cyborg.c-	}
--
src/uqm/cyborg.c-	STARSHIP *StarShipPtr;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/cyborg.c:	f = StarShipPtr->ShipFacing;
src/uqm/cyborg.c-	ship_delta_facing = NORMALIZE_FACING (ANGLE_TO_FACING (angle) - f);
src/uqm/cyborg.c-	if (ship_delta_facing)
src/uqm/cyborg.c-	{
--
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		if (ship_delta_facing < ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/cyborg.c-		{
src/uqm/cyborg.c:			StarShipPtr->ship_input_state |= RIGHT;
src/uqm/cyborg.c-			++f;
src/uqm/cyborg.c-			ShipPtr->next.image.frame =
src/uqm/cyborg.c-			IncFrameIndex (ShipPtr->current.image.frame);
src/uqm/cyborg.c-		}
src/uqm/cyborg.c-		else
src/uqm/cyborg.c-		{
src/uqm/cyborg.c:			StarShipPtr->ship_input_state |= LEFT;
src/uqm/cyborg.c-			--f;
src/uqm/cyborg.c-			ShipPtr->next.image.frame =
src/uqm/cyborg.c-			DecFrameIndex (ShipPtr->current.image.frame);
src/uqm/cyborg.c-		}
src/uqm/cyborg.c-		
src/uqm/cyborg.c-#ifdef NOTYET
src/uqm/cyborg.c:		if (((StarShipPtr->ship_input_state & (LEFT | RIGHT))
src/uqm/cyborg.c:			 ^ (StarShipPtr->cur_status_flags & (LEFT | RIGHT))) == (LEFT | RIGHT))
src/uqm/cyborg.c:			StarShipPtr->ship_input_state &= ~(LEFT | RIGHT);
src/uqm/cyborg.c-		else
src/uqm/cyborg.c-#endif /* NOTYET */
src/uqm/cyborg.c-		{
src/uqm/cyborg.c:			StarShipPtr->ShipFacing = NORMALIZE_FACING (f);
src/uqm/cyborg.c-			
src/uqm/cyborg.c-			return (TRUE);
src/uqm/cyborg.c-		}
--
src/uqm/cyborg.c-	STARSHIP *StarShipPtr;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/cyborg.c:	if (StarShipPtr->ship_input_state & THRUST)
src/uqm/cyborg.c-		ShouldThrust = TRUE;
src/uqm/cyborg.c-	else if (NORMALIZE_FACING (ANGLE_TO_FACING (angle)
src/uqm/cyborg.c-							   - ANGLE_TO_FACING (GetVelocityTravelAngle (&ShipPtr->velocity))) == 0
src/uqm/cyborg.c:			 && (StarShipPtr->cur_status_flags
src/uqm/cyborg.c-				 & (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/cyborg.c:			 && !(StarShipPtr->cur_status_flags & SHIP_IN_GRAVITY_WELL))
src/uqm/cyborg.c-		ShouldThrust = FALSE;
src/uqm/cyborg.c-	else
src/uqm/cyborg.c-	{
--
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		ship_delta_facing =
src/uqm/cyborg.c-		NORMALIZE_FACING (ANGLE_TO_FACING (angle)
src/uqm/cyborg.c:						  - StarShipPtr->ShipFacing + ANGLE_TO_FACING (QUADRANT));
src/uqm/cyborg.c-		if (ship_delta_facing == ANGLE_TO_FACING (QUADRANT)
src/uqm/cyborg.c:			|| ((StarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED)
src/uqm/cyborg.c-				&& ship_delta_facing <= ANGLE_TO_FACING (HALF_CIRCLE)))
src/uqm/cyborg.c-			ShouldThrust = TRUE;
src/uqm/cyborg.c-		else
--
src/uqm/cyborg.c-	{
src/uqm/cyborg.c-		inertial_thrust (ShipPtr);
src/uqm/cyborg.c-		
src/uqm/cyborg.c:		StarShipPtr->ship_input_state |= THRUST;
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	return (ShouldThrust);
--
src/uqm/cyborg.c-		GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/cyborg.c-		GetElementStarShip (OtherObjPtr, &EnemyStarShipPtr);
src/uqm/cyborg.c-		if ((MANEUVERABILITY (
src/uqm/cyborg.c:							  &StarShipPtr->RaceDescPtr->cyborg_control
src/uqm/cyborg.c-							  ) >= RESOLUTION_COMPENSATED(FAST_SHIP) // JMS_GFX
src/uqm/cyborg.c:			 && WEAPON_RANGE (&StarShipPtr->RaceDescPtr->cyborg_control)
src/uqm/cyborg.c-			 > (CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR)) // JMS_GFX
src/uqm/cyborg.c-			|| (EvalDescPtr->which_turn >= 24
src/uqm/cyborg.c:				&& (StarShipPtr->RaceDescPtr->characteristics.max_thrust * 2 / 3 <
src/uqm/cyborg.c:					EnemyStarShipPtr->RaceDescPtr->characteristics.max_thrust
src/uqm/cyborg.c:					|| (EnemyStarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED))))
src/uqm/cyborg.c-		{
src/uqm/cyborg.c-			UWORD ship_flags;
src/uqm/cyborg.c-			
src/uqm/cyborg.c:			ship_flags = EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags;
src/uqm/cyborg.c-			/* you're maneuverable */
src/uqm/cyborg.c-			if (MANEUVERABILITY (
src/uqm/cyborg.c:				&StarShipPtr->RaceDescPtr->cyborg_control
src/uqm/cyborg.c-				) >= RESOLUTION_COMPENSATED(MEDIUM_SHIP)) // JMS_GFX
src/uqm/cyborg.c-			{
src/uqm/cyborg.c-				UWORD fire_flags;
--
src/uqm/cyborg.c-			}
src/uqm/cyborg.c-			
src/uqm/cyborg.c-			// This code prevents Kohr-Ah, Ur-Quan and ISD from turning around mid-chase while pursuing Earthling.
src/uqm/cyborg.c:			if (StarShipPtr->SpeciesID == (KOHR_AH_ID | UR_QUAN_ID)
src/uqm/cyborg.c:				&& EnemyStarShipPtr->SpeciesID == EARTHLING_ID 
src/uqm/cyborg.c:				&& !(EnemyStarShipPtr->cur_status_flags & (SHIP_BEYOND_MAX_SPEED | SHIP_IN_GRAVITY_WELL)))
src/uqm/cyborg.c-				distance_to_give_up_and_turn = 44;
src/uqm/cyborg.c-			else
src/uqm/cyborg.c-				distance_to_give_up_and_turn = 24;
--
src/uqm/cyborg.c-									  GetVelocityTravelAngle (&OtherVelocity)
src/uqm/cyborg.c-									  - GetVelocityTravelAngle (&ShipVelocity)
src/uqm/cyborg.c-									  + OCTANT) <= QUADRANT
src/uqm/cyborg.c:					 && (((StarShipPtr->cur_status_flags & SHIP_AT_MAX_SPEED)
src/uqm/cyborg.c:						  && !(StarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED))
src/uqm/cyborg.c-						 || (ship_flags & DONT_CHASE)))
src/uqm/cyborg.c-					|| NORMALIZE_ANGLE (
src/uqm/cyborg.c-										desired_turn_angle
src/uqm/cyborg.c:										- FACING_TO_ANGLE (StarShipPtr->ShipFacing)
src/uqm/cyborg.c-										+ OCTANT) <= QUADRANT))
src/uqm/cyborg.c-				desired_thrust_angle = desired_turn_angle;
src/uqm/cyborg.c-		}
--
src/uqm/cyborg.c-	desired_turn_angle = NORMALIZE_ANGLE (desired_thrust_angle + HALF_CIRCLE);
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/cyborg.c:	RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/cyborg.c-	if (EvalDescPtr->MoveState == AVOID)
src/uqm/cyborg.c-	{
src/uqm/cyborg.c-		desired_turn_angle =
--
src/uqm/cyborg.c-		else
src/uqm/cyborg.c-		{
src/uqm/cyborg.c-			desired_turn_angle = NORMALIZE_ANGLE (
src/uqm/cyborg.c:				FACING_TO_ANGLE (StarShipPtr->ShipFacing)
src/uqm/cyborg.c-				- EvalDescPtr->facing);
src/uqm/cyborg.c-			if ((desired_turn_angle & (HALF_CIRCLE - 1)) == 0)
src/uqm/cyborg.c-				desired_thrust_angle = TFB_Random () & 1 ? RIGHT : LEFT;
--
src/uqm/cyborg.c-		COUNT planet_facing;
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		planet_facing = NORMALIZE_FACING (ANGLE_TO_FACING (desired_thrust_angle));
src/uqm/cyborg.c:		cone_of_fire = NORMALIZE_FACING (planet_facing - StarShipPtr->ShipFacing
src/uqm/cyborg.c-			+ ANGLE_TO_FACING (QUADRANT));
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		if (RDPtr->characteristics.thrust_increment !=
--
src/uqm/cyborg.c-					 && (cone_of_fire < ANGLE_TO_FACING (OCTANT)
src/uqm/cyborg.c-						 || cone_of_fire > ANGLE_TO_FACING ((QUADRANT << 1) - OCTANT))))
src/uqm/cyborg.c-		{
src/uqm/cyborg.c:			desired_turn_angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/cyborg.c-			if (NORMALIZE_ANGLE (desired_turn_angle
src/uqm/cyborg.c-								 - travel_angle + QUADRANT) > HALF_CIRCLE)
src/uqm/cyborg.c-				desired_turn_angle = travel_angle;
--
src/uqm/cyborg.c-			STARSHIP *EnemyStarShipPtr;
src/uqm/cyborg.c-			
src/uqm/cyborg.c-			GetElementStarShip (OtherObjPtr, &EnemyStarShipPtr);
src/uqm/cyborg.c:			ship_flags = EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags;
src/uqm/cyborg.c-			for (fire_flags = FIRES_FORE, facing = EvalDescPtr->facing;
src/uqm/cyborg.c-				 fire_flags <= FIRES_LEFT;
src/uqm/cyborg.c-				 fire_flags <<= 1, facing += QUADRANT)
--
src/uqm/cyborg.c-			
src/uqm/cyborg.c-			if (EvalDescPtr->which_turn <= 8
src/uqm/cyborg.c-				&& RDPtr->characteristics.max_thrust <=
src/uqm/cyborg.c:				EnemyStarShipPtr->RaceDescPtr->characteristics.max_thrust)
src/uqm/cyborg.c-				goto DoManeuver;
src/uqm/cyborg.c-		}
src/uqm/cyborg.c-		
--
src/uqm/cyborg.c-			 &&
src/uqm/cyborg.c-#endif /* NOTYET */
src/uqm/cyborg.c-			 /* not at full speed */
src/uqm/cyborg.c:			 !(StarShipPtr->cur_status_flags
src/uqm/cyborg.c-			   & (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/cyborg.c-			 && (PlotIntercept (ShipPtr, OtherObjPtr, 40, (CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR) << 1) // JMS_GFX
src/uqm/cyborg.c-#ifdef NOTYET
--
src/uqm/cyborg.c-				(
src/uqm/cyborg.c-				 /* pointed straight at him */
src/uqm/cyborg.c-				 NORMALIZE_ANGLE (desired_thrust_angle
src/uqm/cyborg.c:								  - FACING_TO_ANGLE (StarShipPtr->ShipFacing) + OCTANT) <= QUADRANT
src/uqm/cyborg.c-				 /* or not exposed to business end */
src/uqm/cyborg.c-				 || cone_of_fire > QUADRANT
src/uqm/cyborg.c-				 )
--
src/uqm/cyborg.c-				}
src/uqm/cyborg.c-#endif /* NOTYET */
src/uqm/cyborg.c-				
src/uqm/cyborg.c:				desired_thrust_angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/cyborg.c-				desired_turn_angle = desired_thrust_angle;
src/uqm/cyborg.c-			}
src/uqm/cyborg.c-		}
--
src/uqm/cyborg.c-			if (RDPtr->characteristics.thrust_increment !=
src/uqm/cyborg.c-				RDPtr->characteristics.max_thrust
src/uqm/cyborg.c-				/* and already at full speed */
src/uqm/cyborg.c:				&& (StarShipPtr->cur_status_flags
src/uqm/cyborg.c-					& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/cyborg.c-				/* and facing away from enemy */
src/uqm/cyborg.c-				&& (NORMALIZE_ANGLE (desired_turn_angle
--
src/uqm/cyborg.c-				if (NORMALIZE_ANGLE (desired_thrust_angle
src/uqm/cyborg.c-									 - ARCTAN (ship_delta_x, ship_delta_y)
src/uqm/cyborg.c-									 + (OCTANT + 2)) <= ((OCTANT + 2) << 1))
src/uqm/cyborg.c:					desired_thrust_angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/cyborg.c-				else
src/uqm/cyborg.c-					desired_thrust_angle = desired_turn_angle;
src/uqm/cyborg.c-			}
--
src/uqm/cyborg.c-	RACE_DESC *RDPtr;
src/uqm/cyborg.c-	RACE_DESC *EnemyRDPtr;
src/uqm/cyborg.c-	
src/uqm/cyborg.c:	RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	if (RDPtr->cyborg_control.ManeuverabilityIndex == 0)
src/uqm/cyborg.c-		InitCyborg (StarShipPtr);
src/uqm/cyborg.c-	
src/uqm/cyborg.c:	LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/cyborg.c-	if (RDPtr->ship_info.crew_level == 0
src/uqm/cyborg.c-		|| GetPrimType (&DisplayArray[ShipPtr->PrimIndex]) == NO_PRIM)
src/uqm/cyborg.c-	{
src/uqm/cyborg.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/cyborg.c-		return (0);
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	ShipMoved = TRUE;
src/uqm/cyborg.c-	/* Disable ship's special completely for the Standard AI */
src/uqm/cyborg.c:	if (StarShipPtr->control & STANDARD_RATING)
src/uqm/cyborg.c:		++StarShipPtr->special_counter;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-#ifdef DEBUG_CYBORG
src/uqm/cyborg.c-	if (!(ShipPtr->state_flags & FINITE_LIFE)
--
src/uqm/cyborg.c-		ShipPtr->life_span += 2; /* make ship invulnerable */
src/uqm/cyborg.c-#endif /* DEBUG_CYBORG */
src/uqm/cyborg.c-	Ship = *ShipPtr;
src/uqm/cyborg.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/cyborg.c:	ShipFacing = StarShipPtr->ShipFacing;
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	for (ConcernCounter = 0;
src/uqm/cyborg.c-		 ConcernCounter <= FIRST_EMPTY_INDEX; ++ConcernCounter)
--
src/uqm/cyborg.c-	if (Ship.turn_wait == 0)
src/uqm/cyborg.c-	{
src/uqm/cyborg.c-		ShipMoved = FALSE;
src/uqm/cyborg.c:		StarShipPtr->ship_input_state &= ~(LEFT | RIGHT);
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-	if (Ship.thrust_wait == 0)
src/uqm/cyborg.c-	{
src/uqm/cyborg.c-		ShipMoved = FALSE;
src/uqm/cyborg.c:		StarShipPtr->ship_input_state &= ~THRUST;
src/uqm/cyborg.c-	}
src/uqm/cyborg.c-	
src/uqm/cyborg.c-	for (hElement = GetHeadElement ();
--
src/uqm/cyborg.c-			else if (ed.ObjectPtr->state_flags & PLAYER_SHIP)
src/uqm/cyborg.c-			{
src/uqm/cyborg.c-				GetElementStarShip (ed.ObjectPtr, &EnemyStarShipPtr);
src/uqm/cyborg.c:				EnemyRDPtr = EnemyStarShipPtr->RaceDescPtr;
src/uqm/cyborg.c-				if (EnemyRDPtr->cyborg_control.ManeuverabilityIndex == 0)
src/uqm/cyborg.c-					InitCyborg (EnemyStarShipPtr);
src/uqm/cyborg.c-				
--
src/uqm/cyborg.c-#ifdef MAYBE
src/uqm/cyborg.c-				OBJECT_CLOAKED (ed.ObjectPtr) ? GetVelocityTravelAngle (&ed.ObjectPtr->velocity) :
src/uqm/cyborg.c-#endif /* MAYBE */
src/uqm/cyborg.c:				FACING_TO_ANGLE (EnemyStarShipPtr->ShipFacing);
src/uqm/cyborg.c-				ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn = ed.which_turn;
src/uqm/cyborg.c-				
src/uqm/cyborg.c-				if (ShipMoved
--
src/uqm/cyborg.c-					|| (WEAPON_RANGE (&RDPtr->cyborg_control) < (LONG_RANGE_WEAPON << RESOLUTION_FACTOR)
src/uqm/cyborg.c-						&& (WEAPON_RANGE (&RDPtr->cyborg_control) <= (CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR)
src/uqm/cyborg.c-							|| (WEAPON_RANGE (&EnemyRDPtr->cyborg_control) >= (LONG_RANGE_WEAPON << RESOLUTION_FACTOR)
src/uqm/cyborg.c:								&& (EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags & SEEKING_WEAPON))
src/uqm/cyborg.c-							|| (
src/uqm/cyborg.c-#ifdef OLD
src/uqm/cyborg.c-								MANEUVERABILITY (&RDPtr->cyborg_control) <
--
src/uqm/cyborg.c-				else
src/uqm/cyborg.c-					ObjectsOfConcern[ENEMY_SHIP_INDEX].MoveState = ENTICE;
src/uqm/cyborg.c-				
src/uqm/cyborg.c:				if ((EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags & IMMEDIATE_WEAPON)
src/uqm/cyborg.c-					&& ship_weapons (ed.ObjectPtr, &Ship, 0))
src/uqm/cyborg.c-				{
src/uqm/cyborg.c-					ed.which_turn = 1;
--
src/uqm/cyborg.c-					 && ed.ObjectPtr->life_span > 0)
src/uqm/cyborg.c-			{
src/uqm/cyborg.c-				GetElementStarShip (ed.ObjectPtr, &EnemyStarShipPtr);
src/uqm/cyborg.c:				EnemyRDPtr = EnemyStarShipPtr->RaceDescPtr;
src/uqm/cyborg.c-				if (((EnemyRDPtr->ship_info.ship_flags & SEEKING_WEAPON)
src/uqm/cyborg.c-					 && ed.ObjectPtr->next.image.farray !=
src/uqm/cyborg.c-					 EnemyRDPtr->ship_data.special)
--
src/uqm/cyborg.c-							ed.which_turn = 0;
src/uqm/cyborg.c-					}
src/uqm/cyborg.c-				}
src/uqm/cyborg.c:				else if (!(StarShipPtr->control & AWESOME_RATING))
src/uqm/cyborg.c-					ed.which_turn = 0;
src/uqm/cyborg.c-				else
src/uqm/cyborg.c-				{
--
src/uqm/cyborg.c-					ed.which_turn
src/uqm/cyborg.c-					&& (ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn > 32
src/uqm/cyborg.c-						|| (ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn > 8
src/uqm/cyborg.c:							&& StarShipPtr->hShip == ed.ObjectPtr->hTarget)))
src/uqm/cyborg.c-				{
src/uqm/cyborg.c-					ed.MoveState = PURSUE;
src/uqm/cyborg.c-					ed.facing = 0;
--
src/uqm/cyborg.c-	RDPtr->cyborg_control.intelligence_func (&Ship, ObjectsOfConcern,
src/uqm/cyborg.c-											 ConcernCounter);
src/uqm/cyborg.c-#ifdef DEBUG_CYBORG
src/uqm/cyborg.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/cyborg.c-#endif /* DEBUG_CYBORG */
src/uqm/cyborg.c-	
src/uqm/cyborg.c:	StarShipPtr->ShipFacing = ShipFacing;
src/uqm/cyborg.c-	{
src/uqm/cyborg.c-		BATTLE_INPUT_STATE InputState;
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		InputState = 0;
src/uqm/cyborg.c:		if (StarShipPtr->ship_input_state & LEFT)
src/uqm/cyborg.c-			InputState |= BATTLE_LEFT;
src/uqm/cyborg.c:		else if (StarShipPtr->ship_input_state & RIGHT)
src/uqm/cyborg.c-			InputState |= BATTLE_RIGHT;
src/uqm/cyborg.c:		if (StarShipPtr->ship_input_state & THRUST)
src/uqm/cyborg.c-			InputState |= BATTLE_THRUST;
src/uqm/cyborg.c:		if (StarShipPtr->ship_input_state & WEAPON)
src/uqm/cyborg.c-			InputState |= BATTLE_WEAPON;
src/uqm/cyborg.c:		if (StarShipPtr->ship_input_state & SPECIAL)
src/uqm/cyborg.c-			InputState |= BATTLE_SPECIAL;
src/uqm/cyborg.c-		
src/uqm/cyborg.c-		(void) context;
--
src/uqm/status.c-	FRAME Frame;
src/uqm/status.c-	RACE_DESC *RDPtr;
src/uqm/status.c-
src/uqm/status.c:	RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/status.c-	Frame = RDPtr->ship_data.captain_control.background;
src/uqm/status.c-	if (Frame)
src/uqm/status.c-	{
--
src/uqm/status.c-	BatchGraphics ();
src/uqm/status.c-	
src/uqm/status.c-	// Grey area under and around captain's window.
src/uqm/status.c:	assert (StarShipPtr->playerNr >= 0);
src/uqm/status.c:	y_offs = status_y_offsets[StarShipPtr->playerNr];
src/uqm/status.c-	r.corner.x = CAPTAIN_XOFFS - RES_STAT_SCALE(4); // JMS_GFX
src/uqm/status.c-	r.corner.y = y_offs + SHIP_INFO_HEIGHT;
src/uqm/status.c-	r.extent.width = STATUS_WIDTH - 2;
--
src/uqm/status.c-	s.origin.y = y;
src/uqm/status.c-	DrawStamp (&s);
src/uqm/status.c-
src/uqm/status.c:	if (StarShipPtr->captains_name_index == 0
src/uqm/status.c:			&& StarShipPtr->playerNr == RPG_PLAYER_NUM)
src/uqm/status.c-	{	// This is SIS
src/uqm/status.c-		TEXT t;
src/uqm/status.c-
--
src/uqm/status.c-	retval = TRUE;
src/uqm/status.c-
src/uqm/status.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/status.c:	ShipInfoPtr = &StarShipPtr->RaceDescPtr->ship_info;
src/uqm/status.c-	if (energy_delta >= 0)
src/uqm/status.c-	{
src/uqm/status.c-		if ((BYTE)(ShipInfoPtr->energy_level + (BYTE)energy_delta) >
--
src/uqm/status.c-	}
src/uqm/status.c-
src/uqm/status.c-	if (!retval)
src/uqm/status.c:		StarShipPtr->cur_status_flags |= LOW_ON_ENERGY;
src/uqm/status.c-	else
src/uqm/status.c-	{
src/uqm/status.c:		StarShipPtr->cur_status_flags &= ~LOW_ON_ENERGY;
src/uqm/status.c:		StarShipPtr->energy_counter =
src/uqm/status.c:				StarShipPtr->RaceDescPtr->characteristics.energy_wait;
src/uqm/status.c-
src/uqm/status.c:		DeltaStatistics (ShipInfoPtr, status_y_offsets[StarShipPtr->playerNr],
src/uqm/status.c-				0, energy_delta);
src/uqm/status.c-	}
src/uqm/status.c-
--
src/uqm/status.c-
src/uqm/status.c-	retval = TRUE;
src/uqm/status.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/status.c:	ShipInfoPtr = &StarShipPtr->RaceDescPtr->ship_info;
src/uqm/status.c-	if (crew_delta > 0)
src/uqm/status.c-	{
src/uqm/status.c-		ElementPtr->crew_level += crew_delta;
--
src/uqm/status.c-		}
src/uqm/status.c-	}
src/uqm/status.c-
src/uqm/status.c:	DeltaStatistics (ShipInfoPtr, status_y_offsets[StarShipPtr->playerNr],
src/uqm/status.c-			crew_delta, 0);
src/uqm/status.c-
src/uqm/status.c-	return (retval);
--
src/uqm/status.c-	STARSHIP *StarShipPtr;
src/uqm/status.c-
src/uqm/status.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/status.c:	if (StarShipPtr->captains_name_index
src/uqm/status.c:			|| StarShipPtr->playerNr == RPG_PLAYER_NUM)
src/uqm/status.c-	{	// All except Sa-Matra, no captain's window there
src/uqm/status.c-		STATUS_FLAGS old_status_flags, cur_status_flags;
src/uqm/status.c-		CAPTAIN_STUFF *CSPtr;
src/uqm/status.c-
src/uqm/status.c:		cur_status_flags = StarShipPtr->cur_status_flags;
src/uqm/status.c:		old_status_flags = StarShipPtr->old_status_flags;
src/uqm/status.c-		old_status_flags ^= cur_status_flags;
src/uqm/status.c-
src/uqm/status.c:		CSPtr = &StarShipPtr->RaceDescPtr->ship_data.captain_control;
src/uqm/status.c-		old_status_flags &= (LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/status.c-		if (old_status_flags)
src/uqm/status.c-		{
src/uqm/status.c:			assert (StarShipPtr->playerNr >= 0);
src/uqm/status.c:			CaptainsWindow (CSPtr, status_y_offsets[StarShipPtr->playerNr],
src/uqm/status.c-					old_status_flags, cur_status_flags, 1);
src/uqm/status.c-		}
src/uqm/status.c-	}
--
src/uqm/status.c-	STARSHIP *StarShipPtr;
src/uqm/status.c-
src/uqm/status.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/status.c:	if (StarShipPtr->captains_name_index
src/uqm/status.c:			|| StarShipPtr->playerNr == RPG_PLAYER_NUM)
src/uqm/status.c-	{	// All except Sa-Matra, no captain's window there
src/uqm/status.c-		COORD y;
src/uqm/status.c-		STATUS_FLAGS cur_status_flags, old_status_flags;
src/uqm/status.c-
src/uqm/status.c:		cur_status_flags = StarShipPtr->cur_status_flags;
src/uqm/status.c-
src/uqm/status.c:		assert (StarShipPtr->playerNr >= 0);
src/uqm/status.c:		y = status_y_offsets[StarShipPtr->playerNr];
src/uqm/status.c-
src/uqm/status.c-		if (ShipPtr->crew_level == 0)
src/uqm/status.c-		{
src/uqm/status.c:			StarShipPtr->cur_status_flags &=
src/uqm/status.c-					~(LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/status.c-
src/uqm/status.c:			if (StarShipPtr->RaceDescPtr->ship_info.crew_level == 0)
src/uqm/status.c-			{
src/uqm/status.c-				BYTE i, j;
src/uqm/status.c-				Color c;
--
src/uqm/status.c-			}
src/uqm/status.c-		}
src/uqm/status.c-
src/uqm/status.c:		old_status_flags = StarShipPtr->old_status_flags;
src/uqm/status.c-		old_status_flags = (old_status_flags ^ cur_status_flags) &
src/uqm/status.c-				(LEFT | RIGHT | THRUST | WEAPON | SPECIAL | LOW_ON_ENERGY);
src/uqm/status.c-
--
src/uqm/status.c-			if (old_status_flags)
src/uqm/status.c-			{
src/uqm/status.c-				CaptainsWindow (
src/uqm/status.c:						&StarShipPtr->RaceDescPtr->ship_data.captain_control,
src/uqm/status.c-						y, old_status_flags, cur_status_flags, 2);
src/uqm/status.c-			}
src/uqm/status.c-		}
src/uqm/status.c-
src/uqm/status.c:		StarShipPtr->old_status_flags = cur_status_flags;
src/uqm/status.c-	}
src/uqm/status.c-}
src/uqm/status.c-
--
src/uqm/ships/sis_ship/sis_ship.c-		ElementPtr->velocity = GLOBAL (velocity);
src/uqm/ships/sis_ship/sis_ship.c-	AccelerateDirection = 0;
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	++StarShipPtr->weapon_counter; /* no shooting in hyperspace! */
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	if ((GLOBAL (autopilot)).x == ~0
src/uqm/ships/sis_ship/sis_ship.c-		|| (GLOBAL (autopilot)).y == ~0
src/uqm/ships/sis_ship/sis_ship.c:		|| (StarShipPtr->cur_status_flags & (LEFT | RIGHT | THRUST))
src/uqm/ships/sis_ship/sis_ship.c-		|| !(GET_GAME_STATE(AUTOPILOT_OK))) // JMS: This check makes autopilot engage only after coming to full stop
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c-	LeaveAutoPilot:
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		// JMS: This re-check is now needed because of the added autopilot_ok variable to previous check
src/uqm/ships/sis_ship/sis_ship.c:		if ((GLOBAL (autopilot)).x == ~0 || (GLOBAL (autopilot)).y == ~0 || (StarShipPtr->cur_status_flags & (LEFT | RIGHT | THRUST)))
src/uqm/ships/sis_ship/sis_ship.c-			(GLOBAL (autopilot)).x = (GLOBAL (autopilot)).y = ~0;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:		if (!(StarShipPtr->cur_status_flags & THRUST)
src/uqm/ships/sis_ship/sis_ship.c-			|| (GLOBAL_SIS (FuelOnBoard) == 0
src/uqm/ships/sis_ship/sis_ship.c-				&& (GET_GAME_STATE (ARILOU_SPACE_SIDE) <= 1)))
src/uqm/ships/sis_ship/sis_ship.c-		{
--
src/uqm/ships/sis_ship/sis_ship.c-			udx = dtempx;
src/uqm/ships/sis_ship/sis_ship.c-			udy = dtempy;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:			StarShipPtr->cur_status_flags &= ~THRUST;
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c-	else
--
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		/* This prevents ship from flying backwards on auto-pilot.
src/uqm/ships/sis_ship/sis_ship.c-		 * It could also theoretically abort autopilot in a bad savegame */
src/uqm/ships/sis_ship/sis_ship.c:		if ((StarShipPtr->cur_status_flags & SHIP_AT_MAX_SPEED)
src/uqm/ships/sis_ship/sis_ship.c-			/*|| (ElementPtr->state_flags & APPEARING)*/ )
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c:			if (NORMALIZE_FACING (StarShipPtr->ShipFacing + ANGLE_TO_FACING (QUADRANT) - facing) > ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/sis_ship/sis_ship.c-				goto LeaveAutoPilot;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:			facing = StarShipPtr->ShipFacing;
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c:		else if ((int)facing != (int)StarShipPtr->ShipFacing
src/uqm/ships/sis_ship/sis_ship.c-				 && ElementPtr->turn_wait == 0)
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c:			if (NORMALIZE_FACING (StarShipPtr->ShipFacing - facing) >= ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/sis_ship/sis_ship.c-			{
src/uqm/ships/sis_ship/sis_ship.c-				facing = NORMALIZE_FACING (facing - 1);
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->cur_status_flags |= RIGHT;
src/uqm/ships/sis_ship/sis_ship.c-			}
src/uqm/ships/sis_ship/sis_ship.c:			else if ((int)StarShipPtr->ShipFacing != (int)facing)
src/uqm/ships/sis_ship/sis_ship.c-			{
src/uqm/ships/sis_ship/sis_ship.c-				facing = NORMALIZE_FACING (facing + 1);
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->cur_status_flags |= LEFT;
src/uqm/ships/sis_ship/sis_ship.c-			}
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:			if ((int)facing == (int)StarShipPtr->ShipFacing)
src/uqm/ships/sis_ship/sis_ship.c-				ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		if ((GLOBAL_SIS (FuelOnBoard)
src/uqm/ships/sis_ship/sis_ship.c-			 || GET_GAME_STATE (ARILOU_SPACE_SIDE) > 1) // JMS: Orz space check.
src/uqm/ships/sis_ship/sis_ship.c:			&& (int)facing == (int)StarShipPtr->ShipFacing)
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c:			StarShipPtr->cur_status_flags |= SHIP_AT_MAX_SPEED;
src/uqm/ships/sis_ship/sis_ship.c-			AccelerateDirection = 1;
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c-		else
--
src/uqm/ships/sis_ship/sis_ship.c-		COUNT dist;
src/uqm/ships/sis_ship/sis_ship.c-		SIZE speed, velocity_increment;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:		velocity_increment = WORLD_TO_VELOCITY (StarShipPtr->RaceDescPtr->characteristics.thrust_increment);
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		if ((dist = square_root ((long)udx * udx + (long)udy * udy)) == 0)
src/uqm/ships/sis_ship/sis_ship.c-			dist = 1; /* prevent divide by zero */
--
src/uqm/ships/sis_ship/sis_ship.c-			if ((speed = dy) < 0)
src/uqm/ships/sis_ship/sis_ship.c-				speed = 0;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:			StarShipPtr->cur_status_flags &= ~SHIP_AT_MAX_SPEED;
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c-		else
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c-			SIZE max_velocity;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-			AccelerateDirection = 0;
src/uqm/ships/sis_ship/sis_ship.c:			max_velocity = WORLD_TO_VELOCITY (StarShipPtr->RaceDescPtr->characteristics.max_thrust);
src/uqm/ships/sis_ship/sis_ship.c-			dy = (speed / velocity_increment + 1) * velocity_increment;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-			if (dy < speed + velocity_increment)
--
src/uqm/ships/sis_ship/sis_ship.c-			if ((speed = dy) > max_velocity)
src/uqm/ships/sis_ship/sis_ship.c-			{
src/uqm/ships/sis_ship/sis_ship.c-				speed = max_velocity;
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->cur_status_flags |= SHIP_AT_MAX_SPEED;
src/uqm/ships/sis_ship/sis_ship.c-			}
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-		dtempy = (SDWORD)((long)udy * speed / (long)dist);
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		SetVelocityComponents (&ElementPtr->velocity, dtempx, dtempy);
src/uqm/ships/sis_ship/sis_ship.c:		ElementPtr->thrust_wait =StarShipPtr->RaceDescPtr->characteristics.thrust_wait;
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c-}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-	GLOBAL (velocity) = ElementPtr->velocity;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	if (((StarShipPtr->cur_status_flags & WEAPON) ||
src/uqm/ships/sis_ship/sis_ship.c-			PulsedInputState.menu[KEY_MENU_CANCEL])
src/uqm/ships/sis_ship/sis_ship.c:			&& StarShipPtr->special_counter == 0)
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c-#define MENU_DELAY 10
src/uqm/ships/sis_ship/sis_ship.c-		HyperspaceMenu ();
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->cur_status_flags &= ~SHIP_AT_MAX_SPEED;
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->special_counter = MENU_DELAY;
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c-}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-		PaidFor = FALSE;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		LaserColor = ColorRange[
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->RaceDescPtr->characteristics.special_energy_cost
src/uqm/ships/sis_ship/sis_ship.c-				];
src/uqm/ships/sis_ship/sis_ship.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/sis_ship/sis_ship.c-		for (hObject = GetTailElement (); hObject; hObject = hNextObject)
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c-			ELEMENT *ObjectPtr;
--
src/uqm/ships/sis_ship/sis_ship.c-					if (!PaidFor)
src/uqm/ships/sis_ship/sis_ship.c-					{
src/uqm/ships/sis_ship/sis_ship.c-						if (!DeltaEnergy (ShipPtr,
src/uqm/ships/sis_ship/sis_ship.c:								-(StarShipPtr->RaceDescPtr->characteristics.special_energy_cost
src/uqm/ships/sis_ship/sis_ship.c-								<< 2)))
src/uqm/ships/sis_ship/sis_ship.c-							break;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-						ProcessSound (SetAbsSoundIndex (
src/uqm/ships/sis_ship/sis_ship.c-										/* POINT_DEFENSE_LASER */
src/uqm/ships/sis_ship/sis_ship.c:								StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/sis_ship/sis_ship.c:						StarShipPtr->special_counter =
src/uqm/ships/sis_ship/sis_ship.c:								StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/sis_ship/sis_ship.c-						PaidFor = TRUE;
src/uqm/ships/sis_ship/sis_ship.c-					}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-						LockElement (hPointDefense, &PDPtr);
src/uqm/ships/sis_ship/sis_ship.c-						PDPtr->mass_points =
src/uqm/ships/sis_ship/sis_ship.c:								StarShipPtr->RaceDescPtr->characteristics.special_energy_cost;
src/uqm/ships/sis_ship/sis_ship.c-						SetElementStarShip (PDPtr, StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c-						PDPtr->hTarget = 0;
src/uqm/ships/sis_ship/sis_ship.c-						UnlockElement (hPointDefense);
--
src/uqm/ships/sis_ship/sis_ship.c-			}
src/uqm/ships/sis_ship/sis_ship.c-			UnlockElement (hObject);
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c-}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-	STARSHIP *StarShipPtr;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	if (StarShipPtr->RaceDescPtr->characteristics.special_energy_cost == 0)
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->cur_status_flags &= ~SPECIAL;
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->special_counter = 2;
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c:	if (!(StarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/sis_ship/sis_ship.c-			& (FIRES_FORE | FIRES_RIGHT | FIRES_AFT | FIRES_LEFT)))
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->cur_status_flags &= ~WEAPON;
src/uqm/ships/sis_ship/sis_ship.c:		StarShipPtr->weapon_counter = 2;
src/uqm/ships/sis_ship/sis_ship.c-	}
src/uqm/ships/sis_ship/sis_ship.c-}
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-	STARSHIP *StarShipPtr;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/sis_ship/sis_ship.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/sis_ship/sis_ship.c:			&& StarShipPtr->RaceDescPtr->characteristics.special_energy_cost)
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c-		spawn_point_defense (ElementPtr);
src/uqm/ships/sis_ship/sis_ship.c-	}
--
src/uqm/ships/sis_ship/sis_ship.c-	SIS_DATA *SisData;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	SisData = (SIS_DATA *) StarShipPtr->RaceDescPtr->data;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	nt = (BYTE)((4 - SisData->num_trackers) & 3);
src/uqm/ships/sis_ship/sis_ship.c-
--
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/sis_ship/sis_ship.c-		MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/sis_ship/sis_ship.c:		MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/sis_ship/sis_ship.c-		MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/sis_ship/sis_ship.c:		MissileBlock.face = NORMALIZE_FACING (StarShipPtr->ShipFacing
src/uqm/ships/sis_ship/sis_ship.c-				+ MissileBlock.face);
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-		BlasterArray[i] = initialize_missile (&MissileBlock);
--
src/uqm/ships/sis_ship/sis_ship.c-	SIS_DATA *SisData;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/sis_ship/sis_ship.c:	SisData = (SIS_DATA *) StarShipPtr->RaceDescPtr->data;
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/sis_ship/sis_ship.c-	if (lpEvalDesc->ObjectPtr)
src/uqm/ships/sis_ship/sis_ship.c-	{
src/uqm/ships/sis_ship/sis_ship.c:		if (StarShipPtr->RaceDescPtr->characteristics.special_energy_cost)
src/uqm/ships/sis_ship/sis_ship.c-		{
src/uqm/ships/sis_ship/sis_ship.c:			if (StarShipPtr->special_counter == 0
src/uqm/ships/sis_ship/sis_ship.c-					&& ((lpEvalDesc->ObjectPtr
src/uqm/ships/sis_ship/sis_ship.c-					&& lpEvalDesc->which_turn <= 2)
src/uqm/ships/sis_ship/sis_ship.c-					|| (ObjectsOfConcern[ENEMY_SHIP_INDEX].ObjectPtr != NULL
src/uqm/ships/sis_ship/sis_ship.c-					&& ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn <= 4)))
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/sis_ship/sis_ship.c-			else
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/sis_ship/sis_ship.c-			lpEvalDesc->ObjectPtr = NULL;
src/uqm/ships/sis_ship/sis_ship.c-		}
src/uqm/ships/sis_ship/sis_ship.c:		else if (MANEUVERABILITY (&StarShipPtr->RaceDescPtr->cyborg_control)
src/uqm/ships/sis_ship/sis_ship.c-				< RESOLUTION_COMPENSATED(MEDIUM_SHIP) // JMS_GFX
src/uqm/ships/sis_ship/sis_ship.c-				&& lpEvalDesc->MoveState == ENTICE
src/uqm/ships/sis_ship/sis_ship.c-				&& (!(lpEvalDesc->ObjectPtr->state_flags & CREW_OBJECT)
--
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/sis_ship/sis_ship.c-	if (SisData->num_trackers
src/uqm/ships/sis_ship/sis_ship.c:			&& StarShipPtr->weapon_counter == 0
src/uqm/ships/sis_ship/sis_ship.c:			&& !(StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/sis_ship/sis_ship.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/sis_ship/sis_ship.c-			&& lpEvalDesc->which_turn <= 16)
src/uqm/ships/sis_ship/sis_ship.c-	{
--
src/uqm/ships/sis_ship/sis_ship.c-		direction_facing = NORMALIZE_FACING (
src/uqm/ships/sis_ship/sis_ship.c-				ANGLE_TO_FACING (ARCTAN (delta_x, delta_y)));
src/uqm/ships/sis_ship/sis_ship.c-
src/uqm/ships/sis_ship/sis_ship.c:		ship_flags = StarShipPtr->RaceDescPtr->ship_info.ship_flags;
src/uqm/ships/sis_ship/sis_ship.c:		for (fire_flags = FIRES_FORE, facing = StarShipPtr->ShipFacing;
src/uqm/ships/sis_ship/sis_ship.c-				fire_flags <= FIRES_LEFT;
src/uqm/ships/sis_ship/sis_ship.c-				fire_flags <<= 1, facing += QUADRANT)
src/uqm/ships/sis_ship/sis_ship.c-		{
--
src/uqm/ships/sis_ship/sis_ship.c-					direction_facing - facing + ANGLE_TO_FACING (OCTANT)
src/uqm/ships/sis_ship/sis_ship.c-					) <= ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/sis_ship/sis_ship.c-			{
src/uqm/ships/sis_ship/sis_ship.c:				StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/sis_ship/sis_ship.c-				break;
src/uqm/ships/sis_ship/sis_ship.c-			}
src/uqm/ships/sis_ship/sis_ship.c-		}
--
src/uqm/ships/orz/orz.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/orz/orz.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/orz/orz.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-	LockElement (GetSuccElement (ShipPtr), &TurretPtr);
src/uqm/ships/orz/orz.c-	if (TurretPtr->turn_wait == 0
src/uqm/ships/orz/orz.c:			&& (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/orz/orz.c:			&& (StarShipPtr->cur_status_flags & (LEFT | RIGHT)))
src/uqm/ships/orz/orz.c-	{
src/uqm/ships/orz/orz.c:		if (StarShipPtr->cur_status_flags & RIGHT)
src/uqm/ships/orz/orz.c-			++TurretPtr->thrust_wait;
src/uqm/ships/orz/orz.c-		else
src/uqm/ships/orz/orz.c-			--TurretPtr->thrust_wait;
--
src/uqm/ships/orz/orz.c-		TurretPtr->turn_wait = TURRET_WAIT + 1;
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c-	MissileBlock.face = MissileBlock.index =
src/uqm/ships/orz/orz.c:			NORMALIZE_FACING (StarShipPtr->ShipFacing
src/uqm/ships/orz/orz.c-			+ TurretPtr->thrust_wait);
src/uqm/ships/orz/orz.c-	UnlockElement (GetSuccElement (ShipPtr));
src/uqm/ships/orz/orz.c-
--
src/uqm/ships/orz/orz.c-		LockElement (hElement, &ElementPtr);
src/uqm/ships/orz/orz.c-		hNextElement = GetPredElement (ElementPtr);
src/uqm/ships/orz/orz.c-		if (ElementPtr->current.image.farray ==
src/uqm/ships/orz/orz.c:				StarShipPtr->RaceDescPtr->ship_data.special
src/uqm/ships/orz/orz.c-				&& ElementPtr->life_span
src/uqm/ships/orz/orz.c-				&& !(ElementPtr->state_flags & (FINITE_LIFE | DISAPPEARING)))
src/uqm/ships/orz/orz.c-		{
--
src/uqm/ships/orz/orz.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/orz/orz.c-	if (lpEvalDesc->ObjectPtr == 0)
src/uqm/ships/orz/orz.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/orz/orz.c:	else if (StarShipPtr->special_counter != 1)
src/uqm/ships/orz/orz.c-	{
src/uqm/ships/orz/orz.c-		STARSHIP *EnemyStarShipPtr;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-		if (ShipPtr->turn_wait == 0
src/uqm/ships/orz/orz.c-				&& lpEvalDesc->MoveState == ENTICE
src/uqm/ships/orz/orz.c-				&& lpEvalDesc->which_turn < 24
src/uqm/ships/orz/orz.c:				&& (StarShipPtr->cur_status_flags
src/uqm/ships/orz/orz.c-				& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/ships/orz/orz.c:				&& !(StarShipPtr->ship_input_state & THRUST)
src/uqm/ships/orz/orz.c-				&& NORMALIZE_ANGLE (
src/uqm/ships/orz/orz.c-				GetVelocityTravelAngle (&ShipPtr->velocity)
src/uqm/ships/orz/orz.c-				- ARCTAN (
--
src/uqm/ships/orz/orz.c-						- ShipPtr->next.location.y
src/uqm/ships/orz/orz.c-				) + (QUADRANT - (OCTANT >> 1))) >=
src/uqm/ships/orz/orz.c-				((QUADRANT - (OCTANT >> 1)) << 1))
src/uqm/ships/orz/orz.c:			StarShipPtr->ship_input_state &= ~(LEFT | RIGHT);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/orz/orz.c-		if (ShipPtr->turn_wait == 0
src/uqm/ships/orz/orz.c:				&& !(StarShipPtr->ship_input_state & (LEFT | RIGHT | WEAPON))
src/uqm/ships/orz/orz.c-				&& TurretPtr->turn_wait == 0)
src/uqm/ships/orz/orz.c-		{
src/uqm/ships/orz/orz.c-			SIZE delta_facing;
src/uqm/ships/orz/orz.c-			COUNT facing;//, orig_facing;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			facing = NORMALIZE_FACING (StarShipPtr->ShipFacing
src/uqm/ships/orz/orz.c-					+ TurretPtr->thrust_wait);
src/uqm/ships/orz/orz.c-			if ((delta_facing = TrackShip (TurretPtr, &facing)) > 0)
src/uqm/ships/orz/orz.c-			{
src/uqm/ships/orz/orz.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/orz/orz.c-				if (delta_facing == ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/orz/orz.c-					delta_facing += (((BYTE)TFB_Random () & 1) << 1) - 1;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-				if (delta_facing < ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/orz/orz.c:					StarShipPtr->ship_input_state |= RIGHT;
src/uqm/ships/orz/orz.c-				else
src/uqm/ships/orz/orz.c:					StarShipPtr->ship_input_state |= LEFT;
src/uqm/ships/orz/orz.c-			}
src/uqm/ships/orz/orz.c-		}
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/orz/orz.c:		if (StarShipPtr->special_counter == 0
src/uqm/ships/orz/orz.c:				&& !(StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/orz/orz.c:				&& StarShipPtr->RaceDescPtr->ship_info.crew_level >
src/uqm/ships/orz/orz.c:				(BYTE)(StarShipPtr->RaceDescPtr->ship_info.max_crew >> 2)
src/uqm/ships/orz/orz.c:				&& !(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/orz/orz.c-				& POINT_DEFENSE)
src/uqm/ships/orz/orz.c-				&& (MANEUVERABILITY (
src/uqm/ships/orz/orz.c:						&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/orz/orz.c-						) < RESOLUTION_COMPENSATED(SLOW_SHIP)
src/uqm/ships/orz/orz.c-				|| lpEvalDesc->which_turn <= 12
src/uqm/ships/orz/orz.c-				|| count_marines (StarShipPtr, FALSE) < 2))
src/uqm/ships/orz/orz.c-		{
src/uqm/ships/orz/orz.c:			StarShipPtr->ship_input_state |= WEAPON | SPECIAL;
src/uqm/ships/orz/orz.c-		}
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c-
--
src/uqm/ships/orz/orz.c-	STARSHIP *StarShipPtr;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c:	LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/orz/orz.c-	if (ShipPtr->crew_level == 0
src/uqm/ships/orz/orz.c-			&& ShipPtr->life_span == 1
src/uqm/ships/orz/orz.c-			&& (ShipPtr->state_flags & (FINITE_LIFE | NONSOLID)) ==
--
src/uqm/ships/orz/orz.c-		ElementPtr->life_span = 0;
src/uqm/ships/orz/orz.c-		ElementPtr->state_flags |= DISAPPEARING;
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-	if (ElementPtr->thrust_wait)
src/uqm/ships/orz/orz.c-		--ElementPtr->thrust_wait;
--
src/uqm/ships/orz/orz.c-					ElementPtr->life_span = 0;
src/uqm/ships/orz/orz.c-					ElementPtr->state_flags |= DISAPPEARING;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:					ProcessSound (SetAbsSoundIndex (StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 4), ElementPtr);
src/uqm/ships/orz/orz.c-					goto LeftShip;
src/uqm/ships/orz/orz.c-				}
src/uqm/ships/orz/orz.c-				else if (randval < (0x0100 / 2 + 0x0100 / 16))
--
src/uqm/ships/orz/orz.c-					}
src/uqm/ships/orz/orz.c-					s.frame = SetAbsFrameIndex (ElementPtr->next.image.farray[0], GetFrameCount (ElementPtr->next.image.farray[0]) - 1);
src/uqm/ships/orz/orz.c-					ModifySilhouette (ShipPtr, &s, 0);
src/uqm/ships/orz/orz.c:					ProcessSound (SetAbsSoundIndex (StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 3), ElementPtr);
src/uqm/ships/orz/orz.c-				}
src/uqm/ships/orz/orz.c-			}
src/uqm/ships/orz/orz.c-
--
src/uqm/ships/orz/orz.c-		ElementPtr->current.image.frame =
src/uqm/ships/orz/orz.c-				ElementPtr->next.image.frame =
src/uqm/ships/orz/orz.c-						SetAbsFrameIndex (
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->ship_data.special[0], 21);
src/uqm/ships/orz/orz.c-		ElementPtr->thrust_wait = 0;
src/uqm/ships/orz/orz.c-		ElementPtr->turn_wait =
src/uqm/ships/orz/orz.c-				MAKE_BYTE (0, NORMALIZE_FACING ((BYTE)TFB_Random ()));
--
src/uqm/ships/orz/orz.c-	STARSHIP *StarShipPtr;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c:	LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/orz/orz.c-	if (ShipPtr->crew_level == 0
src/uqm/ships/orz/orz.c-			&& ShipPtr->life_span == 1
src/uqm/ships/orz/orz.c-			&& (ShipPtr->state_flags & (FINITE_LIFE | NONSOLID)) ==
--
src/uqm/ships/orz/orz.c-		ElementPtr->state_flags |= DISAPPEARING | NONSOLID;
src/uqm/ships/orz/orz.c-		ElementPtr->turn_wait = 1;
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-	if (LONIBBLE (ElementPtr->turn_wait))
src/uqm/ships/orz/orz.c-		--ElementPtr->turn_wait;
--
src/uqm/ships/orz/orz.c-						&& (ElementPtr->state_flags & IGNORE_SIMILAR))
src/uqm/ships/orz/orz.c-				{
src/uqm/ships/orz/orz.c-					ElementPtr->next.image.frame = SetAbsFrameIndex (
src/uqm/ships/orz/orz.c:							StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/orz/orz.c-							21);
src/uqm/ships/orz/orz.c-					ElementPtr->state_flags &= ~IGNORE_SIMILAR;
src/uqm/ships/orz/orz.c-					ElementPtr->state_flags |= CHANGING;
--
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-			// XXX: Hack: abusing the primary STARSHIP struct in order
src/uqm/ships/orz/orz.c-			//   to call inertial_thrust() for a marine
src/uqm/ships/orz/orz.c:			OldFacing = StarShipPtr->ShipFacing;
src/uqm/ships/orz/orz.c:			OldStatus = StarShipPtr->cur_status_flags;
src/uqm/ships/orz/orz.c:			OldIncrement = StarShipPtr->RaceDescPtr->characteristics.
src/uqm/ships/orz/orz.c-					thrust_increment;
src/uqm/ships/orz/orz.c:			OldThrust = StarShipPtr->RaceDescPtr->characteristics.max_thrust;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			StarShipPtr->ShipFacing = facing;
src/uqm/ships/orz/orz.c-			// XXX: thrust_wait is abused to store marine speed and
src/uqm/ships/orz/orz.c-			//   gravity well flags
src/uqm/ships/orz/orz.c:			StarShipPtr->cur_status_flags = ElementPtr->thrust_wait << 6;
src/uqm/ships/orz/orz.c:			StarShipPtr->RaceDescPtr->characteristics.thrust_increment = 8 << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/orz/orz.c:			StarShipPtr->RaceDescPtr->characteristics.max_thrust = 32 << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-			thrust_status = inertial_thrust (ElementPtr);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			StarShipPtr->RaceDescPtr->characteristics.max_thrust = OldThrust;
src/uqm/ships/orz/orz.c:			StarShipPtr->RaceDescPtr->characteristics.thrust_increment =
src/uqm/ships/orz/orz.c-					OldIncrement;
src/uqm/ships/orz/orz.c:			StarShipPtr->cur_status_flags = OldStatus;
src/uqm/ships/orz/orz.c:			StarShipPtr->ShipFacing = OldFacing;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-			if ((ElementPtr->thrust_wait & (SHIP_IN_GRAVITY_WELL >> 6))
src/uqm/ships/orz/orz.c-					|| delta_facing
--
src/uqm/ships/orz/orz.c-				}
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2),
src/uqm/ships/orz/orz.c-						ElementPtr1);
src/uqm/ships/orz/orz.c-			}
src/uqm/ships/orz/orz.c-
--
src/uqm/ships/orz/orz.c-				ElementPtr->PrimIndex], NO_PRIM);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c:		if (StarShipPtr->hShip)
src/uqm/ships/orz/orz.c-		{
src/uqm/ships/orz/orz.c-			COUNT facing;
src/uqm/ships/orz/orz.c-			HELEMENT hTurret, hSpaceMarine;
src/uqm/ships/orz/orz.c-			ELEMENT *ShipPtr;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/orz/orz.c-			hTurret = AllocElement ();
src/uqm/ships/orz/orz.c-			if (hTurret)
src/uqm/ships/orz/orz.c-			{
--
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-				if (TurretPtr->turn_wait)
src/uqm/ships/orz/orz.c-					--TurretPtr->turn_wait;
src/uqm/ships/orz/orz.c:				else if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/orz/orz.c:						&& (StarShipPtr->cur_status_flags & (LEFT | RIGHT)))
src/uqm/ships/orz/orz.c-				{
src/uqm/ships/orz/orz.c:					if (StarShipPtr->cur_status_flags & RIGHT)
src/uqm/ships/orz/orz.c-						++TurretPtr->thrust_wait;
src/uqm/ships/orz/orz.c-					else
src/uqm/ships/orz/orz.c-						--TurretPtr->thrust_wait;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-					TurretPtr->turn_wait = TURRET_WAIT;
src/uqm/ships/orz/orz.c-				}
src/uqm/ships/orz/orz.c:				facing = NORMALIZE_FACING (StarShipPtr->ShipFacing
src/uqm/ships/orz/orz.c-						+ TurretPtr->thrust_wait);
src/uqm/ships/orz/orz.c:				StarShipPtr->RaceDescPtr->ship_info.ship_flags &=
src/uqm/ships/orz/orz.c-						~(FIRES_FORE | FIRES_RIGHT | FIRES_AFT | FIRES_LEFT);
src/uqm/ships/orz/orz.c:				StarShipPtr->RaceDescPtr->ship_info.ship_flags |= FIRES_FORE
src/uqm/ships/orz/orz.c-						<< (NORMALIZE_FACING (facing + ANGLE_TO_FACING (OCTANT))
src/uqm/ships/orz/orz.c-						/ ANGLE_TO_FACING (QUADRANT));
src/uqm/ships/orz/orz.c-				TurretPtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/orz/orz.c-						TurretPtr->current.image.frame, facing);
src/uqm/ships/orz/orz.c-				facing = FACING_TO_ANGLE (facing);
src/uqm/ships/orz/orz.c:				if (StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/orz/orz.c-				{
src/uqm/ships/orz/orz.c-					HELEMENT hTurretEffect;
src/uqm/ships/orz/orz.c-					ELEMENT *TurretEffectPtr;
--
src/uqm/ships/orz/orz.c-								+ SINE (facing,
src/uqm/ships/orz/orz.c-								DISPLAY_TO_WORLD (TURRET_OFFSET));
src/uqm/ships/orz/orz.c-						TurretEffectPtr->current.image.farray =
src/uqm/ships/orz/orz.c:								StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/orz/orz.c-						TurretEffectPtr->current.image.frame =
src/uqm/ships/orz/orz.c-								SetAbsFrameIndex (
src/uqm/ships/orz/orz.c:								StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/orz/orz.c-								ANGLE_TO_FACING (FULL_CIRCLE));
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-						TurretEffectPtr->preprocess_func = animate;
--
src/uqm/ships/orz/orz.c-				InsertElement (hTurret, GetSuccElement (ElementPtr));
src/uqm/ships/orz/orz.c-			}
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			if (StarShipPtr->special_counter == 0
src/uqm/ships/orz/orz.c:					&& (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/orz/orz.c:					&& (StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/orz/orz.c-					&& ShipPtr->crew_level > 1
src/uqm/ships/orz/orz.c-					&& count_marines (StarShipPtr, FALSE) < MAX_MARINES
src/uqm/ships/orz/orz.c-					&& TrackShip (ShipPtr, &facing) >= 0
--
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->hit_points = 3;
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->mass_points = 1;
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:				facing = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->current.location.x =
src/uqm/ships/orz/orz.c-				ShipPtr->current.location.x
src/uqm/ships/orz/orz.c-				- COSINE (facing, DISPLAY_TO_WORLD (TURRET_OFFSET << ((RESOLUTION_FACTOR + 1)/2))); // JMS_GFX
--
src/uqm/ships/orz/orz.c-				ShipPtr->current.location.y
src/uqm/ships/orz/orz.c-				- SINE (facing, DISPLAY_TO_WORLD (TURRET_OFFSET << ((RESOLUTION_FACTOR + 1)/2))); // JMS_GFX
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->current.image.farray =
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->ship_data.special[0], 20);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-				SpaceMarinePtr->turn_wait =
src/uqm/ships/orz/orz.c-						MAKE_BYTE (0, NORMALIZE_FACING (
--
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-				DeltaCrew (ShipPtr, -1);
src/uqm/ships/orz/orz.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1),
src/uqm/ships/orz/orz.c-						SpaceMarinePtr);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:				StarShipPtr->special_counter =
src/uqm/ships/orz/orz.c:						StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/orz/orz.c-			}
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:			UnlockElement (StarShipPtr->hShip);
src/uqm/ships/orz/orz.c-		}
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c-}
--
src/uqm/ships/orz/orz.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/orz/orz.c-	if (!(ElementPtr->state_flags & APPEARING))
src/uqm/ships/orz/orz.c-	{
src/uqm/ships/orz/orz.c:		if (((StarShipPtr->cur_status_flags
src/uqm/ships/orz/orz.c:				| StarShipPtr->old_status_flags) & SPECIAL)
src/uqm/ships/orz/orz.c:				&& (StarShipPtr->cur_status_flags & (LEFT | RIGHT))
src/uqm/ships/orz/orz.c-				&& ElementPtr->turn_wait == 0)
src/uqm/ships/orz/orz.c-		{
src/uqm/ships/orz/orz.c-			++ElementPtr->turn_wait;
src/uqm/ships/orz/orz.c-		}
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c:		if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/orz/orz.c:				&& (StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/orz/orz.c:				&& StarShipPtr->weapon_counter == 0)
src/uqm/ships/orz/orz.c-		{
src/uqm/ships/orz/orz.c:			++StarShipPtr->weapon_counter;
src/uqm/ships/orz/orz.c-		}
src/uqm/ships/orz/orz.c-	}
src/uqm/ships/orz/orz.c-	else
--
src/uqm/ships/orz/orz.c-			TurretPtr->state_flags = FINITE_LIFE | NONSOLID | IGNORE_SIMILAR;
src/uqm/ships/orz/orz.c-			TurretPtr->life_span = 1;
src/uqm/ships/orz/orz.c-			TurretPtr->current.image.farray =
src/uqm/ships/orz/orz.c:					StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/orz/orz.c-			TurretPtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/orz/orz.c:					StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/orz/orz.c:					StarShipPtr->ShipFacing);
src/uqm/ships/orz/orz.c-
src/uqm/ships/orz/orz.c-			TurretPtr->postprocess_func = turret_postprocess;
src/uqm/ships/orz/orz.c-
--
src/uqm/ships/vux/vux.c-		RACE_DESC *RDPtr;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-		GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/vux/vux.c:		RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-		if (++RDPtr->characteristics.turn_wait == 0)
src/uqm/ships/vux/vux.c-			--RDPtr->characteristics.turn_wait;
--
src/uqm/ships/vux/vux.c-		GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/vux/vux.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/vux/vux.c-						/* LIMPET_AFFIXES */
src/uqm/ships/vux/vux.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2), ElementPtr1);
src/uqm/ships/vux/vux.c-		s.frame = SetAbsFrameIndex (
src/uqm/ships/vux/vux.c:				StarShipPtr->RaceDescPtr->ship_data.weapon[0], (COUNT)TFB_Random ()
src/uqm/ships/vux/vux.c-				);
src/uqm/ships/vux/vux.c-		ModifySilhouette (ElementPtr1, &s, MODIFY_IMAGE);
src/uqm/ships/vux/vux.c-	}
--
src/uqm/ships/vux/vux.c-	MISSILE_BLOCK MissileBlock;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/vux/vux.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/vux/vux.c:	MissileBlock.face = StarShipPtr->ShipFacing + HALF_CIRCLE;
src/uqm/ships/vux/vux.c-	MissileBlock.index = 0;
src/uqm/ships/vux/vux.c-	MissileBlock.sender = ElementPtr->playerNr;
src/uqm/ships/vux/vux.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/vux/vux.c-	LASER_BLOCK LaserBlock;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/vux/vux.c:	LaserBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/vux/vux.c-	LaserBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/vux/vux.c-	LaserBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/vux/vux.c-	LaserBlock.ex = COSINE (FACING_TO_ANGLE (LaserBlock.face), LASER_RANGE);
--
src/uqm/ships/vux/vux.c-			ObjectsOfConcern, ConcernCounter);
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/vux/vux.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/vux/vux.c-			&& lpEvalDesc->ObjectPtr != 0
src/uqm/ships/vux/vux.c-			&& lpEvalDesc->which_turn <= 12
src/uqm/ships/vux/vux.c:			&& (StarShipPtr->ship_input_state & (LEFT | RIGHT))
src/uqm/ships/vux/vux.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level >=
src/uqm/ships/vux/vux.c:			(BYTE)(StarShipPtr->RaceDescPtr->ship_info.max_energy >> 1))
src/uqm/ships/vux/vux.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/vux/vux.c-	else
src/uqm/ships/vux/vux.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/vux/vux.c-}
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-static void
--
src/uqm/ships/vux/vux.c-	STARSHIP *StarShipPtr;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/vux/vux.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/vux/vux.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/vux/vux.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/vux/vux.c-	{
src/uqm/ships/vux/vux.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/vux/vux.c-						/* LAUNCH_LIMPET */
src/uqm/ships/vux/vux.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/vux/vux.c-		spawn_limpets (ElementPtr);
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c:		StarShipPtr->special_counter =
src/uqm/ships/vux/vux.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/vux/vux.c-	}
src/uqm/ships/vux/vux.c-}
src/uqm/ships/vux/vux.c-
--
src/uqm/ships/vux/vux.c-		STARSHIP *StarShipPtr;
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/vux/vux.c:		facing = StarShipPtr->ShipFacing;
src/uqm/ships/vux/vux.c-		if (LOBYTE (GLOBAL (CurrentActivity)) != IN_ENCOUNTER
src/uqm/ships/vux/vux.c-				&& TrackShip (ElementPtr, &facing) >= 0)
src/uqm/ships/vux/vux.c-		{
--
src/uqm/ships/vux/vux.c-			InitIntersectEndPoint (ElementPtr);
src/uqm/ships/vux/vux.c-			InitIntersectFrame (ElementPtr);
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c:			StarShipPtr->ShipFacing = facing;
src/uqm/ships/vux/vux.c-		}
src/uqm/ships/vux/vux.c-
src/uqm/ships/vux/vux.c:		StarShipPtr->RaceDescPtr->preprocess_func = 0;
src/uqm/ships/vux/vux.c-	}
src/uqm/ships/vux/vux.c-}
src/uqm/ships/vux/vux.c-
--
src/uqm/ships/androsyn/androsyn.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/androsyn/androsyn.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/androsyn/androsyn.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/androsyn/androsyn.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/androsyn/androsyn.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/androsyn/androsyn.c-	MissileBlock.index = 0;
src/uqm/ships/androsyn/androsyn.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/androsyn/androsyn.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/androsyn/androsyn.c-				/* in blazer form */
src/uqm/ships/androsyn/androsyn.c:	if (ShipPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.special)
src/uqm/ships/androsyn/androsyn.c-	{
src/uqm/ships/androsyn/androsyn.c-		ObjectsOfConcern[CREW_OBJECT_INDEX].ObjectPtr = 0;
src/uqm/ships/androsyn/androsyn.c-		if (lpEvalDesc->ObjectPtr && lpEvalDesc->MoveState == ENTICE)
--
src/uqm/ships/androsyn/androsyn.c-			GetElementStarShip (lpEvalDesc->ObjectPtr, &pEnemyStarShip);
src/uqm/ships/androsyn/androsyn.c-			// JMS_GFX
src/uqm/ships/androsyn/androsyn.c-			if (lpEvalDesc->which_turn <= 16
src/uqm/ships/androsyn/androsyn.c:					&& (StarShipPtr->special_counter > 0
src/uqm/ships/androsyn/androsyn.c:					|| StarShipPtr->RaceDescPtr->ship_info.energy_level < MAX_ENERGY / 3
src/uqm/ships/androsyn/androsyn.c-					|| ((WEAPON_RANGE (&pEnemyStarShip->RaceDescPtr->cyborg_control) <= (CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR)
src/uqm/ships/androsyn/androsyn.c-					&& lpEvalDesc->ObjectPtr->crew_level > BLAZER_DAMAGE)
src/uqm/ships/androsyn/androsyn.c-					|| (lpEvalDesc->ObjectPtr->crew_level > (BLAZER_DAMAGE * 3)
--
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-		ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:		if (StarShipPtr->special_counter == 0)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/androsyn/androsyn.c-			// JMS_GFX
src/uqm/ships/androsyn/androsyn.c-			if ((ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr
src/uqm/ships/androsyn/androsyn.c-					&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn <= 4)
src/uqm/ships/androsyn/androsyn.c-					|| (lpEvalDesc->ObjectPtr
src/uqm/ships/androsyn/androsyn.c:					&& StarShipPtr->RaceDescPtr->ship_info.energy_level >= MAX_ENERGY / 3
src/uqm/ships/androsyn/androsyn.c-					&& (WEAPON_RANGE (&pEnemyStarShip->RaceDescPtr->cyborg_control) >=
src/uqm/ships/androsyn/androsyn.c:					WEAPON_RANGE (&StarShipPtr->RaceDescPtr->cyborg_control) << 1
src/uqm/ships/androsyn/androsyn.c-					|| (lpEvalDesc->which_turn < 16
src/uqm/ships/androsyn/androsyn.c-					&& (WEAPON_RANGE (&pEnemyStarShip->RaceDescPtr->cyborg_control) > (CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR)
src/uqm/ships/androsyn/androsyn.c-					|| lpEvalDesc->ObjectPtr->crew_level <= BLAZER_DAMAGE)
src/uqm/ships/androsyn/androsyn.c-					&& (lpEvalDesc->ObjectPtr->crew_level <= (BLAZER_DAMAGE * 3)
src/uqm/ships/androsyn/androsyn.c-					|| MANEUVERABILITY (&pEnemyStarShip->RaceDescPtr->cyborg_control) <=
src/uqm/ships/androsyn/androsyn.c-					RESOLUTION_COMPENSATED(SLOW_SHIP))))))
src/uqm/ships/androsyn/androsyn.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:		if (!(StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/androsyn/androsyn.c:				&& StarShipPtr->weapon_counter == 0
src/uqm/ships/androsyn/androsyn.c-				&& lpEvalDesc->ObjectPtr)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c-			if (lpEvalDesc->which_turn <= 4)
src/uqm/ships/androsyn/androsyn.c:				StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/androsyn/androsyn.c-			else if (lpEvalDesc->MoveState != PURSUE
src/uqm/ships/androsyn/androsyn.c-					&& lpEvalDesc->which_turn <= 12)
src/uqm/ships/androsyn/androsyn.c-			{
--
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-				if (NORMALIZE_ANGLE (travel_facing
src/uqm/ships/androsyn/androsyn.c-						- direction_facing + OCTANT) <= QUADRANT)
src/uqm/ships/androsyn/androsyn.c:					StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/androsyn/androsyn.c-			}
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-	}
--
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/androsyn/androsyn.c-			/* take care of blazer effect */
src/uqm/ships/androsyn/androsyn.c:	if (ElementPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.special)
src/uqm/ships/androsyn/androsyn.c-	{
src/uqm/ships/androsyn/androsyn.c-#define BLAZER_DEGENERATION (-1)
src/uqm/ships/androsyn/androsyn.c:		if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/androsyn/androsyn.c:				|| StarShipPtr->RaceDescPtr->ship_info.energy_level == 0)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->RaceDescPtr->characteristics.energy_regeneration =
src/uqm/ships/androsyn/androsyn.c-					(BYTE)BLAZER_DEGENERATION;
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->energy_counter = ENERGY_WAIT;
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:			if (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/androsyn/androsyn.c-			{
src/uqm/ships/androsyn/androsyn.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/androsyn/androsyn.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1),
src/uqm/ships/androsyn/androsyn.c-						ElementPtr);  /* COMET_ON */
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->turn_wait = 0;
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->thrust_wait = 0;
src/uqm/ships/androsyn/androsyn.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait =
src/uqm/ships/androsyn/androsyn.c:						StarShipPtr->RaceDescPtr->characteristics.turn_wait;
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->mass_points = BLAZER_MASS;
src/uqm/ships/androsyn/androsyn.c:				StarShipPtr->RaceDescPtr->characteristics.turn_wait
src/uqm/ships/androsyn/androsyn.c-						= BLAZER_TURN_WAIT;
src/uqm/ships/androsyn/androsyn.c-				/* Save the current collision func because we were not the
src/uqm/ships/androsyn/androsyn.c-				 * ones who set it */
src/uqm/ships/androsyn/androsyn.c:				StarShipPtr->RaceDescPtr->data = (intptr_t)
src/uqm/ships/androsyn/androsyn.c-						ElementPtr->collision_func;
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->collision_func = blazer_collision;
src/uqm/ships/androsyn/androsyn.c-			}
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:		if (StarShipPtr->RaceDescPtr->ship_info.energy_level == 0)
src/uqm/ships/androsyn/androsyn.c-				/* if blazer wasn't able to change back into ship
src/uqm/ships/androsyn/androsyn.c-				 * give it a little more juice to try to get out
src/uqm/ships/androsyn/androsyn.c-				 * of its predicament.
src/uqm/ships/androsyn/androsyn.c-				 */
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c-			DeltaEnergy (ElementPtr, -BLAZER_DEGENERATION);
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->energy_counter = 1;
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-	}
src/uqm/ships/androsyn/androsyn.c-}
--
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:	cur_status_flags = StarShipPtr->cur_status_flags;
src/uqm/ships/androsyn/androsyn.c:	if (ElementPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.ship)
src/uqm/ships/androsyn/androsyn.c-	{
src/uqm/ships/androsyn/androsyn.c-		if (cur_status_flags & SPECIAL)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c:			if (StarShipPtr->RaceDescPtr->ship_info.energy_level < SPECIAL_ENERGY_COST)
src/uqm/ships/androsyn/androsyn.c-				DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST); /* so text will flash */
src/uqm/ships/androsyn/androsyn.c-			else
src/uqm/ships/androsyn/androsyn.c-			{
src/uqm/ships/androsyn/androsyn.c-				cur_status_flags &= ~WEAPON;
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->next.image.farray =
src/uqm/ships/androsyn/androsyn.c:						StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->next.image.frame =
src/uqm/ships/androsyn/androsyn.c:						SetEquFrameIndex (StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/androsyn/androsyn.c-						ElementPtr->next.image.frame);
src/uqm/ships/androsyn/androsyn.c-				ElementPtr->state_flags |= CHANGING;
src/uqm/ships/androsyn/androsyn.c-			}
--
src/uqm/ships/androsyn/androsyn.c-		cur_status_flags &= ~(THRUST | WEAPON | SPECIAL);
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-					/* protection against vux */
src/uqm/ships/androsyn/androsyn.c:		if (StarShipPtr->RaceDescPtr->characteristics.turn_wait > BLAZER_TURN_WAIT)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->RaceDescPtr->characteristics.special_wait +=
src/uqm/ships/androsyn/androsyn.c:					StarShipPtr->RaceDescPtr->characteristics.turn_wait
src/uqm/ships/androsyn/androsyn.c-					- BLAZER_TURN_WAIT;
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->RaceDescPtr->characteristics.turn_wait = BLAZER_TURN_WAIT;
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:		if (StarShipPtr->RaceDescPtr->ship_info.energy_level == 0)
src/uqm/ships/androsyn/androsyn.c-		{
src/uqm/ships/androsyn/androsyn.c-			ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/ships/androsyn/androsyn.c-			cur_status_flags &= ~(LEFT | RIGHT
src/uqm/ships/androsyn/androsyn.c-					| SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->RaceDescPtr->characteristics.turn_wait =
src/uqm/ships/androsyn/androsyn.c:					StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/androsyn/androsyn.c:			StarShipPtr->RaceDescPtr->characteristics.energy_regeneration = ENERGY_REGENERATION;
src/uqm/ships/androsyn/androsyn.c-			ElementPtr->mass_points = SHIP_MASS;
src/uqm/ships/androsyn/androsyn.c-			ElementPtr->collision_func = (CollisionFunc *)
src/uqm/ships/androsyn/androsyn.c:					StarShipPtr->RaceDescPtr->data;
src/uqm/ships/androsyn/androsyn.c-			ElementPtr->next.image.farray =
src/uqm/ships/androsyn/androsyn.c:					StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/androsyn/androsyn.c-			ElementPtr->next.image.frame =
src/uqm/ships/androsyn/androsyn.c:					SetEquFrameIndex (StarShipPtr->RaceDescPtr->ship_data.ship[0],
src/uqm/ships/androsyn/androsyn.c-					ElementPtr->next.image.frame);
src/uqm/ships/androsyn/androsyn.c-			ElementPtr->state_flags |= CHANGING;
src/uqm/ships/androsyn/androsyn.c-		}
--
src/uqm/ships/androsyn/androsyn.c-#define BLAZER_THRUST (60 << RESOLUTION_FACTOR) // JMS_GFX
src/uqm/ships/androsyn/androsyn.c-				COUNT facing;
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c:				facing = StarShipPtr->ShipFacing;
src/uqm/ships/androsyn/androsyn.c-				if (ElementPtr->turn_wait == 0
src/uqm/ships/androsyn/androsyn.c-						&& (cur_status_flags & (LEFT | RIGHT)))
src/uqm/ships/androsyn/androsyn.c-				{
--
src/uqm/ships/androsyn/androsyn.c-			}
src/uqm/ships/androsyn/androsyn.c-		}
src/uqm/ships/androsyn/androsyn.c-	}
src/uqm/ships/androsyn/androsyn.c:	StarShipPtr->cur_status_flags = cur_status_flags;
src/uqm/ships/androsyn/androsyn.c-}
src/uqm/ships/androsyn/androsyn.c-
src/uqm/ships/androsyn/androsyn.c-RACE_DESC*
--
src/uqm/ships/lastbat/lastbat.c-			STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:			++StarShipPtr->RaceDescPtr->characteristics.weapon_wait;
src/uqm/ships/lastbat/lastbat.c-			spawn_comet (ElementPtr);
src/uqm/ships/lastbat/lastbat.c-			ElementPtr->state_flags |= NONSOLID;
src/uqm/ships/lastbat/lastbat.c-
--
src/uqm/ships/lastbat/lastbat.c-			STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:			--StarShipPtr->RaceDescPtr->characteristics.weapon_wait;
src/uqm/ships/lastbat/lastbat.c-		}
src/uqm/ships/lastbat/lastbat.c-	}
src/uqm/ships/lastbat/lastbat.c-}
--
src/uqm/ships/lastbat/lastbat.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c-	MissileBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/lastbat/lastbat.c-	MissileBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/lastbat/lastbat.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/lastbat/lastbat.c-	MissileBlock.face = 0;
src/uqm/ships/lastbat/lastbat.c-	MissileBlock.index = 24;
src/uqm/ships/lastbat/lastbat.c-	MissileBlock.sender = ElementPtr->playerNr;
--
src/uqm/ships/lastbat/lastbat.c-		STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-		GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:		if (StarShipPtr->RaceDescPtr->num_generators == 0)
src/uqm/ships/lastbat/lastbat.c-		{
src/uqm/ships/lastbat/lastbat.c-			if (!(ElementPtr1->state_flags & FINITE_LIFE))
src/uqm/ships/lastbat/lastbat.c-				ElementPtr0->state_flags |= COLLISION;
--
src/uqm/ships/lastbat/lastbat.c-	STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:	if (StarShipPtr->RaceDescPtr->num_generators == 0)
src/uqm/ships/lastbat/lastbat.c-	{
src/uqm/ships/lastbat/lastbat.c-		ElementPtr->mass_points = SHIP_MASS;
src/uqm/ships/lastbat/lastbat.c-		ElementPtr->state_flags &= ~FINITE_LIFE;
--
src/uqm/ships/lastbat/lastbat.c-		STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:		--StarShipPtr->RaceDescPtr->num_generators;
src/uqm/ships/lastbat/lastbat.c-		ElementPtr->state_flags |= FINITE_LIFE | NONSOLID;
src/uqm/ships/lastbat/lastbat.c-		ElementPtr->preprocess_func = 0;
src/uqm/ships/lastbat/lastbat.c-		ElementPtr->turn_wait = 12;
--
src/uqm/ships/lastbat/lastbat.c-	STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:	++StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/lastbat/lastbat.c-	++ElementPtr->life_span;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-	if (ElementPtr->thrust_wait)
--
src/uqm/ships/lastbat/lastbat.c-		}
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-		if (ElementPtr->hTarget == 0)
src/uqm/ships/lastbat/lastbat.c:			hTarget = StarShipPtr->hShip;
src/uqm/ships/lastbat/lastbat.c:		else if (StarShipPtr->hShip == 0)
src/uqm/ships/lastbat/lastbat.c-			hTarget = ElementPtr->hTarget;
src/uqm/ships/lastbat/lastbat.c-		else
src/uqm/ships/lastbat/lastbat.c-		{
--
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			LockElement (ElementPtr->hTarget, &EnemyShipPtr);
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c:			LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/lastbat/lastbat.c-			delta_x0 = ShipPtr->current.location.x
src/uqm/ships/lastbat/lastbat.c-					- ElementPtr->current.location.x;
src/uqm/ships/lastbat/lastbat.c-			delta_y0 = ShipPtr->current.location.y
--
src/uqm/ships/lastbat/lastbat.c-					- EnemyShipPtr->current.location.x;
src/uqm/ships/lastbat/lastbat.c-			delta_y1 = ShipPtr->current.location.y
src/uqm/ships/lastbat/lastbat.c-					- EnemyShipPtr->current.location.y;
src/uqm/ships/lastbat/lastbat.c:			UnlockElement (StarShipPtr->hShip);
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			if ((long)delta_x0 * delta_x0
src/uqm/ships/lastbat/lastbat.c-					+ (long)delta_y0 * delta_y0 >
src/uqm/ships/lastbat/lastbat.c-					(long)delta_x1 * delta_x1
src/uqm/ships/lastbat/lastbat.c-					+ (long)delta_y1 * delta_y1)
src/uqm/ships/lastbat/lastbat.c:				hTarget = StarShipPtr->hShip;
src/uqm/ships/lastbat/lastbat.c-			else
src/uqm/ships/lastbat/lastbat.c-				hTarget = ElementPtr->hTarget;
src/uqm/ships/lastbat/lastbat.c-
--
src/uqm/ships/lastbat/lastbat.c-			ElementPtr0->turn_wait = (ONE_SECOND / BATTLE_FRAME_RATE) >> 1;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/lastbat/lastbat.c-					~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/lastbat/lastbat.c-			if (ElementPtr1->turn_wait < COLLISION_TURN_WAIT)
src/uqm/ships/lastbat/lastbat.c-				ElementPtr1->turn_wait += COLLISION_TURN_WAIT;
--
src/uqm/ships/lastbat/lastbat.c-		if (ElementPtr0->state_flags & DISAPPEARING)
src/uqm/ships/lastbat/lastbat.c-		{
src/uqm/ships/lastbat/lastbat.c-			GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:			--StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/lastbat/lastbat.c-			if (hBlastElement)
src/uqm/ships/lastbat/lastbat.c-			{
src/uqm/ships/lastbat/lastbat.c-				ELEMENT *BlastElementPtr;
--
src/uqm/ships/lastbat/lastbat.c-	STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:	if (StarShipPtr->RaceDescPtr->num_generators)
src/uqm/ships/lastbat/lastbat.c-	{
src/uqm/ships/lastbat/lastbat.c:		if (StarShipPtr->weapon_counter == 0
src/uqm/ships/lastbat/lastbat.c:				&& StarShipPtr->RaceDescPtr->characteristics.weapon_wait < MAX_COMETS
src/uqm/ships/lastbat/lastbat.c-				&& spawn_comet (ElementPtr))
src/uqm/ships/lastbat/lastbat.c-		{
src/uqm/ships/lastbat/lastbat.c:			StarShipPtr->weapon_counter = WEAPON_WAIT;
src/uqm/ships/lastbat/lastbat.c-		}
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c:		if (StarShipPtr->special_counter == 0
src/uqm/ships/lastbat/lastbat.c:				&& StarShipPtr->RaceDescPtr->characteristics.special_wait < MAX_SENTINELS)
src/uqm/ships/lastbat/lastbat.c-		{
src/uqm/ships/lastbat/lastbat.c-#define MISSILE_LIFE 2
src/uqm/ships/lastbat/lastbat.c-#define MISSILE_OFFSET 0
--
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-			MissileBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/lastbat/lastbat.c-			MissileBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/lastbat/lastbat.c:			MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/lastbat/lastbat.c-			MissileBlock.face = 0;
src/uqm/ships/lastbat/lastbat.c-			MissileBlock.index = 0;
src/uqm/ships/lastbat/lastbat.c-			MissileBlock.sender = ElementPtr->playerNr;
--
src/uqm/ships/lastbat/lastbat.c-				SetElementStarShip (SentinelPtr, StarShipPtr);
src/uqm/ships/lastbat/lastbat.c-				UnlockElement (hSentinel);
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c:				StarShipPtr->special_counter = SPECIAL_WAIT;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-				PutElement (hSentinel);
src/uqm/ships/lastbat/lastbat.c-			}
--
src/uqm/ships/lastbat/lastbat.c-	STARSHIP *StarShipPtr;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/lastbat/lastbat.c:	StarShipPtr->RaceDescPtr->characteristics.weapon_wait = 0;
src/uqm/ships/lastbat/lastbat.c:	StarShipPtr->RaceDescPtr->characteristics.special_wait = 0;
src/uqm/ships/lastbat/lastbat.c-	if (!(ElementPtr->state_flags & APPEARING))
src/uqm/ships/lastbat/lastbat.c-	{
src/uqm/ships/lastbat/lastbat.c-		++ElementPtr->turn_wait;
--
src/uqm/ships/lastbat/lastbat.c-		else
src/uqm/ships/lastbat/lastbat.c-			offs = offs_1x;
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c:		for (StarShipPtr->RaceDescPtr->num_generators = 0;
src/uqm/ships/lastbat/lastbat.c:				StarShipPtr->RaceDescPtr->num_generators < MAX_GENERATORS;
src/uqm/ships/lastbat/lastbat.c:				++StarShipPtr->RaceDescPtr->num_generators)
src/uqm/ships/lastbat/lastbat.c-		{
src/uqm/ships/lastbat/lastbat.c-			HELEMENT hGenerator;
src/uqm/ships/lastbat/lastbat.c-
--
src/uqm/ships/lastbat/lastbat.c-						);
src/uqm/ships/lastbat/lastbat.c-				GeneratorPtr->current.location.x =
src/uqm/ships/lastbat/lastbat.c-						((LOG_SPACE_WIDTH >> 1)
src/uqm/ships/lastbat/lastbat.c:						+ DISPLAY_TO_WORLD ((offs[StarShipPtr->RaceDescPtr->num_generators].x)))
src/uqm/ships/lastbat/lastbat.c-						& ~((SCALED_ONE << MAX_VIS_REDUCTION) - 1); // JMS_GFX
src/uqm/ships/lastbat/lastbat.c-				GeneratorPtr->current.location.y =
src/uqm/ships/lastbat/lastbat.c-						((LOG_SPACE_HEIGHT >> 1)
src/uqm/ships/lastbat/lastbat.c:						+ DISPLAY_TO_WORLD ((offs[StarShipPtr->RaceDescPtr->num_generators].y)))
src/uqm/ships/lastbat/lastbat.c-						& ~((SCALED_ONE << MAX_VIS_REDUCTION) - 1); // JMS_GFX
src/uqm/ships/lastbat/lastbat.c-				GeneratorPtr->current.image.farray =
src/uqm/ships/lastbat/lastbat.c:						StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/lastbat/lastbat.c-				GeneratorPtr->current.image.frame =
src/uqm/ships/lastbat/lastbat.c-						SetAbsFrameIndex (
src/uqm/ships/lastbat/lastbat.c:								StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/lastbat/lastbat.c-								(BYTE)TFB_Random () % 10
src/uqm/ships/lastbat/lastbat.c-								);
src/uqm/ships/lastbat/lastbat.c-
--
src/uqm/ships/lastbat/lastbat.c-				TurretPtr->current.location.x = LOG_SPACE_WIDTH >> 1;
src/uqm/ships/lastbat/lastbat.c-				TurretPtr->current.location.y = LOG_SPACE_HEIGHT >> 1;
src/uqm/ships/lastbat/lastbat.c-				TurretPtr->current.image.farray =
src/uqm/ships/lastbat/lastbat.c:						StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/lastbat/lastbat.c-				TurretPtr->current.image.frame =
src/uqm/ships/lastbat/lastbat.c-						SetAbsFrameIndex (
src/uqm/ships/lastbat/lastbat.c:						StarShipPtr->RaceDescPtr->ship_data.ship[0], 1
src/uqm/ships/lastbat/lastbat.c-						);
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-				TurretPtr->preprocess_func = turret_preprocess;
--
src/uqm/ships/lastbat/lastbat.c-				GatePtr->current.location.x = LOG_SPACE_WIDTH >> 1;
src/uqm/ships/lastbat/lastbat.c-				GatePtr->current.location.y = LOG_SPACE_HEIGHT >> 1;
src/uqm/ships/lastbat/lastbat.c-				GatePtr->current.image.farray =
src/uqm/ships/lastbat/lastbat.c:						StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/lastbat/lastbat.c-				GatePtr->current.image.frame =
src/uqm/ships/lastbat/lastbat.c-						SetAbsFrameIndex (
src/uqm/ships/lastbat/lastbat.c:						StarShipPtr->RaceDescPtr->ship_data.ship[0], 11
src/uqm/ships/lastbat/lastbat.c-						);
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c-				GatePtr->preprocess_func = gate_preprocess;
--
src/uqm/ships/lastbat/lastbat.c-			}
src/uqm/ships/lastbat/lastbat.c-		}
src/uqm/ships/lastbat/lastbat.c-
src/uqm/ships/lastbat/lastbat.c:		StarShipPtr->weapon_counter = WEAPON_WAIT >> 1;
src/uqm/ships/lastbat/lastbat.c:		StarShipPtr->special_counter = SPECIAL_WAIT >> 1;
src/uqm/ships/lastbat/lastbat.c-	}
src/uqm/ships/lastbat/lastbat.c-}
src/uqm/ships/lastbat/lastbat.c-
--
src/uqm/ships/pkunk/pkunk.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/pkunk/pkunk.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/pkunk/pkunk.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/pkunk/pkunk.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/pkunk/pkunk.c-	MissileBlock.index = 0;
src/uqm/ships/pkunk/pkunk.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/pkunk/pkunk.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-	for (i = 0; i < 3; ++i)
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c:		MissileBlock.face = StarShipPtr->ShipFacing + (ANGLE_TO_FACING (QUADRANT) * i);
src/uqm/ships/pkunk/pkunk.c-		
src/uqm/ships/pkunk/pkunk.c-		if (i == 2)
src/uqm/ships/pkunk/pkunk.c-			MissileBlock.face += ANGLE_TO_FACING (QUADRANT);
--
src/uqm/ships/pkunk/pkunk.c-	HELEMENT hPhoenix;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/pkunk/pkunk.c:	hPhoenix = (HELEMENT) StarShipPtr->RaceDescPtr->data;
src/uqm/ships/pkunk/pkunk.c:	if (hPhoenix && (StarShipPtr->control & STANDARD_RATING))
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c-		RemoveElement (hPhoenix);
src/uqm/ships/pkunk/pkunk.c-		FreeElement (hPhoenix);
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->data = 0;
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level <
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->ship_info.max_energy
src/uqm/ships/pkunk/pkunk.c:			&& (StarShipPtr->special_counter == 0
src/uqm/ships/pkunk/pkunk.c-			|| (BYTE)TFB_Random () < 20))
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/pkunk/pkunk.c-	else
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/pkunk/pkunk.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/pkunk/pkunk.c-}
src/uqm/ships/pkunk/pkunk.c-
--
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c-		ELEMENT *ShipPtr;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/pkunk/pkunk.c-		ShipPtr->death_func = new_pkunk;
src/uqm/ships/pkunk/pkunk.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-	else
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->state_flags = APPEARING | PLAYER_SHIP | IGNORE_SIMILAR;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->mass_points = SHIP_MASS;
src/uqm/ships/pkunk/pkunk.c:		ElementPtr->preprocess_func = StarShipPtr->RaceDescPtr->preprocess_func;
src/uqm/ships/pkunk/pkunk.c:		ElementPtr->postprocess_func = StarShipPtr->RaceDescPtr->postprocess_func;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->death_func =
src/uqm/ships/pkunk/pkunk.c-				(void (*) (ELEMENT *ElementPtr))
src/uqm/ships/pkunk/pkunk.c:						StarShipPtr->RaceDescPtr->init_weapon_func;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->preprocess_func = pkunk_preprocess;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->postprocess_func = pkunk_postprocess;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->init_weapon_func = initialize_bug_missile;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->ship_info.crew_level = MAX_CREW;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->ship_info.energy_level = MAX_ENERGY;
src/uqm/ships/pkunk/pkunk.c-					/* fix vux impairment */
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.max_thrust = MAX_THRUST << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.thrust_increment = THRUST_INCREMENT << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.turn_wait = TURN_WAIT;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.thrust_wait = THRUST_WAIT;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.special_wait = 0;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->ship_input_state = 0;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->cur_status_flags = 0;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->old_status_flags = 0;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->energy_counter = 0;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->weapon_counter = 0;
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->special_counter = 0;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->crew_level = 0;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->turn_wait = 0;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->thrust_wait = 0;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->life_span = NORMAL_LIFE;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->ShipFacing = NORMALIZE_FACING (TFB_Random ());
src/uqm/ships/pkunk/pkunk.c:		ElementPtr->current.image.farray = StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/pkunk/pkunk.c-		ElementPtr->current.image.frame =
src/uqm/ships/pkunk/pkunk.c:				SetAbsFrameIndex (StarShipPtr->RaceDescPtr->ship_data.ship[0],
src/uqm/ships/pkunk/pkunk.c:				StarShipPtr->ShipFacing);
src/uqm/ships/pkunk/pkunk.c-		SetPrimType (&(GLOBAL (DisplayArray))[ElementPtr->PrimIndex], STAMP_PRIM);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-		do
--
src/uqm/ships/pkunk/pkunk.c-		} while (CalculateGravity (ElementPtr)
src/uqm/ships/pkunk/pkunk.c-				|| TimeSpaceMatterConflict (ElementPtr));
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		ElementPtr->hTarget = StarShipPtr->hShip;
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-}
src/uqm/ships/pkunk/pkunk.c-
--
src/uqm/ships/pkunk/pkunk.c-	ElementPtr->life_span = 1;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/pkunk/pkunk.c:	if (StarShipPtr->RaceDescPtr->ship_info.crew_level == 0)
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c-		ELEMENT *ShipPtr;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/pkunk/pkunk.c-		if (GRAVITY_MASS (ShipPtr->mass_points + 1))
src/uqm/ships/pkunk/pkunk.c-		{
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->state_flags |= DISAPPEARING;
--
src/uqm/ships/pkunk/pkunk.c-		else
src/uqm/ships/pkunk/pkunk.c-		{
src/uqm/ships/pkunk/pkunk.c-			ShipPtr->mass_points = MAX_SHIP_MASS + 1;
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->preprocess_func = ShipPtr->preprocess_func;
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->postprocess_func = ShipPtr->postprocess_func;
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->init_weapon_func =
src/uqm/ships/pkunk/pkunk.c-					(COUNT (*) (ELEMENT *ElementPtr, HELEMENT Weapon[]))
src/uqm/ships/pkunk/pkunk.c-							ShipPtr->death_func;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->death_func = new_pkunk;
src/uqm/ships/pkunk/pkunk.c-		}
src/uqm/ships/pkunk/pkunk.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-}
src/uqm/ships/pkunk/pkunk.c-
--
src/uqm/ships/pkunk/pkunk.c-	STARSHIP *StarShipPtr;
src/uqm/ships/pkunk/pkunk.c-	
src/uqm/ships/pkunk/pkunk.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/pkunk/pkunk.c:	LockElement (StarShipPtr->hShip, &ShipImagePtr);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-	if (!(ShipImagePtr->state_flags & NONSOLID))
src/uqm/ships/pkunk/pkunk.c-	{
--
src/uqm/ships/pkunk/pkunk.c-		}
src/uqm/ships/pkunk/pkunk.c-		else
src/uqm/ships/pkunk/pkunk.c-		{
src/uqm/ships/pkunk/pkunk.c:			angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-			ShipImagePtr->current.location.x -=
src/uqm/ships/pkunk/pkunk.c-					COSINE (angle, TRANSITION_SPEED)
--
src/uqm/ships/pkunk/pkunk.c-		UnlockElement (hShipImage);
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/ships/pkunk/pkunk.c-}
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-static void
--
src/uqm/ships/pkunk/pkunk.c-			UnlockElement (hPhoenix);
src/uqm/ships/pkunk/pkunk.c-			InsertElement (hPhoenix, GetHeadElement ());
src/uqm/ships/pkunk/pkunk.c-		}
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->data = (intptr_t) hPhoenix;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-		if (ElementPtr->hTarget == 0)
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->preprocess_func = 0;
src/uqm/ships/pkunk/pkunk.c-		else
src/uqm/ships/pkunk/pkunk.c-		{
src/uqm/ships/pkunk/pkunk.c-			COUNT angle, facing;
--
src/uqm/ships/pkunk/pkunk.c-			StopMusic ();
src/uqm/ships/pkunk/pkunk.c-			
src/uqm/ships/pkunk/pkunk.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/pkunk/pkunk.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1
src/uqm/ships/pkunk/pkunk.c-					), ElementPtr);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->life_span = PHOENIX_LIFE;
--
src/uqm/ships/pkunk/pkunk.c-					NO_PRIM);
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->state_flags |= NONSOLID | FINITE_LIFE | CHANGING;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:			facing = StarShipPtr->ShipFacing;
src/uqm/ships/pkunk/pkunk.c-			for (angle = OCTANT; angle < FULL_CIRCLE; angle += QUADRANT)
src/uqm/ships/pkunk/pkunk.c-			{
src/uqm/ships/pkunk/pkunk.c:				StarShipPtr->ShipFacing = NORMALIZE_FACING (
src/uqm/ships/pkunk/pkunk.c-						facing + ANGLE_TO_FACING (angle)
src/uqm/ships/pkunk/pkunk.c-						);
src/uqm/ships/pkunk/pkunk.c-				phoenix_transition (ElementPtr);
src/uqm/ships/pkunk/pkunk.c-			}
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->ShipFacing = facing;
src/uqm/ships/pkunk/pkunk.c-		}
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:	if (StarShipPtr->RaceDescPtr->preprocess_func)
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->cur_status_flags &=
src/uqm/ships/pkunk/pkunk.c-				~(LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-		if (ElementPtr->life_span == NORMAL_LIFE)
--
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->state_flags &= ~(NONSOLID | FINITE_LIFE);
src/uqm/ships/pkunk/pkunk.c-			ElementPtr->state_flags |= CHANGING;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->preprocess_func = 0;
src/uqm/ships/pkunk/pkunk.c-		}
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-}
--
src/uqm/ships/pkunk/pkunk.c-	STARSHIP *StarShipPtr;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/pkunk/pkunk.c:	if (StarShipPtr->RaceDescPtr->characteristics.special_wait)
src/uqm/ships/pkunk/pkunk.c:		--StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/pkunk/pkunk.c:	else if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/pkunk/pkunk.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level <
src/uqm/ships/pkunk/pkunk.c:			StarShipPtr->RaceDescPtr->ship_info.max_energy)
src/uqm/ships/pkunk/pkunk.c-	{
src/uqm/ships/pkunk/pkunk.c-		COUNT CurSound;
src/uqm/ships/pkunk/pkunk.c-
--
src/uqm/ships/pkunk/pkunk.c-		{
src/uqm/ships/pkunk/pkunk.c-			CurSound =
src/uqm/ships/pkunk/pkunk.c-					2 + ((COUNT)TFB_Random ()
src/uqm/ships/pkunk/pkunk.c:					% (GetSoundCount (StarShipPtr->RaceDescPtr->ship_data.ship_sounds) - 2));
src/uqm/ships/pkunk/pkunk.c-		} while (CurSound == LastSound);
src/uqm/ships/pkunk/pkunk.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/pkunk/pkunk.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, CurSound
src/uqm/ships/pkunk/pkunk.c-				), ElementPtr);
src/uqm/ships/pkunk/pkunk.c-		LastSound = CurSound;
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c-		DeltaEnergy (ElementPtr, SPECIAL_ENERGY_COST);
src/uqm/ships/pkunk/pkunk.c-
src/uqm/ships/pkunk/pkunk.c:		StarShipPtr->RaceDescPtr->characteristics.special_wait = SPECIAL_WAIT;
src/uqm/ships/pkunk/pkunk.c-	}
src/uqm/ships/pkunk/pkunk.c-}
src/uqm/ships/pkunk/pkunk.c-
--
src/uqm/ships/blackurq/blackurq.c-	STARSHIP *StarShipPtr;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c:	LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/blackurq/blackurq.c-	if (ShipPtr->crew_level
src/uqm/ships/blackurq/blackurq.c:			&& ++StarShipPtr->RaceDescPtr->characteristics.special_wait > MAX_SAWS)
src/uqm/ships/blackurq/blackurq.c-	{
src/uqm/ships/blackurq/blackurq.c-		ElementPtr->life_span = 1;
src/uqm/ships/blackurq/blackurq.c-		ElementPtr->state_flags |= DISAPPEARING;
--
src/uqm/ships/blackurq/blackurq.c-			ElementPtr->turn_wait = SAW_RATE;
src/uqm/ships/blackurq/blackurq.c-		}
src/uqm/ships/blackurq/blackurq.c-	}
src/uqm/ships/blackurq/blackurq.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/ships/blackurq/blackurq.c-}
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-#define TRACK_WAIT 4
--
src/uqm/ships/blackurq/blackurq.c-	STARSHIP *StarShipPtr;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c:	if (!(StarShipPtr->cur_status_flags & WEAPON))
src/uqm/ships/blackurq/blackurq.c-	{
src/uqm/ships/blackurq/blackurq.c-		ElementPtr->life_span >>= 1;
src/uqm/ships/blackurq/blackurq.c-		ElementPtr->preprocess_func = decelerate_preprocess;
--
src/uqm/ships/blackurq/blackurq.c-		UnlockElement (hElement);
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c:		LockElement (StarShipPtr->hShip, &ListElementPtr);
src/uqm/ships/blackurq/blackurq.c-		InsertElement (hElement, GetSuccElement (ListElementPtr));
src/uqm/ships/blackurq/blackurq.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-		ElementPtr->life_span = 0;
src/uqm/ships/blackurq/blackurq.c-	}
--
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/blackurq/blackurq.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/blackurq/blackurq.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.index = 0;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/blackurq/blackurq.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/blackurq/blackurq.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level >= SPECIAL_ENERGY_COST
src/uqm/ships/blackurq/blackurq.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/blackurq/blackurq.c-			&& lpEvalDesc->which_turn <= 8)
src/uqm/ships/blackurq/blackurq.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/blackurq/blackurq.c-	if (lpEvalDesc->ObjectPtr)
--
src/uqm/ships/blackurq/blackurq.c-		HELEMENT h, hNext;
src/uqm/ships/blackurq/blackurq.c-		ELEMENT *BuzzSawPtr;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c:		h = (StarShipPtr->old_status_flags & WEAPON) ?
src/uqm/ships/blackurq/blackurq.c-				GetSuccElement (ShipPtr) : (HELEMENT)0;
src/uqm/ships/blackurq/blackurq.c-		for (; h; h = hNext)
src/uqm/ships/blackurq/blackurq.c-		{
src/uqm/ships/blackurq/blackurq.c-			LockElement (h, &BuzzSawPtr);
src/uqm/ships/blackurq/blackurq.c-			hNext = GetSuccElement (BuzzSawPtr);
src/uqm/ships/blackurq/blackurq.c-			if (!(BuzzSawPtr->state_flags & NONSOLID)
src/uqm/ships/blackurq/blackurq.c:					&& BuzzSawPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.weapon
src/uqm/ships/blackurq/blackurq.c-					&& BuzzSawPtr->life_span > MISSILE_LIFE * 3 / 4
src/uqm/ships/blackurq/blackurq.c-					&& elementsOfSamePlayer (BuzzSawPtr, ShipPtr))
src/uqm/ships/blackurq/blackurq.c-			{
--
src/uqm/ships/blackurq/blackurq.c-					if (!PlotIntercept (BuzzSawPtr,
src/uqm/ships/blackurq/blackurq.c-							lpEvalDesc->ObjectPtr, BuzzSawPtr->life_span,
src/uqm/ships/blackurq/blackurq.c-							FRAGMENT_RANGE / 2))
src/uqm/ships/blackurq/blackurq.c:						StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/blackurq/blackurq.c:					else if (StarShipPtr->weapon_counter == 0)
src/uqm/ships/blackurq/blackurq.c:						StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-					UnlockElement (h);
src/uqm/ships/blackurq/blackurq.c-					break;
--
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-		if (h == 0)
src/uqm/ships/blackurq/blackurq.c-		{
src/uqm/ships/blackurq/blackurq.c:			if (StarShipPtr->old_status_flags & WEAPON)
src/uqm/ships/blackurq/blackurq.c:				StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/blackurq/blackurq.c:			else if (StarShipPtr->weapon_counter == 0
src/uqm/ships/blackurq/blackurq.c-					&& ship_weapons (ShipPtr, lpEvalDesc->ObjectPtr, FRAGMENT_RANGE / 2))
src/uqm/ships/blackurq/blackurq.c:				StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c:			if (StarShipPtr->special_counter == 0
src/uqm/ships/blackurq/blackurq.c:					&& !(StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/blackurq/blackurq.c-					&& lpEvalDesc->which_turn <= 8
src/uqm/ships/blackurq/blackurq.c:					&& (StarShipPtr->ship_input_state & (LEFT | RIGHT))
src/uqm/ships/blackurq/blackurq.c:					&& StarShipPtr->RaceDescPtr->ship_info.energy_level >=
src/uqm/ships/blackurq/blackurq.c-					SPECIAL_ENERGY_COST)
src/uqm/ships/blackurq/blackurq.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/blackurq/blackurq.c-		}
src/uqm/ships/blackurq/blackurq.c-	}
src/uqm/ships/blackurq/blackurq.c-}
--
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/blackurq/blackurq.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.index = 0;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.sender = ElementPtr->playerNr;
src/uqm/ships/blackurq/blackurq.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/blackurq/blackurq.c-    COUNT special_energy_cost;
src/uqm/ships/blackurq/blackurq.c-    special_energy_cost=SPECIAL_ENERGY_COST-(badguysImprove%4);
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/blackurq/blackurq.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/blackurq/blackurq.c-			&& DeltaEnergy (ElementPtr, -special_energy_cost))
src/uqm/ships/blackurq/blackurq.c-	{
src/uqm/ships/blackurq/blackurq.c-		spawn_gas_cloud (ElementPtr);
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/blackurq/blackurq.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c:		StarShipPtr->special_counter = SPECIAL_WAIT;
src/uqm/ships/blackurq/blackurq.c-	}
src/uqm/ships/blackurq/blackurq.c-}
src/uqm/ships/blackurq/blackurq.c-
--
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/blackurq/blackurq.c-			/* no spinning disks */
src/uqm/ships/blackurq/blackurq.c:	StarShipPtr->RaceDescPtr->characteristics.special_wait = 0;
src/uqm/ships/blackurq/blackurq.c:	if (StarShipPtr->weapon_counter == 0
src/uqm/ships/blackurq/blackurq.c:			&& (StarShipPtr->cur_status_flags
src/uqm/ships/blackurq/blackurq.c:			& StarShipPtr->old_status_flags & WEAPON))
src/uqm/ships/blackurq/blackurq.c:		++StarShipPtr->weapon_counter;
src/uqm/ships/blackurq/blackurq.c-}
src/uqm/ships/blackurq/blackurq.c-
src/uqm/ships/blackurq/blackurq.c-RACE_DESC*
--
src/uqm/ships/syreen/syreen.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/syreen/syreen.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/syreen/syreen.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/syreen/syreen.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/syreen/syreen.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/syreen/syreen.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/syreen/syreen.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/syreen/syreen.c-	MissileBlock.pixoffs = SYREEN_OFFSET;
--
src/uqm/ships/syreen/syreen.c-
src/uqm/ships/syreen/syreen.c-		GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/syreen/syreen.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/syreen/syreen.c:		if (!(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags & CREW_IMMUNE)
src/uqm/ships/syreen/syreen.c:				&& StarShipPtr->special_counter == 0
src/uqm/ships/syreen/syreen.c-				&& lpEvalDesc->ObjectPtr->crew_level > 1
src/uqm/ships/syreen/syreen.c-				&& lpEvalDesc->which_turn <= 14)
src/uqm/ships/syreen/syreen.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/syreen/syreen.c-		else
src/uqm/ships/syreen/syreen.c:			StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/syreen/syreen.c-	}
src/uqm/ships/syreen/syreen.c-}
src/uqm/ships/syreen/syreen.c-
--
src/uqm/ships/syreen/syreen.c-	STARSHIP *StarShipPtr;
src/uqm/ships/syreen/syreen.c-
src/uqm/ships/syreen/syreen.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/syreen/syreen.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/syreen/syreen.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/syreen/syreen.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/syreen/syreen.c-	{
src/uqm/ships/syreen/syreen.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/syreen/syreen.c-						/* SYREEN_SONG */
src/uqm/ships/syreen/syreen.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/syreen/syreen.c-		spawn_crew (ElementPtr);
src/uqm/ships/syreen/syreen.c-
src/uqm/ships/syreen/syreen.c:		StarShipPtr->special_counter =
src/uqm/ships/syreen/syreen.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/syreen/syreen.c-	}
src/uqm/ships/syreen/syreen.c-}
src/uqm/ships/syreen/syreen.c-
--
src/uqm/ships/ilwrath/ilwrath.c-			|| (lpEvalDesc->which_turn <= 10
src/uqm/ships/ilwrath/ilwrath.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn <= 10)))
src/uqm/ships/ilwrath/ilwrath.c-	{
src/uqm/ships/ilwrath/ilwrath.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/ilwrath/ilwrath.c-		if (OBJECT_CLOAKED (ShipPtr))
src/uqm/ships/ilwrath/ilwrath.c-		{
src/uqm/ships/ilwrath/ilwrath.c:			StarShipPtr->ship_input_state &= ~LEFT | RIGHT;
src/uqm/ships/ilwrath/ilwrath.c:			StarShipPtr->ship_input_state |= THRUST;
src/uqm/ships/ilwrath/ilwrath.c-		}
src/uqm/ships/ilwrath/ilwrath.c:		StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/ilwrath/ilwrath.c-	}
src/uqm/ships/ilwrath/ilwrath.c:	else if (StarShipPtr->special_counter == 0
src/uqm/ships/ilwrath/ilwrath.c-			&& (LOBYTE (GLOBAL (CurrentActivity)) != IN_ENCOUNTER
src/uqm/ships/ilwrath/ilwrath.c-			|| !GET_GAME_STATE (PROBE_ILWRATH_ENCOUNTER)))
src/uqm/ships/ilwrath/ilwrath.c-	{
src/uqm/ships/ilwrath/ilwrath.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/ilwrath/ilwrath.c-		if (!OBJECT_CLOAKED (ShipPtr)
src/uqm/ships/ilwrath/ilwrath.c:				&& !(StarShipPtr->ship_input_state & WEAPON))
src/uqm/ships/ilwrath/ilwrath.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/ilwrath/ilwrath.c-	}
src/uqm/ships/ilwrath/ilwrath.c-}
src/uqm/ships/ilwrath/ilwrath.c-
--
src/uqm/ships/ilwrath/ilwrath.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/ilwrath/ilwrath.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/ilwrath/ilwrath.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/ilwrath/ilwrath.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/ilwrath/ilwrath.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/ilwrath/ilwrath.c-	MissileBlock.index = 0;
src/uqm/ships/ilwrath/ilwrath.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/ilwrath/ilwrath.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/ilwrath/ilwrath.c-	PRIMITIVE *lpPrim;
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/ilwrath/ilwrath.c:	status_flags = StarShipPtr->cur_status_flags;
src/uqm/ships/ilwrath/ilwrath.c-	lpPrim = &(GLOBAL (DisplayArray))[ElementPtr->PrimIndex];
src/uqm/ships/ilwrath/ilwrath.c-	if (GetPrimType (lpPrim) == STAMPFILL_PRIM)
src/uqm/ships/ilwrath/ilwrath.c-	{
--
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-		color = GetPrimColor (lpPrim);
src/uqm/ships/ilwrath/ilwrath.c-		weapon_discharge = ((status_flags & WEAPON)
src/uqm/ships/ilwrath/ilwrath.c:				&& StarShipPtr->RaceDescPtr->ship_info.energy_level >= WEAPON_ENERGY_COST);
src/uqm/ships/ilwrath/ilwrath.c-		if (weapon_discharge
src/uqm/ships/ilwrath/ilwrath.c:				|| (StarShipPtr->special_counter == 0
src/uqm/ships/ilwrath/ilwrath.c-				&& ((status_flags & SPECIAL) ||
src/uqm/ships/ilwrath/ilwrath.c-				!sameColor (color, BLACK_COLOR))))
src/uqm/ships/ilwrath/ilwrath.c-		{
--
src/uqm/ships/ilwrath/ilwrath.c-			{
src/uqm/ships/ilwrath/ilwrath.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/ilwrath/ilwrath.c-								/* CLOAKING_OFF */
src/uqm/ships/ilwrath/ilwrath.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2), ElementPtr);
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-				SetPrimColor (lpPrim, BUILD_COLOR (MAKE_RGB15 (0x00, 0x00, 0x14), 0x01));
src/uqm/ships/ilwrath/ilwrath.c-
--
src/uqm/ships/ilwrath/ilwrath.c-				{
src/uqm/ships/ilwrath/ilwrath.c-					COUNT facing;
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c:					facing = StarShipPtr->ShipFacing;
src/uqm/ships/ilwrath/ilwrath.c-					if (TrackShip (ElementPtr, &facing) >= 0)
src/uqm/ships/ilwrath/ilwrath.c-					{
src/uqm/ships/ilwrath/ilwrath.c-#define LOOK_AHEAD 4
--
src/uqm/ships/ilwrath/ilwrath.c-								- (ElementPtr->current.location.y + dy1);
src/uqm/ships/ilwrath/ilwrath.c-						UnlockElement (ElementPtr->hTarget);
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c:						StarShipPtr->ShipFacing =
src/uqm/ships/ilwrath/ilwrath.c-								NORMALIZE_FACING (
src/uqm/ships/ilwrath/ilwrath.c-								ANGLE_TO_FACING (ARCTAN (dx0, dy0))
src/uqm/ships/ilwrath/ilwrath.c-								);
src/uqm/ships/ilwrath/ilwrath.c-#ifdef NOTYET
src/uqm/ships/ilwrath/ilwrath.c-						if (ElementPtr->thrust_wait == 0
src/uqm/ships/ilwrath/ilwrath.c:								&& (StarShipPtr->cur_status_flags & THRUST))
src/uqm/ships/ilwrath/ilwrath.c-						{
src/uqm/ships/ilwrath/ilwrath.c-							COUNT last_facing;
src/uqm/ships/ilwrath/ilwrath.c-
--
src/uqm/ships/ilwrath/ilwrath.c-							{
src/uqm/ships/ilwrath/ilwrath.c-								VELOCITY_DESC temp_v;
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c:								last_facing = StarShipPtr->ShipFacing;
src/uqm/ships/ilwrath/ilwrath.c-								inertial_thrust (ElementPtr);
src/uqm/ships/ilwrath/ilwrath.c-								temp_v = ElementPtr->velocity;
src/uqm/ships/ilwrath/ilwrath.c-								ElementPtr->velocity = v;
--
src/uqm/ships/ilwrath/ilwrath.c-										&dx1, &dy1, LOOK_AHEAD);
src/uqm/ships/ilwrath/ilwrath.c-								dx0 -= dx1;
src/uqm/ships/ilwrath/ilwrath.c-								dy0 -= dy1;
src/uqm/ships/ilwrath/ilwrath.c:								StarShipPtr->ShipFacing =
src/uqm/ships/ilwrath/ilwrath.c-										NORMALIZE_FACING (
src/uqm/ships/ilwrath/ilwrath.c-										ANGLE_TO_FACING (ARCTAN (dx0, dy0))
src/uqm/ships/ilwrath/ilwrath.c-										);
src/uqm/ships/ilwrath/ilwrath.c:							} while (StarShipPtr->ShipFacing != last_facing);
src/uqm/ships/ilwrath/ilwrath.c-						}
src/uqm/ships/ilwrath/ilwrath.c-#endif /* NOTYET */
src/uqm/ships/ilwrath/ilwrath.c-						if (ElementPtr->turn_wait == 0)
src/uqm/ships/ilwrath/ilwrath.c-							++ElementPtr->turn_wait;
src/uqm/ships/ilwrath/ilwrath.c-						ElementPtr->next.image.frame =
src/uqm/ships/ilwrath/ilwrath.c-								SetAbsFrameIndex (ElementPtr->next.image.frame,
src/uqm/ships/ilwrath/ilwrath.c:								StarShipPtr->ShipFacing);
src/uqm/ships/ilwrath/ilwrath.c-					}
src/uqm/ships/ilwrath/ilwrath.c-					ElementPtr->hTarget = 0;
src/uqm/ships/ilwrath/ilwrath.c-				}
--
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-			ElementPtr->state_flags |= CHANGING;
src/uqm/ships/ilwrath/ilwrath.c-			status_flags &= ~SPECIAL;
src/uqm/ships/ilwrath/ilwrath.c:			StarShipPtr->special_counter = 0;
src/uqm/ships/ilwrath/ilwrath.c-		}
src/uqm/ships/ilwrath/ilwrath.c-		else if (!sameColor (color, BLACK_COLOR))
src/uqm/ships/ilwrath/ilwrath.c-		{
--
src/uqm/ships/ilwrath/ilwrath.c-	}
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-	if ((status_flags & SPECIAL)
src/uqm/ships/ilwrath/ilwrath.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/ilwrath/ilwrath.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/ilwrath/ilwrath.c-	{
src/uqm/ships/ilwrath/ilwrath.c-		SetPrimColor (lpPrim,
--
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/ilwrath/ilwrath.c-						/* CLOAKING_ON */
src/uqm/ships/ilwrath/ilwrath.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1),
src/uqm/ships/ilwrath/ilwrath.c-				ElementPtr);
src/uqm/ships/ilwrath/ilwrath.c:		StarShipPtr->special_counter =
src/uqm/ships/ilwrath/ilwrath.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/ilwrath/ilwrath.c-
src/uqm/ships/ilwrath/ilwrath.c-		ElementPtr->state_flags |= CHANGING;
src/uqm/ships/ilwrath/ilwrath.c-	}
--
src/uqm/ships/shofixti/shofixti.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/shofixti/shofixti.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/shofixti/shofixti.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/shofixti/shofixti.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/shofixti/shofixti.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/shofixti/shofixti.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/shofixti/shofixti.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/shofixti/shofixti.c-	MissileBlock.pixoffs = SHOFIXTI_OFFSET;
--
src/uqm/ships/shofixti/shofixti.c-			SetPrimColor (&(GLOBAL (DisplayArray))[DestructPtr->PrimIndex],
src/uqm/ships/shofixti/shofixti.c-					BUILD_COLOR (MAKE_RGB15 (0x1F, 0x1F, 0x1F), 0x0F));
src/uqm/ships/shofixti/shofixti.c-			DestructPtr->current.image.farray =
src/uqm/ships/shofixti/shofixti.c:					StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/shofixti/shofixti.c-			DestructPtr->current.image.frame =
src/uqm/ships/shofixti/shofixti.c:					StarShipPtr->RaceDescPtr->ship_data.special[0];
src/uqm/ships/shofixti/shofixti.c-			DestructPtr->current.location = ElementPtr->current.location;
src/uqm/ships/shofixti/shofixti.c-			DestructPtr->preprocess_func = destruct_preprocess;
src/uqm/ships/shofixti/shofixti.c-			DestructPtr->postprocess_func = NULL;
--
src/uqm/ships/shofixti/shofixti.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/shofixti/shofixti.c-
src/uqm/ships/shofixti/shofixti.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/shofixti/shofixti.c:	if (StarShipPtr->special_counter != 0)
src/uqm/ships/shofixti/shofixti.c-		return;
src/uqm/ships/shofixti/shofixti.c-
src/uqm/ships/shofixti/shofixti.c:	if (StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/shofixti/shofixti.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/shofixti/shofixti.c-	else
src/uqm/ships/shofixti/shofixti.c-	{
src/uqm/ships/shofixti/shofixti.c-		EVALUATE_DESC *lpWeaponEvalDesc;
--
src/uqm/ships/shofixti/shofixti.c-
src/uqm/ships/shofixti/shofixti.c-		lpWeaponEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/shofixti/shofixti.c-		lpShipEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/shofixti/shofixti.c:		if (StarShipPtr->RaceDescPtr->ship_data.special[0]
src/uqm/ships/shofixti/shofixti.c:				&& (GetFrameCount (StarShipPtr->RaceDescPtr->ship_data.
src/uqm/ships/shofixti/shofixti.c-				captain_control.special)
src/uqm/ships/shofixti/shofixti.c:				- GetFrameIndex (StarShipPtr->RaceDescPtr->ship_data.
src/uqm/ships/shofixti/shofixti.c-				captain_control.special) > 5
src/uqm/ships/shofixti/shofixti.c-				|| (lpShipEvalDesc->ObjectPtr != NULL
src/uqm/ships/shofixti/shofixti.c-				&& lpShipEvalDesc->which_turn <= 4)
--
src/uqm/ships/shofixti/shofixti.c-				&& lpWeaponEvalDesc->ObjectPtr->mass_points >=
src/uqm/ships/shofixti/shofixti.c-				ShipPtr->crew_level
src/uqm/ships/shofixti/shofixti.c-				&& (TFB_Random () & 1))))))
src/uqm/ships/shofixti/shofixti.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/shofixti/shofixti.c-	}
src/uqm/ships/shofixti/shofixti.c-}
src/uqm/ships/shofixti/shofixti.c-
--
src/uqm/ships/shofixti/shofixti.c-	STARSHIP *StarShipPtr;
src/uqm/ships/shofixti/shofixti.c-
src/uqm/ships/shofixti/shofixti.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/shofixti/shofixti.c:	if ((StarShipPtr->cur_status_flags
src/uqm/ships/shofixti/shofixti.c:			^ StarShipPtr->old_status_flags) & SPECIAL)
src/uqm/ships/shofixti/shofixti.c-	{
src/uqm/ships/shofixti/shofixti.c:		StarShipPtr->RaceDescPtr->ship_data.captain_control.special =
src/uqm/ships/shofixti/shofixti.c:				IncFrameIndex (StarShipPtr->RaceDescPtr->ship_data.
src/uqm/ships/shofixti/shofixti.c-				captain_control.special);
src/uqm/ships/shofixti/shofixti.c:		if (GetFrameCount (StarShipPtr->RaceDescPtr->ship_data.
src/uqm/ships/shofixti/shofixti.c-				captain_control.special)
src/uqm/ships/shofixti/shofixti.c:				- GetFrameIndex (StarShipPtr->RaceDescPtr->ship_data.
src/uqm/ships/shofixti/shofixti.c-				captain_control.special) == 3)
src/uqm/ships/shofixti/shofixti.c-			self_destruct (ElementPtr);
src/uqm/ships/shofixti/shofixti.c-	}
--
src/uqm/ships/melnorme/melnorme.c-		STARSHIP *StarShipPtr;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/melnorme/melnorme.c-		initialize_pump_up (ShipPtr, &hPumpUp);
src/uqm/ships/melnorme/melnorme.c-		DeltaEnergy (ShipPtr, 0);
src/uqm/ships/melnorme/melnorme.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-		LockElement (hPumpUp, &EPtr);
src/uqm/ships/melnorme/melnorme.c-
--
src/uqm/ships/melnorme/melnorme.c-				EPtr->current.image.frame = SetRelFrameIndex (
src/uqm/ships/melnorme/melnorme.c-						EPtr->current.image.frame, NUM_PUMP_ANIMS);
src/uqm/ships/melnorme/melnorme.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/melnorme/melnorme.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2),
src/uqm/ships/melnorme/melnorme.c-						EPtr);
src/uqm/ships/melnorme/melnorme.c-			}
src/uqm/ships/melnorme/melnorme.c-			EPtr->thrust_wait = LEVEL_COUNTER;
--
src/uqm/ships/melnorme/melnorme.c-					EPtr->current.image.frame, frame_index);
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:		if (StarShipPtr->cur_status_flags & StarShipPtr->old_status_flags
src/uqm/ships/melnorme/melnorme.c-				& WEAPON)
src/uqm/ships/melnorme/melnorme.c-		{
src/uqm/ships/melnorme/melnorme.c:			StarShipPtr->weapon_counter = WEAPON_WAIT;
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-		else
src/uqm/ships/melnorme/melnorme.c-		{
--
src/uqm/ships/melnorme/melnorme.c-			EPtr->preprocess_func = pump_up_preprocess;
src/uqm/ships/melnorme/melnorme.c-			EPtr->postprocess_func = 0;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:			angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ships/melnorme/melnorme.c-			SetVelocityComponents (&EPtr->velocity,
src/uqm/ships/melnorme/melnorme.c-					COSINE (angle, WORLD_TO_VELOCITY (PUMPUP_SPEED << RESOLUTION_FACTOR)), // JMS_GFX
src/uqm/ships/melnorme/melnorme.c-					SINE (angle, WORLD_TO_VELOCITY (PUMPUP_SPEED << RESOLUTION_FACTOR))); // JMS_GFX
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/melnorme/melnorme.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 3), EPtr);
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-		UnlockElement (hPumpUp);
--
src/uqm/ships/melnorme/melnorme.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/melnorme/melnorme.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/melnorme/melnorme.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.index = 0;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/melnorme/melnorme.c-						SetRelFrameIndex (ElementPtr->next.image.frame, -8);
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-			GetElementStarShip (eptr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c:			StarShipPtr->ship_input_state =
src/uqm/ships/melnorme/melnorme.c:					(StarShipPtr->ship_input_state
src/uqm/ships/melnorme/melnorme.c-					& ~(LEFT | RIGHT | SPECIAL))
src/uqm/ships/melnorme/melnorme.c-					| ElementPtr->turn_wait;
src/uqm/ships/melnorme/melnorme.c-
--
src/uqm/ships/melnorme/melnorme.c-			LockElement (hConfusionElement, &ConfusionPtr);
src/uqm/ships/melnorme/melnorme.c-			if (elementsOfSamePlayer (ConfusionPtr, ElementPtr0)
src/uqm/ships/melnorme/melnorme.c-					&& ConfusionPtr->current.image.farray ==
src/uqm/ships/melnorme/melnorme.c:					StarShipPtr->RaceDescPtr->ship_data.special
src/uqm/ships/melnorme/melnorme.c-					&& (ConfusionPtr->state_flags & NONSOLID))
src/uqm/ships/melnorme/melnorme.c-			{
src/uqm/ships/melnorme/melnorme.c-				UnlockElement (hConfusionElement);
--
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-				SetElementStarShip (ConfusionPtr, StarShipPtr);
src/uqm/ships/melnorme/melnorme.c-				GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c:				ConfusionPtr->hTarget = StarShipPtr->hShip;
src/uqm/ships/melnorme/melnorme.c-			}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-			ConfusionPtr->life_span = 400;
--
src/uqm/ships/melnorme/melnorme.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/melnorme/melnorme.c:	ConfusionBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.index = 0;
src/uqm/ships/melnorme/melnorme.c:	ConfusionBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.sender = ShipPtr->playerNr;
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/melnorme/melnorme.c-	ConfusionBlock.pixoffs = MELNORME_OFFSET;
--
src/uqm/ships/melnorme/melnorme.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/melnorme/melnorme.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/melnorme/melnorme.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.index = 0;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/melnorme/melnorme.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	StarShipPtr->RaceDescPtr->init_weapon_func = initialize_test_pump_up;
src/uqm/ships/melnorme/melnorme.c:	old_count = StarShipPtr->weapon_counter;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	if (StarShipPtr->weapon_counter == WEAPON_WAIT)
src/uqm/ships/melnorme/melnorme.c:		StarShipPtr->weapon_counter = 0;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/melnorme/melnorme.c-	if (lpEvalDesc->ObjectPtr)
src/uqm/ships/melnorme/melnorme.c-	{
src/uqm/ships/melnorme/melnorme.c:		if (StarShipPtr->RaceDescPtr->ship_info.energy_level < SPECIAL_ENERGY_COST
src/uqm/ships/melnorme/melnorme.c-				+ WEAPON_ENERGY_COST
src/uqm/ships/melnorme/melnorme.c:				&& !(StarShipPtr->old_status_flags & WEAPON))
src/uqm/ships/melnorme/melnorme.c-			lpEvalDesc->MoveState = ENTICE;
src/uqm/ships/melnorme/melnorme.c-		else
src/uqm/ships/melnorme/melnorme.c-		{
src/uqm/ships/melnorme/melnorme.c-			STARSHIP *EnemyStarShipPtr;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-			GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/melnorme/melnorme.c:			if (!(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/melnorme/melnorme.c-					& IMMEDIATE_WEAPON))
src/uqm/ships/melnorme/melnorme.c-				lpEvalDesc->MoveState = PURSUE;
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-	}
src/uqm/ships/melnorme/melnorme.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	if (StarShipPtr->weapon_counter == 0
src/uqm/ships/melnorme/melnorme.c-			&& (old_count != 0
src/uqm/ships/melnorme/melnorme.c:			|| ((StarShipPtr->special_counter
src/uqm/ships/melnorme/melnorme.c:			|| StarShipPtr->RaceDescPtr->ship_info.energy_level >= SPECIAL_ENERGY_COST
src/uqm/ships/melnorme/melnorme.c-			+ WEAPON_ENERGY_COST)
src/uqm/ships/melnorme/melnorme.c:			&& !(StarShipPtr->ship_input_state & WEAPON))))
src/uqm/ships/melnorme/melnorme.c:		StarShipPtr->ship_input_state ^= WEAPON;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/melnorme/melnorme.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/melnorme/melnorme.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level >= SPECIAL_ENERGY_COST)
src/uqm/ships/melnorme/melnorme.c-	{
src/uqm/ships/melnorme/melnorme.c-		BYTE old_input_state;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:		old_input_state = StarShipPtr->ship_input_state;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:		StarShipPtr->RaceDescPtr->init_weapon_func = initialize_confusion;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-		++ShipPtr->turn_wait;
src/uqm/ships/melnorme/melnorme.c-		++ShipPtr->thrust_wait;
--
src/uqm/ships/melnorme/melnorme.c-		--ShipPtr->thrust_wait;
src/uqm/ships/melnorme/melnorme.c-		--ShipPtr->turn_wait;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:		if (StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/melnorme/melnorme.c-		{
src/uqm/ships/melnorme/melnorme.c:			StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/melnorme/melnorme.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:		StarShipPtr->ship_input_state = (unsigned char)(old_input_state
src/uqm/ships/melnorme/melnorme.c:				| (StarShipPtr->ship_input_state & SPECIAL));
src/uqm/ships/melnorme/melnorme.c-	}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	StarShipPtr->weapon_counter = old_count;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c:	StarShipPtr->RaceDescPtr->init_weapon_func = initialize_pump_up;
src/uqm/ships/melnorme/melnorme.c-}
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-static void
--
src/uqm/ships/melnorme/melnorme.c-	STARSHIP *StarShipPtr;
src/uqm/ships/melnorme/melnorme.c-
src/uqm/ships/melnorme/melnorme.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/melnorme/melnorme.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/melnorme/melnorme.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/melnorme/melnorme.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/melnorme/melnorme.c-	{
src/uqm/ships/melnorme/melnorme.c-		HELEMENT Confusion;
--
src/uqm/ships/melnorme/melnorme.c-			LockElement (Confusion, &CMissilePtr);
src/uqm/ships/melnorme/melnorme.c-			
src/uqm/ships/melnorme/melnorme.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/melnorme/melnorme.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), CMissilePtr);
src/uqm/ships/melnorme/melnorme.c-			
src/uqm/ships/melnorme/melnorme.c-			UnlockElement (Confusion);
src/uqm/ships/melnorme/melnorme.c-			PutElement (Confusion);
src/uqm/ships/melnorme/melnorme.c:			StarShipPtr->special_counter =
src/uqm/ships/melnorme/melnorme.c:					StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/melnorme/melnorme.c-		}
src/uqm/ships/melnorme/melnorme.c-	}
src/uqm/ships/melnorme/melnorme.c-}
--
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/chenjesu/chenjesu.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.index = 1;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.sender = ElementPtr->playerNr;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	ProcessSound (SetAbsSoundIndex (
src/uqm/ships/chenjesu/chenjesu.c-					/* CRYSTAL_FRAGMENTS */
src/uqm/ships/chenjesu/chenjesu.c:			StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/chenjesu/chenjesu.c-}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-static void
--
src/uqm/ships/chenjesu/chenjesu.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:	if (StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/chenjesu/chenjesu.c-		++ElementPtr->life_span; /* keep it going while key pressed */
src/uqm/ships/chenjesu/chenjesu.c-	else
src/uqm/ships/chenjesu/chenjesu.c-	{
--
src/uqm/ships/chenjesu/chenjesu.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:	++StarShipPtr->special_counter;
src/uqm/ships/chenjesu/chenjesu.c-	if (ElementPtr->thrust_wait > 0) /* could be non-zero after a collision */
src/uqm/ships/chenjesu/chenjesu.c-		--ElementPtr->thrust_wait;
src/uqm/ships/chenjesu/chenjesu.c-	else
--
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c-	ProcessSound (SetAbsSoundIndex (
src/uqm/ships/chenjesu/chenjesu.c-					/* DOGGY_DIES */
src/uqm/ships/chenjesu/chenjesu.c:			StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 3), ElementPtr);
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	ElementPtr->state_flags &= ~DISAPPEARING;
src/uqm/ships/chenjesu/chenjesu.c-	ElementPtr->state_flags |= NONSOLID | FINITE_LIFE;
--
src/uqm/ships/chenjesu/chenjesu.c-		GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/chenjesu/chenjesu.c-						/* DOGGY_STEALS_ENERGY */
src/uqm/ships/chenjesu/chenjesu.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2), ElementPtr0);
src/uqm/ships/chenjesu/chenjesu.c-		GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:		if (StarShipPtr->RaceDescPtr->ship_info.energy_level < ENERGY_DRAIN)
src/uqm/ships/chenjesu/chenjesu.c:			DeltaEnergy (ElementPtr1, -StarShipPtr->RaceDescPtr->ship_info.energy_level);
src/uqm/ships/chenjesu/chenjesu.c-		else
src/uqm/ships/chenjesu/chenjesu.c-			DeltaEnergy (ElementPtr1, -ENERGY_DRAIN);
src/uqm/ships/chenjesu/chenjesu.c-	}
--
src/uqm/ships/chenjesu/chenjesu.c-		}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:		angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing) + HALF_CIRCLE;
src/uqm/ships/chenjesu/chenjesu.c-		DoggyElementPtr->current.location.x = ElementPtr->next.location.x
src/uqm/ships/chenjesu/chenjesu.c-				+ COSINE (angle, DISPLAY_TO_WORLD (CHENJESU_OFFSET + DOGGY_OFFSET));
src/uqm/ships/chenjesu/chenjesu.c-		DoggyElementPtr->current.location.y = ElementPtr->next.location.y
src/uqm/ships/chenjesu/chenjesu.c-				+ SINE (angle, DISPLAY_TO_WORLD (CHENJESU_OFFSET + DOGGY_OFFSET));
src/uqm/ships/chenjesu/chenjesu.c:		DoggyElementPtr->current.image.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/chenjesu/chenjesu.c:		DoggyElementPtr->current.image.frame = StarShipPtr->RaceDescPtr->ship_data.special[0];
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-		SetVelocityVector (&DoggyElementPtr->velocity, DOGGY_SPEED, NORMALIZE_FACING (ANGLE_TO_FACING (angle)));
src/uqm/ships/chenjesu/chenjesu.c-
--
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/chenjesu/chenjesu.c-						/* RELEASE_DOGGY */
src/uqm/ships/chenjesu/chenjesu.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 4), DoggyElementPtr);
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-		UnlockElement (hDoggyElement);
src/uqm/ships/chenjesu/chenjesu.c-	}
--
src/uqm/ships/chenjesu/chenjesu.c-	static DWORD old_dist[NUM_SIDES] = {(DWORD)~0, (DWORD)~0};
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/chenjesu/chenjesu.c-	if (lpEvalDesc->ObjectPtr)
--
src/uqm/ships/chenjesu/chenjesu.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c-		if ((lpEvalDesc->which_turn <= 16
src/uqm/ships/chenjesu/chenjesu.c-				&& MANEUVERABILITY (
src/uqm/ships/chenjesu/chenjesu.c:				&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/chenjesu/chenjesu.c-				) >= RESOLUTION_COMPENSATED(MEDIUM_SHIP)) // JMS_GFX
src/uqm/ships/chenjesu/chenjesu.c-				|| (MANEUVERABILITY (
src/uqm/ships/chenjesu/chenjesu.c:				&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/chenjesu/chenjesu.c-				) <= RESOLUTION_COMPENSATED(SLOW_SHIP) // JMS_GFX
src/uqm/ships/chenjesu/chenjesu.c-				&& WEAPON_RANGE (
src/uqm/ships/chenjesu/chenjesu.c:				&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/chenjesu/chenjesu.c-				) >= (LONG_RANGE_WEAPON << RESOLUTION_FACTOR) * 3 / 4 // JMS_GFX
src/uqm/ships/chenjesu/chenjesu.c:				&& (EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags & SEEKING_WEAPON)))
src/uqm/ships/chenjesu/chenjesu.c-			lpEvalDesc->MoveState = PURSUE;
src/uqm/ships/chenjesu/chenjesu.c-	}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c:	if (StarShipPtr->special_counter == 1
src/uqm/ships/chenjesu/chenjesu.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr
src/uqm/ships/chenjesu/chenjesu.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].MoveState == ENTICE
src/uqm/ships/chenjesu/chenjesu.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn <= 8)
--
src/uqm/ships/chenjesu/chenjesu.c-		HELEMENT h, hNext;
src/uqm/ships/chenjesu/chenjesu.c-		ELEMENT *CrystalPtr;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c:		h = (StarShipPtr->old_status_flags & WEAPON) ?
src/uqm/ships/chenjesu/chenjesu.c-				GetTailElement () : (HELEMENT)0;
src/uqm/ships/chenjesu/chenjesu.c-		for (; h; h = hNext)
src/uqm/ships/chenjesu/chenjesu.c-		{
src/uqm/ships/chenjesu/chenjesu.c-			LockElement (h, &CrystalPtr);
src/uqm/ships/chenjesu/chenjesu.c-			hNext = GetPredElement (CrystalPtr);
src/uqm/ships/chenjesu/chenjesu.c-			if (!(CrystalPtr->state_flags & NONSOLID)
src/uqm/ships/chenjesu/chenjesu.c:					&& CrystalPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.weapon
src/uqm/ships/chenjesu/chenjesu.c-					&& CrystalPtr->preprocess_func
src/uqm/ships/chenjesu/chenjesu.c-					&& CrystalPtr->life_span > 0
src/uqm/ships/chenjesu/chenjesu.c-					&& elementsOfSamePlayer (CrystalPtr, ShipPtr))
--
src/uqm/ships/chenjesu/chenjesu.c-					
src/uqm/ships/chenjesu/chenjesu.c-					if (crystal_would_miss)
src/uqm/ships/chenjesu/chenjesu.c-					{
src/uqm/ships/chenjesu/chenjesu.c:						StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/chenjesu/chenjesu.c-						old_dist[ShipPtr->playerNr] = (DWORD)~0;
src/uqm/ships/chenjesu/chenjesu.c-						
src/uqm/ships/chenjesu/chenjesu.c-						// JMS: Let's try to stop Chenjesu's stupid over-rapid firing behavior in hires modes...
--
src/uqm/ships/chenjesu/chenjesu.c-							&& ((ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr
src/uqm/ships/chenjesu/chenjesu.c-								 && ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn > 8)
src/uqm/ships/chenjesu/chenjesu.c-								|| !(ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr)))
src/uqm/ships/chenjesu/chenjesu.c:							StarShipPtr->weapon_counter = 10;
src/uqm/ships/chenjesu/chenjesu.c-					}
src/uqm/ships/chenjesu/chenjesu.c:					else if (StarShipPtr->weapon_counter == 0)
src/uqm/ships/chenjesu/chenjesu.c-					{
src/uqm/ships/chenjesu/chenjesu.c:						StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/chenjesu/chenjesu.c-						lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/chenjesu/chenjesu.c-					}
src/uqm/ships/chenjesu/chenjesu.c-
--
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-		if (h == 0)
src/uqm/ships/chenjesu/chenjesu.c-		{
src/uqm/ships/chenjesu/chenjesu.c:			if (StarShipPtr->old_status_flags & WEAPON)
src/uqm/ships/chenjesu/chenjesu.c-			{
src/uqm/ships/chenjesu/chenjesu.c:				StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/chenjesu/chenjesu.c-				old_dist[ShipPtr->playerNr] = (DWORD)~0;
src/uqm/ships/chenjesu/chenjesu.c-				
src/uqm/ships/chenjesu/chenjesu.c-				if (lpEvalDesc == &ObjectsOfConcern[ENEMY_WEAPON_INDEX])
src/uqm/ships/chenjesu/chenjesu.c:					StarShipPtr->weapon_counter = 3;
src/uqm/ships/chenjesu/chenjesu.c-			}
src/uqm/ships/chenjesu/chenjesu.c:			else if (StarShipPtr->weapon_counter == 0
src/uqm/ships/chenjesu/chenjesu.c-					&& ship_weapons (ShipPtr, lpEvalDesc->ObjectPtr, FRAGMENT_RANGE / 2))
src/uqm/ships/chenjesu/chenjesu.c-			{
src/uqm/ships/chenjesu/chenjesu.c-				if (RESOLUTION_FACTOR > 0)
--
src/uqm/ships/chenjesu/chenjesu.c-					
src/uqm/ships/chenjesu/chenjesu.c-					Ship = *ShipPtr;
src/uqm/ships/chenjesu/chenjesu.c-					GetElementStarShip (&Ship, &StarShipPtr2);
src/uqm/ships/chenjesu/chenjesu.c:					num_weapons = (*StarShipPtr->RaceDescPtr->init_weapon_func) (ShipPtr, Weapon);
src/uqm/ships/chenjesu/chenjesu.c-					WeaponPtr = &Weapon[0];
src/uqm/ships/chenjesu/chenjesu.c-					
src/uqm/ships/chenjesu/chenjesu.c-					w = *WeaponPtr;
--
src/uqm/ships/chenjesu/chenjesu.c-							
src/uqm/ships/chenjesu/chenjesu.c-						if (PlotIntercept (EPtr, lpEvalDesc->ObjectPtr, EPtr->life_span, FRAGMENT_RANGE / 2) < 80)
src/uqm/ships/chenjesu/chenjesu.c-						{
src/uqm/ships/chenjesu/chenjesu.c:							StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/chenjesu/chenjesu.c-						}
src/uqm/ships/chenjesu/chenjesu.c-							
src/uqm/ships/chenjesu/chenjesu.c-						UnlockElement (w);
--
src/uqm/ships/chenjesu/chenjesu.c-				}
src/uqm/ships/chenjesu/chenjesu.c-				else
src/uqm/ships/chenjesu/chenjesu.c-				{
src/uqm/ships/chenjesu/chenjesu.c:					StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/chenjesu/chenjesu.c-				}
src/uqm/ships/chenjesu/chenjesu.c-			}
src/uqm/ships/chenjesu/chenjesu.c-		}
src/uqm/ships/chenjesu/chenjesu.c-	}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c:	if (StarShipPtr->special_counter < MAX_DOGGIES)
src/uqm/ships/chenjesu/chenjesu.c-	{
src/uqm/ships/chenjesu/chenjesu.c-		if (lpEvalDesc->ObjectPtr
src/uqm/ships/chenjesu/chenjesu.c:				&& StarShipPtr->RaceDescPtr->ship_info.energy_level <= SPECIAL_ENERGY_COST
src/uqm/ships/chenjesu/chenjesu.c:				&& !(StarShipPtr->ship_input_state & WEAPON))
src/uqm/ships/chenjesu/chenjesu.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/chenjesu/chenjesu.c-	}
src/uqm/ships/chenjesu/chenjesu.c-}
src/uqm/ships/chenjesu/chenjesu.c-
--
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/chenjesu/chenjesu.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/chenjesu/chenjesu.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.index = 0;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/chenjesu/chenjesu.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/chenjesu/chenjesu.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/chenjesu/chenjesu.c:			&& StarShipPtr->special_counter < MAX_DOGGIES
src/uqm/ships/chenjesu/chenjesu.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/chenjesu/chenjesu.c-	{
src/uqm/ships/chenjesu/chenjesu.c-		spawn_doggy (ElementPtr);
src/uqm/ships/chenjesu/chenjesu.c-	}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c:	StarShipPtr->special_counter = 1;
src/uqm/ships/chenjesu/chenjesu.c-			/* say there is one doggy, because ship_postprocess will
src/uqm/ships/chenjesu/chenjesu.c-			 * decrement special_counter */
src/uqm/ships/chenjesu/chenjesu.c-}
--
src/uqm/ships/chenjesu/chenjesu.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chenjesu/chenjesu.c:	if (StarShipPtr->special_counter > 1) /* only when STANDARD
src/uqm/ships/chenjesu/chenjesu.c-											 * computer opponent
src/uqm/ships/chenjesu/chenjesu.c-											 */
src/uqm/ships/chenjesu/chenjesu.c:		StarShipPtr->special_counter += MAX_DOGGIES;
src/uqm/ships/chenjesu/chenjesu.c:	if (StarShipPtr->cur_status_flags
src/uqm/ships/chenjesu/chenjesu.c:			& StarShipPtr->old_status_flags
src/uqm/ships/chenjesu/chenjesu.c-			& WEAPON)
src/uqm/ships/chenjesu/chenjesu.c:		++StarShipPtr->weapon_counter;
src/uqm/ships/chenjesu/chenjesu.c-}
src/uqm/ships/chenjesu/chenjesu.c-
src/uqm/ships/chenjesu/chenjesu.c-RACE_DESC*
--
src/uqm/ships/yehat/yehat.c-	MISSILE_BLOCK MissileBlock;
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/yehat/yehat.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/yehat/yehat.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/yehat/yehat.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/yehat/yehat.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/yehat/yehat.c-	MissileBlock.pixoffs = YEHAT_OFFSET;
--
src/uqm/ships/yehat/yehat.c-	}
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/yehat/yehat.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/yehat/yehat.c-	{
src/uqm/ships/yehat/yehat.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/yehat/yehat.c-		if (ShieldStatus)
src/uqm/ships/yehat/yehat.c-		{
src/uqm/ships/yehat/yehat.c-			if (ShipPtr->life_span <= NORMAL_LIFE + 1
--
src/uqm/ships/yehat/yehat.c-					|| PlotIntercept (lpEvalDesc->ObjectPtr,
src/uqm/ships/yehat/yehat.c-					ShipPtr, 2, 0))
src/uqm/ships/yehat/yehat.c-					&& (TFB_Random () & 3))
src/uqm/ships/yehat/yehat.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-			if (lpEvalDesc->ObjectPtr
src/uqm/ships/yehat/yehat.c-					&& !(lpEvalDesc->ObjectPtr->state_flags & CREW_OBJECT))
--
src/uqm/ships/yehat/yehat.c-		STARSHIP *EnemyStarShipPtr;
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/yehat/yehat.c:		if (!(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/yehat/yehat.c-				& IMMEDIATE_WEAPON))
src/uqm/ships/yehat/yehat.c-			lpEvalDesc->MoveState = PURSUE;
src/uqm/ships/yehat/yehat.c-	}
src/uqm/ships/yehat/yehat.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/yehat/yehat.c-/*
src/uqm/ships/yehat/yehat.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level <= SPECIAL_ENERGY_COST)
src/uqm/ships/yehat/yehat.c:		StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/yehat/yehat.c-*/
src/uqm/ships/yehat/yehat.c-}
src/uqm/ships/yehat/yehat.c-
--
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/yehat/yehat.c-				/* take care of shield effect */
src/uqm/ships/yehat/yehat.c:		if (StarShipPtr->special_counter > 0)
src/uqm/ships/yehat/yehat.c-		{
src/uqm/ships/yehat/yehat.c-			if (ElementPtr->life_span == NORMAL_LIFE)
src/uqm/ships/yehat/yehat.c:				StarShipPtr->special_counter = 0;
src/uqm/ships/yehat/yehat.c-			else
src/uqm/ships/yehat/yehat.c-			{
src/uqm/ships/yehat/yehat.c-#ifdef OLD
--
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/yehat/yehat.c-								/* YEHAT_SHIELD_ON */
src/uqm/ships/yehat/yehat.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/yehat/yehat.c-				DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST);
src/uqm/ships/yehat/yehat.c-			}
src/uqm/ships/yehat/yehat.c-		}
--
src/uqm/ships/yehat/yehat.c-													 * will not be done
src/uqm/ships/yehat/yehat.c-													 */
src/uqm/ships/yehat/yehat.c-				ShipElementPtr->current.location = ElementPtr->next.location;
src/uqm/ships/yehat/yehat.c:				ShipElementPtr->current.image.farray = StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/yehat/yehat.c-				ShipElementPtr->current.image.frame =
src/uqm/ships/yehat/yehat.c:						SetAbsFrameIndex (StarShipPtr->RaceDescPtr->ship_data.ship[0],
src/uqm/ships/yehat/yehat.c:						StarShipPtr->ShipFacing);
src/uqm/ships/yehat/yehat.c-				ShipElementPtr->next = ShipElementPtr->current;
src/uqm/ships/yehat/yehat.c-				ShipElementPtr->preprocess_func =
src/uqm/ships/yehat/yehat.c-						ShipElementPtr->postprocess_func =
--
src/uqm/ships/yehat/yehat.c-				&& --ElementPtr->life_span == NORMAL_LIFE)
src/uqm/ships/yehat/yehat.c-				|| (ElementPtr->life_span == NORMAL_LIFE
src/uqm/ships/yehat/yehat.c-				&& ElementPtr->next.image.farray
src/uqm/ships/yehat/yehat.c:						== StarShipPtr->RaceDescPtr->ship_data.special))
src/uqm/ships/yehat/yehat.c-		{
src/uqm/ships/yehat/yehat.c-#ifdef NEVER
src/uqm/ships/yehat/yehat.c-			SetPrimType (&(GLOBAL (DisplayArray))[ElementPtr->PrimIndex], STAMP_PRIM);
src/uqm/ships/yehat/yehat.c-#endif /* NEVER */
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c:			ElementPtr->next.image.farray = StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/yehat/yehat.c-			ElementPtr->next.image.frame =
src/uqm/ships/yehat/yehat.c:					SetEquFrameIndex (StarShipPtr->RaceDescPtr->ship_data.ship[0],
src/uqm/ships/yehat/yehat.c-					ElementPtr->next.image.frame);
src/uqm/ships/yehat/yehat.c-			ElementPtr->state_flags |= CHANGING;
src/uqm/ships/yehat/yehat.c-		}
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c:		if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/yehat/yehat.c:				&& StarShipPtr->special_counter == 0)
src/uqm/ships/yehat/yehat.c-		{
src/uqm/ships/yehat/yehat.c:			if (StarShipPtr->RaceDescPtr->ship_info.energy_level < SPECIAL_ENERGY_COST)
src/uqm/ships/yehat/yehat.c-				DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST); /* so text will flash */
src/uqm/ships/yehat/yehat.c-			else
src/uqm/ships/yehat/yehat.c-			{
src/uqm/ships/yehat/yehat.c-#define SHIELD_LIFE 10
src/uqm/ships/yehat/yehat.c-				ElementPtr->life_span = SHIELD_LIFE + NORMAL_LIFE;
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c:				ElementPtr->next.image.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/yehat/yehat.c-				ElementPtr->next.image.frame =
src/uqm/ships/yehat/yehat.c:						SetEquFrameIndex (StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/yehat/yehat.c-						ElementPtr->next.image.frame);
src/uqm/ships/yehat/yehat.c-				ElementPtr->state_flags |= CHANGING;
src/uqm/ships/yehat/yehat.c-
src/uqm/ships/yehat/yehat.c:				StarShipPtr->special_counter =
src/uqm/ships/yehat/yehat.c:						StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/yehat/yehat.c-			}
src/uqm/ships/yehat/yehat.c-		}
src/uqm/ships/yehat/yehat.c-	}
--
src/uqm/ships/arilou/arilou.c-		laser_range_resscaled = LASER_RANGE_4XRES;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/arilou/arilou.c:	LaserBlock.face = orig_facing = StarShipPtr->ShipFacing;
src/uqm/ships/arilou/arilou.c-	if ((delta_facing = TrackShip (ShipPtr, &LaserBlock.face)) > 0)
src/uqm/ships/arilou/arilou.c-		LaserBlock.face = NORMALIZE_FACING (orig_facing + delta_facing);
src/uqm/ships/arilou/arilou.c-	ShipPtr->hTarget = 0;
--
src/uqm/ships/arilou/arilou.c-	STARSHIP *StarShipPtr;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/arilou/arilou.c:	StarShipPtr->ship_input_state |= THRUST;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-	ObjectsOfConcern[ENEMY_SHIP_INDEX].MoveState = ENTICE;
src/uqm/ships/arilou/arilou.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/arilou/arilou.c-	{
src/uqm/ships/arilou/arilou.c-		EVALUATE_DESC *lpEvalDesc;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-		lpEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/arilou/arilou.c-		if (lpEvalDesc->ObjectPtr && lpEvalDesc->which_turn <= 6)
--
src/uqm/ships/arilou/arilou.c-			STARSHIP *EnemyStarShipPtr;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-			GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/arilou/arilou.c:			if (((EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/arilou/arilou.c-					& SEEKING_WEAPON) &&
src/uqm/ships/arilou/arilou.c-					lpEvalDesc->ObjectPtr->next.image.farray ==
src/uqm/ships/arilou/arilou.c:					EnemyStarShipPtr->RaceDescPtr->ship_data.weapon) ||
src/uqm/ships/arilou/arilou.c:					((EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/arilou/arilou.c-					& SEEKING_SPECIAL) &&
src/uqm/ships/arilou/arilou.c-					lpEvalDesc->ObjectPtr->next.image.farray ==
src/uqm/ships/arilou/arilou.c:					EnemyStarShipPtr->RaceDescPtr->ship_data.special))
src/uqm/ships/arilou/arilou.c-				IsTrackingWeapon = TRUE;
src/uqm/ships/arilou/arilou.c-			else
src/uqm/ships/arilou/arilou.c-				IsTrackingWeapon = FALSE;
--
src/uqm/ships/arilou/arilou.c-				 || PlotIntercept (lpEvalDesc->ObjectPtr, ShipPtr, 3, 0))
src/uqm/ships/arilou/arilou.c-				&& !(TFB_Random () & 3))
src/uqm/ships/arilou/arilou.c-			{
src/uqm/ships/arilou/arilou.c:				StarShipPtr->ship_input_state &= ~(LEFT | RIGHT | THRUST | WEAPON);
src/uqm/ships/arilou/arilou.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/arilou/arilou.c-			}
src/uqm/ships/arilou/arilou.c-		}
src/uqm/ships/arilou/arilou.c-	}
src/uqm/ships/arilou/arilou.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level <= SPECIAL_ENERGY_COST << 1)
src/uqm/ships/arilou/arilou.c:		StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/arilou/arilou.c-}
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-static void
--
src/uqm/ships/arilou/arilou.c-		if (ElementPtr->thrust_wait == 0)
src/uqm/ships/arilou/arilou.c-		{
src/uqm/ships/arilou/arilou.c-			ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/ships/arilou/arilou.c:			StarShipPtr->cur_status_flags &= ~SHIP_AT_MAX_SPEED;
src/uqm/ships/arilou/arilou.c-		}
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c:		if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/arilou/arilou.c:				&& StarShipPtr->special_counter == 0
src/uqm/ships/arilou/arilou.c-				&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/arilou/arilou.c-		{
src/uqm/ships/arilou/arilou.c-			/* Special key is pressed; start teleport */
src/uqm/ships/arilou/arilou.c-#define HYPER_LIFE 5
src/uqm/ships/arilou/arilou.c-			ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/ships/arilou/arilou.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/arilou/arilou.c-					~(SHIP_AT_MAX_SPEED | LEFT | RIGHT | THRUST | WEAPON);
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-			ElementPtr->state_flags |= NONSOLID | FINITE_LIFE | CHANGING;
src/uqm/ships/arilou/arilou.c-			ElementPtr->life_span = HYPER_LIFE;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-			ElementPtr->next.image.farray =
src/uqm/ships/arilou/arilou.c:					StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/arilou/arilou.c-			ElementPtr->next.image.frame =
src/uqm/ships/arilou/arilou.c:					StarShipPtr->RaceDescPtr->ship_data.special[0];
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/arilou/arilou.c-							/* HYPERJUMP */
src/uqm/ships/arilou/arilou.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/arilou/arilou.c:			StarShipPtr->special_counter =
src/uqm/ships/arilou/arilou.c:					StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/arilou/arilou.c-		}
src/uqm/ships/arilou/arilou.c-	}
src/uqm/ships/arilou/arilou.c:	else if (ElementPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.special)
src/uqm/ships/arilou/arilou.c-	{
src/uqm/ships/arilou/arilou.c-		COUNT life_span;
src/uqm/ships/arilou/arilou.c-
src/uqm/ships/arilou/arilou.c:		StarShipPtr->cur_status_flags =
src/uqm/ships/arilou/arilou.c:				(StarShipPtr->cur_status_flags
src/uqm/ships/arilou/arilou.c-				& ~(LEFT | RIGHT | THRUST | WEAPON | SPECIAL))
src/uqm/ships/arilou/arilou.c:				| (StarShipPtr->old_status_flags
src/uqm/ships/arilou/arilou.c-				& (LEFT | RIGHT | THRUST | WEAPON | SPECIAL));
src/uqm/ships/arilou/arilou.c:		++StarShipPtr->weapon_counter;
src/uqm/ships/arilou/arilou.c:		++StarShipPtr->special_counter;
src/uqm/ships/arilou/arilou.c:		++StarShipPtr->energy_counter;
src/uqm/ships/arilou/arilou.c-		++ElementPtr->turn_wait;
src/uqm/ships/arilou/arilou.c-		++ElementPtr->thrust_wait;
src/uqm/ships/arilou/arilou.c-
--
src/uqm/ships/arilou/arilou.c-			ElementPtr->state_flags |= APPEARING;
src/uqm/ships/arilou/arilou.c-			ElementPtr->current.image.farray =
src/uqm/ships/arilou/arilou.c-					ElementPtr->next.image.farray =
src/uqm/ships/arilou/arilou.c:					StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/arilou/arilou.c-			ElementPtr->current.image.frame =
src/uqm/ships/arilou/arilou.c-					ElementPtr->next.image.frame =
src/uqm/ships/arilou/arilou.c:					SetAbsFrameIndex (StarShipPtr->RaceDescPtr->ship_data.ship[0],
src/uqm/ships/arilou/arilou.c:					StarShipPtr->ShipFacing);
src/uqm/ships/arilou/arilou.c-			InitIntersectStartPoint (ElementPtr);
src/uqm/ships/arilou/arilou.c-		}
src/uqm/ships/arilou/arilou.c-		else
--
src/uqm/ships/zoqfot/zoqfot.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/zoqfot/zoqfot.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/zoqfot/zoqfot.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.index = 0;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.pixoffs = ZOQFOTPIK_OFFSET;
src/uqm/ships/zoqfot/zoqfot.c:	MissileBlock.speed = DISPLAY_TO_WORLD ((GetFrameCount (StarShipPtr->RaceDescPtr->ship_data.weapon[0])) << RESOLUTION_FACTOR) << 1; // JMS_GFX
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.hit_points = MISSILE_HITS;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.damage = MISSILE_DAMAGE;
src/uqm/ships/zoqfot/zoqfot.c-	MissileBlock.life = MISSILE_LIFE;
--
src/uqm/ships/zoqfot/zoqfot.c-	STARSHIP *StarShipPtr;
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c-	GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/zoqfot/zoqfot.c:	if (StarShipPtr->special_counter == StarShipPtr->RaceDescPtr->characteristics.special_wait)
src/uqm/ships/zoqfot/zoqfot.c-		weapon_collision (ElementPtr0, pPt0, ElementPtr1, pPt1);
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:	StarShipPtr->special_counter -= ElementPtr0->turn_wait;
src/uqm/ships/zoqfot/zoqfot.c-	ElementPtr0->turn_wait = 0;
src/uqm/ships/zoqfot/zoqfot.c-	ElementPtr0->state_flags |= NONSOLID;
src/uqm/ships/zoqfot/zoqfot.c-}
--
src/uqm/ships/zoqfot/zoqfot.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/zoqfot/zoqfot.c-	TongueBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/zoqfot/zoqfot.c-	TongueBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/zoqfot/zoqfot.c:	TongueBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/zoqfot/zoqfot.c:	TongueBlock.face = TongueBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/zoqfot/zoqfot.c-	TongueBlock.sender = ElementPtr->playerNr;
src/uqm/ships/zoqfot/zoqfot.c-	TongueBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/zoqfot/zoqfot.c-	TongueBlock.pixoffs = 0;
--
src/uqm/ships/zoqfot/zoqfot.c-		TonguePtr->postprocess_func = tongue_postprocess;
src/uqm/ships/zoqfot/zoqfot.c-		TonguePtr->collision_func = tongue_collision;
src/uqm/ships/zoqfot/zoqfot.c-		if (ElementPtr->state_flags & PLAYER_SHIP)
src/uqm/ships/zoqfot/zoqfot.c:			TonguePtr->turn_wait = StarShipPtr->special_counter;
src/uqm/ships/zoqfot/zoqfot.c-		else
src/uqm/ships/zoqfot/zoqfot.c-		{
src/uqm/ships/zoqfot/zoqfot.c-			COUNT angle;
--
src/uqm/ships/zoqfot/zoqfot.c-			x_offs = DISPLAY_TO_WORLD (r.extent.width >> 1);
src/uqm/ships/zoqfot/zoqfot.c-			y_offs = DISPLAY_TO_WORLD (r.extent.height >> 1);
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:			angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ships/zoqfot/zoqfot.c-			if (angle > HALF_CIRCLE && angle < FULL_CIRCLE)
src/uqm/ships/zoqfot/zoqfot.c-				TonguePtr->current.location.x -= x_offs;
src/uqm/ships/zoqfot/zoqfot.c-			else if (angle > 0 && angle < HALF_CIRCLE)
--
src/uqm/ships/zoqfot/zoqfot.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c-	GiveTongueJob = FALSE;
src/uqm/ships/zoqfot/zoqfot.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/zoqfot/zoqfot.c-	{
src/uqm/ships/zoqfot/zoqfot.c-		EVALUATE_DESC *lpEnemyEvalDesc;
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c-		lpEnemyEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/zoqfot/zoqfot.c-		if (lpEnemyEvalDesc->ObjectPtr
src/uqm/ships/zoqfot/zoqfot.c-				&& lpEnemyEvalDesc->which_turn <= 4
src/uqm/ships/zoqfot/zoqfot.c-#ifdef NEVER
src/uqm/ships/zoqfot/zoqfot.c:				&& StarShipPtr->RaceDescPtr->ship_info.energy_level >= SPECIAL_ENERGY_COST
src/uqm/ships/zoqfot/zoqfot.c-#endif /* NEVER */
src/uqm/ships/zoqfot/zoqfot.c-				)
src/uqm/ships/zoqfot/zoqfot.c-		{
--
src/uqm/ships/zoqfot/zoqfot.c-					- ShipPtr->next.location.x;
src/uqm/ships/zoqfot/zoqfot.c-			delta_y = lpEnemyEvalDesc->ObjectPtr->next.location.y
src/uqm/ships/zoqfot/zoqfot.c-					- ShipPtr->next.location.y;
src/uqm/ships/zoqfot/zoqfot.c:			if (StarShipPtr->ShipFacing == NORMALIZE_FACING (
src/uqm/ships/zoqfot/zoqfot.c-					ANGLE_TO_FACING (ARCTAN (delta_x, delta_y))
src/uqm/ships/zoqfot/zoqfot.c-					))
src/uqm/ships/zoqfot/zoqfot.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/zoqfot/zoqfot.c-		}
src/uqm/ships/zoqfot/zoqfot.c-	}
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:	++StarShipPtr->weapon_counter;
src/uqm/ships/zoqfot/zoqfot.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/zoqfot/zoqfot.c:	--StarShipPtr->weapon_counter;
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:	if (StarShipPtr->weapon_counter == 0)
src/uqm/ships/zoqfot/zoqfot.c-	{
src/uqm/ships/zoqfot/zoqfot.c:		StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/zoqfot/zoqfot.c-		if (!GiveTongueJob)
src/uqm/ships/zoqfot/zoqfot.c-		{
src/uqm/ships/zoqfot/zoqfot.c-			ObjectsOfConcern += ConcernCounter;
--
src/uqm/ships/zoqfot/zoqfot.c-						|| (ConcernCounter == ENEMY_WEAPON_INDEX
src/uqm/ships/zoqfot/zoqfot.c-						&& ObjectsOfConcern->MoveState != AVOID
src/uqm/ships/zoqfot/zoqfot.c-#ifdef NEVER
src/uqm/ships/zoqfot/zoqfot.c:						&& !(StarShipPtr->control & STANDARD_RATING)
src/uqm/ships/zoqfot/zoqfot.c-#endif /* NEVER */
src/uqm/ships/zoqfot/zoqfot.c-						))
src/uqm/ships/zoqfot/zoqfot.c-						&& ship_weapons (ShipPtr,
src/uqm/ships/zoqfot/zoqfot.c-						ObjectsOfConcern->ObjectPtr, DISPLAY_TO_WORLD (20 << RESOLUTION_FACTOR))) // JMS_GFX
src/uqm/ships/zoqfot/zoqfot.c-				{
src/uqm/ships/zoqfot/zoqfot.c:					StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/zoqfot/zoqfot.c-					break;
src/uqm/ships/zoqfot/zoqfot.c-				}
src/uqm/ships/zoqfot/zoqfot.c-			}
--
src/uqm/ships/zoqfot/zoqfot.c-	STARSHIP *StarShipPtr;
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/zoqfot/zoqfot.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/zoqfot/zoqfot.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/zoqfot/zoqfot.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/zoqfot/zoqfot.c-	{
src/uqm/ships/zoqfot/zoqfot.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/zoqfot/zoqfot.c-					/* STICK_OUT_TONGUE */
src/uqm/ships/zoqfot/zoqfot.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:		StarShipPtr->special_counter = StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/zoqfot/zoqfot.c-	}
src/uqm/ships/zoqfot/zoqfot.c-
src/uqm/ships/zoqfot/zoqfot.c:	if (StarShipPtr->special_counter)
src/uqm/ships/zoqfot/zoqfot.c-		spawn_tongue (ElementPtr);
src/uqm/ships/zoqfot/zoqfot.c-}
src/uqm/ships/zoqfot/zoqfot.c-
--
src/uqm/ships/utwig/utwig.c-	MISSILE_BLOCK MissileBlock;
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/utwig/utwig.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/utwig/utwig.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/utwig/utwig.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/utwig/utwig.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/utwig/utwig.c-	MissileBlock.speed = MISSILE_SPEED;
--
src/uqm/ships/utwig/utwig.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/utwig/utwig.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level == 0)
src/uqm/ships/utwig/utwig.c-		ShieldStatus = 0;
src/uqm/ships/utwig/utwig.c-	else
src/uqm/ships/utwig/utwig.c-	{
--
src/uqm/ships/utwig/utwig.c-		}
src/uqm/ships/utwig/utwig.c-	}
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/utwig/utwig.c-	{
src/uqm/ships/utwig/utwig.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/utwig/utwig.c-		if (ShieldStatus)
src/uqm/ships/utwig/utwig.c-		{
src/uqm/ships/utwig/utwig.c-			if ((ShieldStatus > 0 || lpEvalDesc->ObjectPtr)
--
src/uqm/ships/utwig/utwig.c-					ShipPtr, 2, 0))
src/uqm/ships/utwig/utwig.c-					&& (TFB_Random () & 3))
src/uqm/ships/utwig/utwig.c-			{
src/uqm/ships/utwig/utwig.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/utwig/utwig.c:				StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/utwig/utwig.c-			}
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-			lpEvalDesc->ObjectPtr = 0;
src/uqm/ships/utwig/utwig.c-		}
src/uqm/ships/utwig/utwig.c-	}
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level
src/uqm/ships/utwig/utwig.c-			&& (lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX])->ObjectPtr)
src/uqm/ships/utwig/utwig.c-	{
src/uqm/ships/utwig/utwig.c-		STARSHIP *EnemyStarShipPtr;
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/utwig/utwig.c:		if (!(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/utwig/utwig.c-				& IMMEDIATE_WEAPON))
src/uqm/ships/utwig/utwig.c-			lpEvalDesc->MoveState = PURSUE;
src/uqm/ships/utwig/utwig.c-	}
--
src/uqm/ships/utwig/utwig.c-				ElementPtr->life_span - (NORMAL_LIFE + 1));
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/utwig/utwig.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1),
src/uqm/ships/utwig/utwig.c-				ElementPtr);
src/uqm/ships/utwig/utwig.c-	}
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c:	if (!(StarShipPtr->cur_status_flags & SPECIAL))
src/uqm/ships/utwig/utwig.c:		StarShipPtr->special_counter = 0;
src/uqm/ships/utwig/utwig.c:	else if (StarShipPtr->special_counter % (SPECIAL_WAIT >> 1) == 0)
src/uqm/ships/utwig/utwig.c-	{
src/uqm/ships/utwig/utwig.c-		if (!DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/utwig/utwig.c:			StarShipPtr->RaceDescPtr->ship_info.ship_flags &=
src/uqm/ships/utwig/utwig.c-					~(POINT_DEFENSE | SHIELD_DEFENSE);
src/uqm/ships/utwig/utwig.c:		else if (StarShipPtr->special_counter == 0)
src/uqm/ships/utwig/utwig.c-		{
src/uqm/ships/utwig/utwig.c:			StarShipPtr->special_counter =
src/uqm/ships/utwig/utwig.c:					StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/utwig/utwig.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/utwig/utwig.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2),
src/uqm/ships/utwig/utwig.c-					ElementPtr);
src/uqm/ships/utwig/utwig.c-		}
src/uqm/ships/utwig/utwig.c-	}
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-	lpPrim = &(GLOBAL (DisplayArray))[ElementPtr->PrimIndex];
src/uqm/ships/utwig/utwig.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/utwig/utwig.c-	{
src/uqm/ships/utwig/utwig.c-		// The shield is off.
src/uqm/ships/utwig/utwig.c-		SetPrimColor (lpPrim, BUILD_COLOR (MAKE_RGB15 (0x1F, 0x1C, 0x00), 0x78));
--
src/uqm/ships/utwig/utwig.c-		const size_t colorTableCount =
src/uqm/ships/utwig/utwig.c-				sizeof colorTable / sizeof colorTable[0];
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c:		if (StarShipPtr->weapon_counter == 0)
src/uqm/ships/utwig/utwig.c:			++StarShipPtr->weapon_counter;
src/uqm/ships/utwig/utwig.c-
src/uqm/ships/utwig/utwig.c-		// colorCycleIndex is actually 1 higher than the entry in colorTable
src/uqm/ships/utwig/utwig.c-		// which is currently used, as it is 0 when the shield is off,
--
src/uqm/ships/slylandr/slylandr.c-	STARSHIP *StarShipPtr;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-	GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/ships/slylandr/slylandr.c:	if (StarShipPtr->weapon_counter > WEAPON_WAIT >> 1)
src/uqm/ships/slylandr/slylandr.c:		StarShipPtr->weapon_counter =
src/uqm/ships/slylandr/slylandr.c:				WEAPON_WAIT - StarShipPtr->weapon_counter;
src/uqm/ships/slylandr/slylandr.c:	StarShipPtr->weapon_counter -= ElementPtr0->turn_wait;
src/uqm/ships/slylandr/slylandr.c-	ElementPtr0->turn_wait = 0;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-	weapon_collision (ElementPtr0, pPt0, ElementPtr1, pPt1);
--
src/uqm/ships/slylandr/slylandr.c-		}
src/uqm/ships/slylandr/slylandr.c-		else
src/uqm/ships/slylandr/slylandr.c-		{
src/uqm/ships/slylandr/slylandr.c:			facing = StarShipPtr->ShipFacing;
src/uqm/ships/slylandr/slylandr.c-			ElementPtr->hTarget = 0;
src/uqm/ships/slylandr/slylandr.c-			delta = TrackShip (ElementPtr, &facing);
src/uqm/ships/slylandr/slylandr.c-			ElementPtr->hTarget = 0;
src/uqm/ships/slylandr/slylandr.c-			angle = FACING_TO_ANGLE (facing);
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c:			if ((LaserPtr->turn_wait = StarShipPtr->weapon_counter) == 0)
src/uqm/ships/slylandr/slylandr.c-				LaserPtr->turn_wait = WEAPON_WAIT;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-			if (LaserPtr->turn_wait > WEAPON_WAIT >> 1)
--
src/uqm/ships/slylandr/slylandr.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/slylandr/slylandr.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/slylandr/slylandr.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level == 0
src/uqm/ships/slylandr/slylandr.c-			&& ObjectsOfConcern[GRAVITY_MASS_INDEX].ObjectPtr == 0)
src/uqm/ships/slylandr/slylandr.c-		ConcernCounter = FIRST_EMPTY_INDEX + 1;
src/uqm/ships/slylandr/slylandr.c-	if (lpEvalDesc->ObjectPtr && lpEvalDesc->MoveState == PURSUE
--
src/uqm/ships/slylandr/slylandr.c-	--ShipPtr->thrust_wait;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-	if (lpEvalDesc->ObjectPtr && lpEvalDesc->which_turn <= 14)
src/uqm/ships/slylandr/slylandr.c:		StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/slylandr/slylandr.c-	else
src/uqm/ships/slylandr/slylandr.c:		StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/slylandr/slylandr.c:	if (StarShipPtr->RaceDescPtr->ship_info.energy_level <
src/uqm/ships/slylandr/slylandr.c:			StarShipPtr->RaceDescPtr->ship_info.max_energy)
src/uqm/ships/slylandr/slylandr.c-	{
src/uqm/ships/slylandr/slylandr.c-		lpEvalDesc = &ObjectsOfConcern[FIRST_EMPTY_INDEX];
src/uqm/ships/slylandr/slylandr.c-		if (lpEvalDesc->ObjectPtr && lpEvalDesc->which_turn <= 14)
src/uqm/ships/slylandr/slylandr.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/slylandr/slylandr.c-	}
src/uqm/ships/slylandr/slylandr.c-}
src/uqm/ships/slylandr/slylandr.c-
--
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-					GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/slylandr/slylandr.c-					ProcessSound (SetAbsSoundIndex (
src/uqm/ships/slylandr/slylandr.c:							StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/slylandr/slylandr.c-					DeltaEnergy (ElementPtr, MAX_ENERGY);
src/uqm/ships/slylandr/slylandr.c-				}
src/uqm/ships/slylandr/slylandr.c-			}
--
src/uqm/ships/slylandr/slylandr.c-	STARSHIP *StarShipPtr;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/slylandr/slylandr.c:	if (StarShipPtr->weapon_counter
src/uqm/ships/slylandr/slylandr.c:			&& StarShipPtr->weapon_counter < WEAPON_WAIT)
src/uqm/ships/slylandr/slylandr.c-	{
src/uqm/ships/slylandr/slylandr.c-		HELEMENT Lightning;
src/uqm/ships/slylandr/slylandr.c-
--
src/uqm/ships/slylandr/slylandr.c-			PutElement (Lightning);
src/uqm/ships/slylandr/slylandr.c-	}
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/slylandr/slylandr.c:			&& (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/slylandr/slylandr.c-			&& harvest_space_junk (ElementPtr))
src/uqm/ships/slylandr/slylandr.c-	{
src/uqm/ships/slylandr/slylandr.c:		StarShipPtr->special_counter =
src/uqm/ships/slylandr/slylandr.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/slylandr/slylandr.c-	}
src/uqm/ships/slylandr/slylandr.c-}
src/uqm/ships/slylandr/slylandr.c-
--
src/uqm/ships/slylandr/slylandr.c-		STARSHIP *StarShipPtr;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/slylandr/slylandr.c:		if ((StarShipPtr->cur_status_flags & THRUST)
src/uqm/ships/slylandr/slylandr.c:				&& !(StarShipPtr->old_status_flags & THRUST))
src/uqm/ships/slylandr/slylandr.c:			StarShipPtr->ShipFacing += ANGLE_TO_FACING (HALF_CIRCLE);
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-		if (ElementPtr->turn_wait == 0)
src/uqm/ships/slylandr/slylandr.c-		{
src/uqm/ships/slylandr/slylandr.c-			ElementPtr->turn_wait +=
src/uqm/ships/slylandr/slylandr.c:					StarShipPtr->RaceDescPtr->characteristics.turn_wait + 1;
src/uqm/ships/slylandr/slylandr.c:			if (StarShipPtr->cur_status_flags & LEFT)
src/uqm/ships/slylandr/slylandr.c:				--StarShipPtr->ShipFacing;
src/uqm/ships/slylandr/slylandr.c:			else if (StarShipPtr->cur_status_flags & RIGHT)
src/uqm/ships/slylandr/slylandr.c:				++StarShipPtr->ShipFacing;
src/uqm/ships/slylandr/slylandr.c-		}
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c:		StarShipPtr->ShipFacing = NORMALIZE_FACING (StarShipPtr->ShipFacing);
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-		if (ElementPtr->thrust_wait == 0)
src/uqm/ships/slylandr/slylandr.c-		{
src/uqm/ships/slylandr/slylandr.c-			ElementPtr->thrust_wait +=
src/uqm/ships/slylandr/slylandr.c:					StarShipPtr->RaceDescPtr->characteristics.thrust_wait + 1;
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-			SetVelocityVector (&ElementPtr->velocity,
src/uqm/ships/slylandr/slylandr.c:					StarShipPtr->RaceDescPtr->characteristics.max_thrust,
src/uqm/ships/slylandr/slylandr.c:					StarShipPtr->ShipFacing);
src/uqm/ships/slylandr/slylandr.c:			StarShipPtr->cur_status_flags |= SHIP_AT_MAX_SPEED;
src/uqm/ships/slylandr/slylandr.c:			StarShipPtr->cur_status_flags &= ~SHIP_IN_GRAVITY_WELL;
src/uqm/ships/slylandr/slylandr.c-		}
src/uqm/ships/slylandr/slylandr.c-
src/uqm/ships/slylandr/slylandr.c-		ElementPtr->next.image.frame = IncFrameIndex (ElementPtr->next.image.frame);
--
src/uqm/ships/mycon/mycon.c-			STARSHIP *StarShipPtr;
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-			GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/mycon/mycon.c:			BlastElementPtr->hTarget = StarShipPtr->hShip;
src/uqm/ships/mycon/mycon.c-		}
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-		BlastElementPtr->current.location = ElementPtr1->current.location;
--
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/mycon/mycon.c-	if (ObjectsOfConcern[ENEMY_WEAPON_INDEX].MoveState == PURSUE)
src/uqm/ships/mycon/mycon.c:		StarShipPtr->ship_input_state &= ~THRUST; /* don't pursue seekers */
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/mycon/mycon.c:	if (StarShipPtr->weapon_counter == 0
src/uqm/ships/mycon/mycon.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/mycon/mycon.c-			&& (lpEvalDesc->which_turn <= 16
src/uqm/ships/mycon/mycon.c:			|| ShipPtr->crew_level == StarShipPtr->RaceDescPtr->ship_info.max_crew))
src/uqm/ships/mycon/mycon.c-	{
src/uqm/ships/mycon/mycon.c-		COUNT travel_facing, direction_facing;
src/uqm/ships/mycon/mycon.c-		SDWORD delta_x, delta_y;
--
src/uqm/ships/mycon/mycon.c-				);
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-		if (NORMALIZE_FACING (direction_facing
src/uqm/ships/mycon/mycon.c:				- StarShipPtr->ShipFacing
src/uqm/ships/mycon/mycon.c-				+ ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/mycon/mycon.c-				<= ANGLE_TO_FACING (HALF_CIRCLE)
src/uqm/ships/mycon/mycon.c:				&& (!(StarShipPtr->cur_status_flags &
src/uqm/ships/mycon/mycon.c-				(SHIP_BEYOND_MAX_SPEED | SHIP_IN_GRAVITY_WELL))
src/uqm/ships/mycon/mycon.c-				|| NORMALIZE_FACING (direction_facing
src/uqm/ships/mycon/mycon.c-				- travel_facing + ANGLE_TO_FACING (OCTANT))
src/uqm/ships/mycon/mycon.c-				<= ANGLE_TO_FACING (QUADRANT)))
src/uqm/ships/mycon/mycon.c:			StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/mycon/mycon.c-	}
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/mycon/mycon.c-	{
src/uqm/ships/mycon/mycon.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/mycon/mycon.c:		StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = DISPLAY_TO_WORLD (800 << RESOLUTION_FACTOR); // JMS_GFX
src/uqm/ships/mycon/mycon.c:		if (ShipPtr->crew_level < StarShipPtr->RaceDescPtr->ship_info.max_crew)
src/uqm/ships/mycon/mycon.c-		{
src/uqm/ships/mycon/mycon.c:			StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = MISSILE_SPEED * MISSILE_LIFE;
src/uqm/ships/mycon/mycon.c:			if (StarShipPtr->RaceDescPtr->ship_info.energy_level >= SPECIAL_ENERGY_COST
src/uqm/ships/mycon/mycon.c:					&& !(StarShipPtr->ship_input_state & WEAPON))
src/uqm/ships/mycon/mycon.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/mycon/mycon.c-		}
src/uqm/ships/mycon/mycon.c-	}
src/uqm/ships/mycon/mycon.c-}
--
src/uqm/ships/mycon/mycon.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/mycon/mycon.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/mycon/mycon.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/mycon/mycon.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/mycon/mycon.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/mycon/mycon.c-	MissileBlock.index = 0;
src/uqm/ships/mycon/mycon.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/mycon/mycon.c-	MissileBlock.flags = 0;
--
src/uqm/ships/mycon/mycon.c-	STARSHIP *StarShipPtr;
src/uqm/ships/mycon/mycon.c-    COUNT special_energy_cost=SPECIAL_ENERGY_COST-badguysImprove;
src/uqm/ships/mycon/mycon.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/mycon/mycon.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/mycon/mycon.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/mycon/mycon.c:			&& ElementPtr->crew_level != StarShipPtr->RaceDescPtr->ship_info.max_crew
src/uqm/ships/mycon/mycon.c-			&& DeltaEnergy (ElementPtr, -special_energy_cost))
src/uqm/ships/mycon/mycon.c-	{
src/uqm/ships/mycon/mycon.c-#define REGENERATION_AMOUNT 4
--
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/mycon/mycon.c-						/* GROW_NEW_CREW */
src/uqm/ships/mycon/mycon.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/mycon/mycon.c-		if ((add_crew = REGENERATION_AMOUNT) >
src/uqm/ships/mycon/mycon.c:				StarShipPtr->RaceDescPtr->ship_info.max_crew - ElementPtr->crew_level)
src/uqm/ships/mycon/mycon.c:			add_crew = StarShipPtr->RaceDescPtr->ship_info.max_crew - ElementPtr->crew_level;
src/uqm/ships/mycon/mycon.c-		DeltaCrew (ElementPtr, add_crew);
src/uqm/ships/mycon/mycon.c-
src/uqm/ships/mycon/mycon.c:		StarShipPtr->special_counter =
src/uqm/ships/mycon/mycon.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/mycon/mycon.c-	}
src/uqm/ships/mycon/mycon.c-}
src/uqm/ships/mycon/mycon.c-
--
src/uqm/ships/urquan/urquan.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/urquan/urquan.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/urquan/urquan.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/urquan/urquan.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/urquan/urquan.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/urquan/urquan.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/urquan/urquan.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/urquan/urquan.c-	MissileBlock.pixoffs = URQUAN_OFFSET;
--
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/urquan/urquan.c-						/* FIGHTER_ZAP */
src/uqm/ships/urquan/urquan.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2), LaserPtr);
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-		UnlockElement (Laser);
src/uqm/ships/urquan/urquan.c-		PutElement (Laser);
--
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:	++StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/urquan/urquan.c-	FIGHTER_SPEED=((8+(4*badguysImprove)) << RESOLUTION_FACTOR);
src/uqm/ships/urquan/urquan.c-    FIGHTER_LIFE=(ONE_WAY_FLIGHT + ONE_WAY_FLIGHT + 150)+20*badguysImprove;
src/uqm/ships/urquan/urquan.c-
--
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-		Enroute = TRUE;
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:		delta_x = StarShipPtr->RaceDescPtr->ship_info.crew_level;
src/uqm/ships/urquan/urquan.c-		delta_y = ElementPtr->life_span;
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-		orig_facing = facing =
--
src/uqm/ships/urquan/urquan.c-			ElementPtr->state_flags |= IGNORE_SIMILAR;
src/uqm/ships/urquan/urquan.c-		else if (delta_x)
src/uqm/ships/urquan/urquan.c-		{
src/uqm/ships/urquan/urquan.c:			LockElement (StarShipPtr->hShip, &eptr);
src/uqm/ships/urquan/urquan.c-			delta_x = eptr->current.location.x
src/uqm/ships/urquan/urquan.c-					- ElementPtr->current.location.x;
src/uqm/ships/urquan/urquan.c-			delta_y = eptr->current.location.y
src/uqm/ships/urquan/urquan.c-					- ElementPtr->current.location.y;
src/uqm/ships/urquan/urquan.c:			UnlockElement (StarShipPtr->hShip);
src/uqm/ships/urquan/urquan.c-			delta_x = WRAP_DELTA_X (delta_x);
src/uqm/ships/urquan/urquan.c-			delta_y = WRAP_DELTA_Y (delta_y);
src/uqm/ships/urquan/urquan.c-			facing = NORMALIZE_FACING (
--
src/uqm/ships/urquan/urquan.c-	{
src/uqm/ships/urquan/urquan.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/urquan/urquan.c-						/* FIGHTERS_RETURN */
src/uqm/ships/urquan/urquan.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 3), ElementPtr1);
src/uqm/ships/urquan/urquan.c-		DeltaCrew (ElementPtr1, 1);
src/uqm/ships/urquan/urquan.c-		ElementPtr0->state_flags |= DISAPPEARING | COLLISION;
src/uqm/ships/urquan/urquan.c-	}
--
src/uqm/ships/urquan/urquan.c-		ElementPtr0->life_span = 0;
src/uqm/ships/urquan/urquan.c-		ElementPtr0->state_flags |= NONSOLID;
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:		--StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/urquan/urquan.c-	}
src/uqm/ships/urquan/urquan.c-}
src/uqm/ships/urquan/urquan.c-
--
src/uqm/ships/urquan/urquan.c-	STARSHIP *StarShipPtr;
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/urquan/urquan.c:	facing = StarShipPtr->ShipFacing + ANGLE_TO_FACING (HALF_CIRCLE);
src/uqm/ships/urquan/urquan.c-	delta_x = COSINE (FACING_TO_ANGLE (facing), DISPLAY_TO_WORLD (14 << RESOLUTION_FACTOR)); // JMS_GFX
src/uqm/ships/urquan/urquan.c-	delta_y = SINE (FACING_TO_ANGLE (facing), DISPLAY_TO_WORLD (14 << RESOLUTION_FACTOR));
src/uqm/ships/urquan/urquan.c-
--
src/uqm/ships/urquan/urquan.c-		FighterElementPtr->current.location.x -= VELOCITY_TO_WORLD (sx);
src/uqm/ships/urquan/urquan.c-		FighterElementPtr->current.location.y -= VELOCITY_TO_WORLD (sy);
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:		FighterElementPtr->current.image.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/urquan/urquan.c-		FighterElementPtr->current.image.frame =
src/uqm/ships/urquan/urquan.c:				SetAbsFrameIndex (StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/urquan/urquan.c-				fighter_facing);
src/uqm/ships/urquan/urquan.c-		SetElementStarShip (FighterElementPtr, StarShipPtr);
src/uqm/ships/urquan/urquan.c-		UnlockElement (hFighterElement);
--
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-		if (lpEvalDesc->ObjectPtr)
src/uqm/ships/urquan/urquan.c-			GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/urquan/urquan.c:		if (StarShipPtr->special_counter == 0
src/uqm/ships/urquan/urquan.c-				&& lpEvalDesc->ObjectPtr
src/uqm/ships/urquan/urquan.c:				&& StarShipPtr->RaceDescPtr->ship_info.crew_level >
src/uqm/ships/urquan/urquan.c:					(StarShipPtr->RaceDescPtr->ship_info.max_crew >> 2)
src/uqm/ships/urquan/urquan.c:				&& !(EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags
src/uqm/ships/urquan/urquan.c-					 & POINT_DEFENSE)
src/uqm/ships/urquan/urquan.c:				&& (StarShipPtr->RaceDescPtr->characteristics.special_wait < 6
src/uqm/ships/urquan/urquan.c-				|| (MANEUVERABILITY (
src/uqm/ships/urquan/urquan.c:						&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/urquan/urquan.c-						) <= RESOLUTION_COMPENSATED(SLOW_SHIP) // JMS_GFX
src/uqm/ships/urquan/urquan.c:				&& !(EnemyStarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED))
src/uqm/ships/urquan/urquan.c-				|| (lpEvalDesc->which_turn <= 12
src/uqm/ships/urquan/urquan.c:				&& (StarShipPtr->ship_input_state & (LEFT | RIGHT))
src/uqm/ships/urquan/urquan.c:				&& StarShipPtr->RaceDescPtr->ship_info.energy_level >=
src/uqm/ships/urquan/urquan.c:				(BYTE)(StarShipPtr->RaceDescPtr->ship_info.max_energy >> 1)))
src/uqm/ships/urquan/urquan.c-				&& !OBJECT_CLOAKED (lpEvalDesc->ObjectPtr)) // JMS
src/uqm/ships/urquan/urquan.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/urquan/urquan.c-		else
src/uqm/ships/urquan/urquan.c:			StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/urquan/urquan.c-	}
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:	StarShipPtr->RaceDescPtr->characteristics.special_wait = 0;
src/uqm/ships/urquan/urquan.c-}
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-static void
--
src/uqm/ships/urquan/urquan.c-	STARSHIP *StarShipPtr;
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/urquan/urquan.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/urquan/urquan.c-			&& ElementPtr->crew_level > 1
src/uqm/ships/urquan/urquan.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/urquan/urquan.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/urquan/urquan.c-	{
src/uqm/ships/urquan/urquan.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/urquan/urquan.c-						/* LAUNCH_FIGHTERS */
src/uqm/ships/urquan/urquan.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/urquan/urquan.c-		spawn_fighters (ElementPtr);
src/uqm/ships/urquan/urquan.c-
src/uqm/ships/urquan/urquan.c:		StarShipPtr->special_counter = SPECIAL_WAIT;
src/uqm/ships/urquan/urquan.c-	}
src/uqm/ships/urquan/urquan.c-}
src/uqm/ships/urquan/urquan.c-
--
src/uqm/ships/thradd/thradd.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/thradd/thradd.c:	if (StarShipPtr->special_counter == 0)
src/uqm/ships/thradd/thradd.c-	{
src/uqm/ships/thradd/thradd.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/thradd/thradd.c-		if (ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr
src/uqm/ships/thradd/thradd.c-				&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].MoveState == ENTICE)
src/uqm/ships/thradd/thradd.c-		{
src/uqm/ships/thradd/thradd.c:			if ((StarShipPtr->ship_input_state & THRUST)
src/uqm/ships/thradd/thradd.c-					|| (ShipPtr->turn_wait == 0
src/uqm/ships/thradd/thradd.c:					&& !(StarShipPtr->ship_input_state & (LEFT | RIGHT)))
src/uqm/ships/thradd/thradd.c-					|| NORMALIZE_FACING (ANGLE_TO_FACING (
src/uqm/ships/thradd/thradd.c-					GetVelocityTravelAngle (
src/uqm/ships/thradd/thradd.c-					&ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr->velocity
src/uqm/ships/thradd/thradd.c-					) + HALF_CIRCLE + OCTANT)
src/uqm/ships/thradd/thradd.c:					- StarShipPtr->ShipFacing) > ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/thradd/thradd.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/thradd/thradd.c-		}
src/uqm/ships/thradd/thradd.c-		else if (lpEvalDesc->ObjectPtr)
src/uqm/ships/thradd/thradd.c-		{
src/uqm/ships/thradd/thradd.c-			if (lpEvalDesc->MoveState == PURSUE)
src/uqm/ships/thradd/thradd.c-			{
src/uqm/ships/thradd/thradd.c:				if (StarShipPtr->RaceDescPtr->ship_info.energy_level >= WEAPON_ENERGY_COST
src/uqm/ships/thradd/thradd.c-						+ SPECIAL_ENERGY_COST
src/uqm/ships/thradd/thradd.c-						&& ShipPtr->turn_wait == 0
src/uqm/ships/thradd/thradd.c:						&& !(StarShipPtr->ship_input_state & (LEFT | RIGHT))
src/uqm/ships/thradd/thradd.c:						&& (!(StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/thradd/thradd.c:						|| !(StarShipPtr->cur_status_flags
src/uqm/ships/thradd/thradd.c-						& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))))
src/uqm/ships/thradd/thradd.c:					StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/thradd/thradd.c-			}
src/uqm/ships/thradd/thradd.c-			else if (lpEvalDesc->MoveState == ENTICE)
src/uqm/ships/thradd/thradd.c-			{
--
src/uqm/ships/thradd/thradd.c-				direction_angle = ARCTAN (delta_x, delta_y);
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-				if ((lpEvalDesc->which_turn > 24
src/uqm/ships/thradd/thradd.c:						&& !(StarShipPtr->ship_input_state & (LEFT | RIGHT)))
src/uqm/ships/thradd/thradd.c-						|| (lpEvalDesc->which_turn <= 16
src/uqm/ships/thradd/thradd.c-						&& NORMALIZE_ANGLE (direction_angle
src/uqm/ships/thradd/thradd.c:						- (FACING_TO_ANGLE (StarShipPtr->ShipFacing) + HALF_CIRCLE)
src/uqm/ships/thradd/thradd.c-						+ QUADRANT) <= HALF_CIRCLE
src/uqm/ships/thradd/thradd.c-						&& (lpEvalDesc->which_turn < 12
src/uqm/ships/thradd/thradd.c-						|| NORMALIZE_ANGLE (direction_angle
--
src/uqm/ships/thradd/thradd.c-								&lpEvalDesc->ObjectPtr->velocity
src/uqm/ships/thradd/thradd.c-								) + HALF_CIRCLE)
src/uqm/ships/thradd/thradd.c-						+ (OCTANT + 2)) <= ((OCTANT + 2) << 1))))
src/uqm/ships/thradd/thradd.c:					StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/thradd/thradd.c-			}
src/uqm/ships/thradd/thradd.c-		}
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c:		if ((StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/thradd/thradd.c:				&& StarShipPtr->RaceDescPtr->ship_info.energy_level >=
src/uqm/ships/thradd/thradd.c-				SPECIAL_ENERGY_COST)
src/uqm/ships/thradd/thradd.c:			StarShipPtr->ship_input_state &= ~THRUST;
src/uqm/ships/thradd/thradd.c-	}
src/uqm/ships/thradd/thradd.c-}
src/uqm/ships/thradd/thradd.c-
--
src/uqm/ships/thradd/thradd.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/thradd/thradd.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/thradd/thradd.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/thradd/thradd.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/thradd/thradd.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/thradd/thradd.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/thradd/thradd.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/thradd/thradd.c-	MissileBlock.pixoffs = THRADDASH_OFFSET;
--
src/uqm/ships/thradd/thradd.c-	STARSHIP *StarShipPtr;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/thradd/thradd.c:	if (!(StarShipPtr->cur_status_flags & SPECIAL))
src/uqm/ships/thradd/thradd.c-	{
src/uqm/ships/thradd/thradd.c:		if ((StarShipPtr->old_status_flags & SPECIAL)
src/uqm/ships/thradd/thradd.c:				&& (StarShipPtr->cur_status_flags & SHIP_AT_MAX_SPEED))
src/uqm/ships/thradd/thradd.c:			StarShipPtr->cur_status_flags |= SHIP_BEYOND_MAX_SPEED;
src/uqm/ships/thradd/thradd.c-	}
src/uqm/ships/thradd/thradd.c-	else if (DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/thradd/thradd.c-	{
--
src/uqm/ships/thradd/thradd.c-		STATUS_FLAGS thrust_status;
src/uqm/ships/thradd/thradd.c-		HELEMENT hTrailElement;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c:		if (!(StarShipPtr->old_status_flags & SPECIAL))
src/uqm/ships/thradd/thradd.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/thradd/thradd.c-					~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-		if (ElementPtr->thrust_wait == 0)
src/uqm/ships/thradd/thradd.c-			++ElementPtr->thrust_wait;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-		thrust_increment =
src/uqm/ships/thradd/thradd.c:				StarShipPtr->RaceDescPtr->characteristics.thrust_increment;
src/uqm/ships/thradd/thradd.c:		max_thrust = StarShipPtr->RaceDescPtr->characteristics.max_thrust;
src/uqm/ships/thradd/thradd.c:		StarShipPtr->RaceDescPtr->characteristics.thrust_increment =
src/uqm/ships/thradd/thradd.c-				SPECIAL_THRUST_INCREMENT;
src/uqm/ships/thradd/thradd.c:		StarShipPtr->RaceDescPtr->characteristics.max_thrust =
src/uqm/ships/thradd/thradd.c-				SPECIAL_MAX_THRUST;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-		thrust_status = inertial_thrust (ElementPtr);
src/uqm/ships/thradd/thradd.c:		StarShipPtr->cur_status_flags &=
src/uqm/ships/thradd/thradd.c-				~(SHIP_AT_MAX_SPEED
src/uqm/ships/thradd/thradd.c-				| SHIP_BEYOND_MAX_SPEED
src/uqm/ships/thradd/thradd.c-				| SHIP_IN_GRAVITY_WELL);
src/uqm/ships/thradd/thradd.c:		StarShipPtr->cur_status_flags |= thrust_status;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c:		StarShipPtr->RaceDescPtr->characteristics.thrust_increment =
src/uqm/ships/thradd/thradd.c-				thrust_increment;
src/uqm/ships/thradd/thradd.c:		StarShipPtr->RaceDescPtr->characteristics.max_thrust = max_thrust;
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-		{
src/uqm/ships/thradd/thradd.c-#define NAPALM_HITS 1
--
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-			MissileBlock.cx = ElementPtr->next.location.x;
src/uqm/ships/thradd/thradd.c-			MissileBlock.cy = ElementPtr->next.location.y;
src/uqm/ships/thradd/thradd.c:			MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/thradd/thradd.c-			MissileBlock.face = 0;
src/uqm/ships/thradd/thradd.c-			MissileBlock.index = GetFrameCount (
src/uqm/ships/thradd/thradd.c:					StarShipPtr->RaceDescPtr->ship_data.special[0]
src/uqm/ships/thradd/thradd.c-					) - 1;
src/uqm/ships/thradd/thradd.c-			MissileBlock.sender = ElementPtr->playerNr;
src/uqm/ships/thradd/thradd.c-			MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/thradd/thradd.c-				InsertElement (hTrailElement, GetHeadElement ());
src/uqm/ships/thradd/thradd.c-
src/uqm/ships/thradd/thradd.c-				ProcessSound (SetAbsSoundIndex (
src/uqm/ships/thradd/thradd.c:						StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/thradd/thradd.c-			}
src/uqm/ships/thradd/thradd.c-		}
src/uqm/ships/thradd/thradd.c-	}
--
src/uqm/ships/druuge/druuge.c-		STARSHIP *StarShipPtr;
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-		GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/ships/druuge/druuge.c:		StarShipPtr->cur_status_flags &= ~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-		angle = FACING_TO_ANGLE (
src/uqm/ships/druuge/druuge.c-				GetFrameIndex (ElementPtr0->next.image.frame)
--
src/uqm/ships/druuge/druuge.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/druuge/druuge.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/druuge/druuge.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/druuge/druuge.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/druuge/druuge.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/druuge/druuge.c-	MissileBlock.index = MissileBlock.face;
src/uqm/ships/druuge/druuge.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/druuge/druuge.c-	MissileBlock.flags = IGNORE_SIMILAR;
--
src/uqm/ships/druuge/druuge.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/druuge/druuge.c:	if (StarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED)
src/uqm/ships/druuge/druuge.c-		lpEvalDesc->MoveState = ENTICE;
src/uqm/ships/druuge/druuge.c-	else if (lpEvalDesc->ObjectPtr
src/uqm/ships/druuge/druuge.c-			 && lpEvalDesc->which_turn <= (WORLD_TO_TURN ((MISSILE_RANGE << RESOLUTION_FACTOR) * 3 / 4)) >> RESOLUTION_FACTOR) // JMS_GFX
src/uqm/ships/druuge/druuge.c-	{
src/uqm/ships/druuge/druuge.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/druuge/druuge.c:		ship_flags = EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags;
src/uqm/ships/druuge/druuge.c:		EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags &=
src/uqm/ships/druuge/druuge.c-				~(FIRES_FORE | FIRES_RIGHT | FIRES_AFT | FIRES_LEFT);
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-		lpEvalDesc->MoveState = PURSUE;
--
src/uqm/ships/druuge/druuge.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/druuge/druuge.c-	if (EnemyStarShipPtr)
src/uqm/ships/druuge/druuge.c-	{
src/uqm/ships/druuge/druuge.c:		EnemyStarShipPtr->RaceDescPtr->ship_info.ship_flags = ship_flags;
src/uqm/ships/druuge/druuge.c-	}
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c:	if (!(StarShipPtr->cur_status_flags & SHIP_BEYOND_MAX_SPEED)
src/uqm/ships/druuge/druuge.c-			&& (lpEvalDesc->which_turn <= 12
src/uqm/ships/druuge/druuge.c-			|| (
src/uqm/ships/druuge/druuge.c-			ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr
src/uqm/ships/druuge/druuge.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn <= 6
src/uqm/ships/druuge/druuge.c-			)))
src/uqm/ships/druuge/druuge.c-	{
src/uqm/ships/druuge/druuge.c:		 StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/druuge/druuge.c-		 if (ShipPtr->thrust_wait < WEAPON_WAIT + 1)
src/uqm/ships/druuge/druuge.c-			ShipPtr->thrust_wait = WEAPON_WAIT + 1;
src/uqm/ships/druuge/druuge.c-	}
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c:	if ((StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/druuge/druuge.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level < WEAPON_ENERGY_COST
src/uqm/ships/druuge/druuge.c-			&& ShipPtr->crew_level > 1)
src/uqm/ships/druuge/druuge.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/druuge/druuge.c-	else
src/uqm/ships/druuge/druuge.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/druuge/druuge.c-}
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-static void
--
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/druuge/druuge.c-			/* if just fired cannon */
src/uqm/ships/druuge/druuge.c:	if ((StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/druuge/druuge.c:			&& StarShipPtr->weapon_counter ==
src/uqm/ships/druuge/druuge.c:			StarShipPtr->RaceDescPtr->characteristics.weapon_wait)
src/uqm/ships/druuge/druuge.c-	{
src/uqm/ships/druuge/druuge.c-		COUNT angle;
src/uqm/ships/druuge/druuge.c-		SDWORD cur_delta_x, cur_delta_y;
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c:		StarShipPtr->cur_status_flags &= ~SHIP_AT_MAX_SPEED;
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c:		angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing) + HALF_CIRCLE;
src/uqm/ships/druuge/druuge.c-		DeltaVelocityComponents (&ElementPtr->velocity,
src/uqm/ships/druuge/druuge.c-				COSINE (angle, RECOIL_VELOCITY),
src/uqm/ships/druuge/druuge.c-				SINE (angle, RECOIL_VELOCITY));
--
src/uqm/ships/druuge/druuge.c-	STARSHIP *StarShipPtr;
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/druuge/druuge.c:	if (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/druuge/druuge.c-	{
src/uqm/ships/druuge/druuge.c:		if (StarShipPtr->special_counter
src/uqm/ships/druuge/druuge.c-				|| ElementPtr->crew_level == 1
src/uqm/ships/druuge/druuge.c:				|| StarShipPtr->RaceDescPtr->ship_info.energy_level
src/uqm/ships/druuge/druuge.c:				== StarShipPtr->RaceDescPtr->ship_info.max_energy)
src/uqm/ships/druuge/druuge.c:			StarShipPtr->cur_status_flags &= ~SPECIAL;
src/uqm/ships/druuge/druuge.c-		else
src/uqm/ships/druuge/druuge.c-		{
src/uqm/ships/druuge/druuge.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/druuge/druuge.c-							/* BURN UP CREW */
src/uqm/ships/druuge/druuge.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c-			DeltaCrew (ElementPtr, -1);
src/uqm/ships/druuge/druuge.c-			DeltaEnergy (ElementPtr, SPECIAL_ENERGY_COST);
src/uqm/ships/druuge/druuge.c-
src/uqm/ships/druuge/druuge.c:			StarShipPtr->special_counter =
src/uqm/ships/druuge/druuge.c:					StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/druuge/druuge.c-		}
src/uqm/ships/druuge/druuge.c-	}
src/uqm/ships/druuge/druuge.c-}
--
src/uqm/ships/chmmr/chmmr.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	StarShipPtr->special_counter = ElementPtr->turn_wait;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:	if (StarShipPtr->hShip)
src/uqm/ships/chmmr/chmmr.c-	{
src/uqm/ships/chmmr/chmmr.c-		SDWORD dx, dy;
src/uqm/ships/chmmr/chmmr.c-		long dist;
src/uqm/ships/chmmr/chmmr.c-		HELEMENT hIonSpots;
src/uqm/ships/chmmr/chmmr.c-		ELEMENT *ShipPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		dx = ElementPtr->current.location.x - ShipPtr->current.location.x;
src/uqm/ships/chmmr/chmmr.c-		dy = ElementPtr->current.location.y - ShipPtr->current.location.y;
--
src/uqm/ships/chmmr/chmmr.c-					ShipPtr->current.location.y
src/uqm/ships/chmmr/chmmr.c-					+ SINE (angle, magnitude);
src/uqm/ships/chmmr/chmmr.c-			IonSpotsPtr->current.image.farray =
src/uqm/ships/chmmr/chmmr.c:					StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/chmmr/chmmr.c-			IonSpotsPtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/chmmr/chmmr.c:					StarShipPtr->RaceDescPtr->ship_data.weapon[0],
src/uqm/ships/chmmr/chmmr.c-					ANGLE_TO_FACING (FULL_CIRCLE) << 1
src/uqm/ships/chmmr/chmmr.c-					);
src/uqm/ships/chmmr/chmmr.c-
--
src/uqm/ships/chmmr/chmmr.c-			PutElement (hIonSpots);
src/uqm/ships/chmmr/chmmr.c-		}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
--
src/uqm/ships/chmmr/chmmr.c-	};
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	LaserBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/chmmr/chmmr.c:	GetFrameRect (SetAbsFrameIndex (StarShipPtr->RaceDescPtr->ship_data.weapon[0], LaserBlock.face), &r);
src/uqm/ships/chmmr/chmmr.c-	
src/uqm/ships/chmmr/chmmr.c-	LaserBlock.cx = DISPLAY_ALIGN (ShipPtr->next.location.x) + DISPLAY_TO_WORLD (r.corner.x);
src/uqm/ships/chmmr/chmmr.c-	LaserBlock.cy = DISPLAY_ALIGN (ShipPtr->next.location.y) + DISPLAY_TO_WORLD (r.corner.y);
--
src/uqm/ships/chmmr/chmmr.c-	LaserBlock.sender = ShipPtr->playerNr;
src/uqm/ships/chmmr/chmmr.c-	LaserBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/chmmr/chmmr.c-	LaserBlock.pixoffs = 0;
src/uqm/ships/chmmr/chmmr.c:	LaserBlock.color = cycle_array[StarShipPtr->special_counter];
src/uqm/ships/chmmr/chmmr.c-	LaserArray[0] = initialize_laser (&LaserBlock);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	if (LaserArray[0])
--
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		LaserPtr->mass_points = 2;
src/uqm/ships/chmmr/chmmr.c-		LaserPtr->death_func = laser_death;
src/uqm/ships/chmmr/chmmr.c:		LaserPtr->turn_wait = (BYTE)((StarShipPtr->special_counter + 1) % NUM_CYCLES);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		UnlockElement (LaserArray[0]);
src/uqm/ships/chmmr/chmmr.c-	}
--
src/uqm/ships/chmmr/chmmr.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/chmmr/chmmr.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/chmmr/chmmr.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/chmmr/chmmr.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/chmmr/chmmr.c:			&& !(StarShipPtr->ship_input_state & WEAPON)
src/uqm/ships/chmmr/chmmr.c-			&& lpEvalDesc->which_turn > 12
src/uqm/ships/chmmr/chmmr.c-			&& NORMALIZE_ANGLE (
src/uqm/ships/chmmr/chmmr.c-					GetVelocityTravelAngle (&ShipPtr->velocity)
src/uqm/ships/chmmr/chmmr.c-					- (GetVelocityTravelAngle (&lpEvalDesc->ObjectPtr->velocity)
src/uqm/ships/chmmr/chmmr.c-					+ HALF_CIRCLE) + QUADRANT
src/uqm/ships/chmmr/chmmr.c-					) > HALF_CIRCLE)
src/uqm/ships/chmmr/chmmr.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-static void
--
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:	if (StarShipPtr->cur_status_flags & WEAPON)
src/uqm/ships/chmmr/chmmr.c-	{
src/uqm/ships/chmmr/chmmr.c-		HELEMENT hMuzzleFlash;
src/uqm/ships/chmmr/chmmr.c-		ELEMENT *MuzzleFlashPtr;
--
src/uqm/ships/chmmr/chmmr.c-				&& GetPrimType (&(GLOBAL (DisplayArray))[
src/uqm/ships/chmmr/chmmr.c-						MuzzleFlashPtr->PrimIndex
src/uqm/ships/chmmr/chmmr.c-						]) == LINE_PRIM
src/uqm/ships/chmmr/chmmr.c:				&& !(StarShipPtr->special_counter & 1)
src/uqm/ships/chmmr/chmmr.c-				&& (hMuzzleFlash = AllocElement ()))
src/uqm/ships/chmmr/chmmr.c-		{
src/uqm/ships/chmmr/chmmr.c-			LockElement (hMuzzleFlash, &MuzzleFlashPtr);
--
src/uqm/ships/chmmr/chmmr.c-			MuzzleFlashPtr->life_span = 1;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-			MuzzleFlashPtr->current = ElementPtr->next;
src/uqm/ships/chmmr/chmmr.c:			MuzzleFlashPtr->current.image.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/chmmr/chmmr.c-			MuzzleFlashPtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/chmmr/chmmr.c:					StarShipPtr->RaceDescPtr->ship_data.weapon[0],
src/uqm/ships/chmmr/chmmr.c:					StarShipPtr->ShipFacing + ANGLE_TO_FACING (FULL_CIRCLE)
src/uqm/ships/chmmr/chmmr.c-					);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-			SetElementStarShip (MuzzleFlashPtr, StarShipPtr);
--
src/uqm/ships/chmmr/chmmr.c-		UnlockElement (GetTailElement ());
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:	if ((StarShipPtr->cur_status_flags & SPECIAL) && DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/chmmr/chmmr.c-	{
src/uqm/ships/chmmr/chmmr.c-		COUNT facing;
src/uqm/ships/chmmr/chmmr.c-		ELEMENT *ShipElementPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		LockElement (ElementPtr->hTarget, &ShipElementPtr);
src/uqm/ships/chmmr/chmmr.c:		ProcessSound (SetAbsSoundIndex (StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ShipElementPtr);
src/uqm/ships/chmmr/chmmr.c-		UnlockElement (ElementPtr->hTarget);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		facing = 0;
--
src/uqm/ships/chmmr/chmmr.c-				DWORD current_speed, max_speed;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-				// calculate tractor beam effect
src/uqm/ships/chmmr/chmmr.c:				angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ships/chmmr/chmmr.c-				dx = (ElementPtr->next.location.x
src/uqm/ships/chmmr/chmmr.c-						+ COSINE (angle, ((LASER_RANGE << RESOLUTION_FACTOR) / 3) // JMS_GFX
src/uqm/ships/chmmr/chmmr.c-						+ DISPLAY_TO_WORLD (CHMMR_OFFSET << RESOLUTION_FACTOR))) // JMS_GFX
--
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-				// set the effected ship's speed flags
src/uqm/ships/chmmr/chmmr.c-				current_speed = VelocitySquared (dx, dy);
src/uqm/ships/chmmr/chmmr.c:				max_speed = VelocitySquared (WORLD_TO_VELOCITY (EnemyStarShipPtr->RaceDescPtr->characteristics.max_thrust),0);
src/uqm/ships/chmmr/chmmr.c-				
src/uqm/ships/chmmr/chmmr.c:				EnemyStarShipPtr->cur_status_flags &= ~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/chmmr/chmmr.c-				if (current_speed > max_speed)
src/uqm/ships/chmmr/chmmr.c:					EnemyStarShipPtr->cur_status_flags |= (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/chmmr/chmmr.c-				else if (current_speed == max_speed)
src/uqm/ships/chmmr/chmmr.c:					EnemyStarShipPtr->cur_status_flags |= SHIP_AT_MAX_SPEED;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-				// add tractor beam graphical effects
src/uqm/ships/chmmr/chmmr.c-				for (i = 0; i < NUM_SHADOWS; ++i)
--
src/uqm/ships/chmmr/chmmr.c-		}
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:	StarShipPtr->special_counter = 0;
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-#define SATELLITE_OFFSET DISPLAY_TO_WORLD (64 << RESOLUTION_FACTOR) // JMS_GFX
--
src/uqm/ships/chmmr/chmmr.c-			);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	if (StarShipPtr->hShip)
src/uqm/ships/chmmr/chmmr.c-	{
src/uqm/ships/chmmr/chmmr.c-		SDWORD dx, dy;
src/uqm/ships/chmmr/chmmr.c-		ELEMENT *ShipPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:		StarShipPtr->RaceDescPtr->ship_info.ship_flags |= POINT_DEFENSE;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-		dx = (ShipPtr->next.location.x
src/uqm/ships/chmmr/chmmr.c-				+ COSINE (ElementPtr->turn_wait, SATELLITE_OFFSET))
--
src/uqm/ships/chmmr/chmmr.c-					SINE (angle, WORLD_TO_VELOCITY (DISPLAY_TO_WORLD (20 << RESOLUTION_FACTOR)))); // JMS_GFX
src/uqm/ships/chmmr/chmmr.c-		}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
--
src/uqm/ships/chmmr/chmmr.c-	hBestObject = 0;
src/uqm/ships/chmmr/chmmr.c-	best_dist = DEFENSE_RANGE + (1 << RESOLUTION_FACTOR); // JMS_GFX
src/uqm/ships/chmmr/chmmr.c-	weakest = 255;
src/uqm/ships/chmmr/chmmr.c:	LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/chmmr/chmmr.c-	LockElement (ElementPtr->hTarget, &SattPtr);
src/uqm/ships/chmmr/chmmr.c-	for (hObject = GetPredElement (ElementPtr);
src/uqm/ships/chmmr/chmmr.c-			hObject; hObject = hNextObject)
--
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	UnlockElement (ElementPtr->hTarget);
src/uqm/ships/chmmr/chmmr.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-static void
--
src/uqm/ships/chmmr/chmmr.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	StarShipPtr->RaceDescPtr->ship_info.ship_flags &= ~POINT_DEFENSE;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	ElementPtr->state_flags &= ~DISAPPEARING;
src/uqm/ships/chmmr/chmmr.c-	ElementPtr->state_flags |= NONSOLID | FINITE_LIFE | CHANGING;
--
src/uqm/ships/chmmr/chmmr.c-	STARSHIP *StarShipPtr;
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/chmmr/chmmr.c:	if (StarShipPtr->hShip)
src/uqm/ships/chmmr/chmmr.c-	{
src/uqm/ships/chmmr/chmmr.c:		LockElement (StarShipPtr->hShip, &ElementPtr);
src/uqm/ships/chmmr/chmmr.c-		for (i = 0; i < NUM_SATELLITES; ++i)
src/uqm/ships/chmmr/chmmr.c-		{
src/uqm/ships/chmmr/chmmr.c-			HELEMENT hSatellite;
--
src/uqm/ships/chmmr/chmmr.c-				SattPtr->current.location.y = ElementPtr->next.location.y
src/uqm/ships/chmmr/chmmr.c-						+ SINE (angle, SATELLITE_OFFSET);
src/uqm/ships/chmmr/chmmr.c-				SattPtr->current.image.farray =
src/uqm/ships/chmmr/chmmr.c:						StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/chmmr/chmmr.c-				SattPtr->current.image.frame = SetAbsFrameIndex (
src/uqm/ships/chmmr/chmmr.c:						StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/chmmr/chmmr.c-						(COUNT)TFB_Random () & 0x07
src/uqm/ships/chmmr/chmmr.c-						);
src/uqm/ships/chmmr/chmmr.c-
--
src/uqm/ships/chmmr/chmmr.c-				PutElement (hSatellite);
src/uqm/ships/chmmr/chmmr.c-			}
src/uqm/ships/chmmr/chmmr.c-		}
src/uqm/ships/chmmr/chmmr.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
--
src/uqm/ships/chmmr/chmmr.c-		PutElement (hSatellite);
src/uqm/ships/chmmr/chmmr.c-	}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c:	StarShipPtr->RaceDescPtr->preprocess_func = 0;
src/uqm/ships/chmmr/chmmr.c-}
src/uqm/ships/chmmr/chmmr.c-
src/uqm/ships/chmmr/chmmr.c-RACE_DESC*
--
src/uqm/ships/umgah/umgah.c-	STARSHIP *StarShipPtr;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/umgah/umgah.c:	StarShipPtr->RaceDescPtr->ship_data.special[0] =
src/uqm/ships/umgah/umgah.c:			SetRelFrameIndex (StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/umgah/umgah.c-			ANGLE_TO_FACING (FULL_CIRCLE));
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	ElementPtr->state_flags |= APPEARING;
--
src/uqm/ships/umgah/umgah.c-	if (lpEvalDesc->ObjectPtr && lpEvalDesc->MoveState == ENTICE)
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c-		if (lpEvalDesc->which_turn > 3
src/uqm/ships/umgah/umgah.c:				|| (StarShipPtr->old_status_flags & SPECIAL))
src/uqm/ships/umgah/umgah.c-			lpEvalDesc->ObjectPtr = 0;
src/uqm/ships/umgah/umgah.c-		else if ((lpEvalDesc->ObjectPtr->state_flags & FINITE_LIFE)
src/uqm/ships/umgah/umgah.c-				&& !(lpEvalDesc->ObjectPtr->state_flags & CREW_OBJECT))
--
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/umgah/umgah.c:	if (StarShipPtr->special_counter
src/uqm/ships/umgah/umgah.c-			|| ObjectsOfConcern[GRAVITY_MASS_INDEX].ObjectPtr
src/uqm/ships/umgah/umgah.c-			|| lpEvalDesc->ObjectPtr == 0)
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c:		StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = CLOSE_RANGE_WEAPON;
src/uqm/ships/umgah/umgah.c-		ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-		if (lpEvalDesc->which_turn < 16)
src/uqm/ships/umgah/umgah.c:			StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/umgah/umgah.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-	else
src/uqm/ships/umgah/umgah.c-	{
--
src/uqm/ships/umgah/umgah.c-			this_turn = (BYTE)lpEvalDesc->which_turn;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-		EnoughJuice = (BOOLEAN)((WORLD_TO_TURN (
src/uqm/ships/umgah/umgah.c:				JUMP_DIST * StarShipPtr->RaceDescPtr->ship_info.energy_level
src/uqm/ships/umgah/umgah.c-				/ SPECIAL_ENERGY_COST
src/uqm/ships/umgah/umgah.c-				) >> RESOLUTION_FACTOR) > this_turn); // JMS_GFX
src/uqm/ships/umgah/umgah.c-		delta_x = lpEvalDesc->ObjectPtr->next.location.x -
--
src/uqm/ships/umgah/umgah.c-				ShipPtr->next.location.y;
src/uqm/ships/umgah/umgah.c-		EnemyBehind = (BOOLEAN)(NORMALIZE_ANGLE (
src/uqm/ships/umgah/umgah.c-				ARCTAN (delta_x, delta_y)
src/uqm/ships/umgah/umgah.c:				- (FACING_TO_ANGLE (StarShipPtr->ShipFacing)
src/uqm/ships/umgah/umgah.c-				+ HALF_CIRCLE) + (OCTANT + (OCTANT >> 2))
src/uqm/ships/umgah/umgah.c-				) <= ((OCTANT + (OCTANT >> 2)) << 1));
src/uqm/ships/umgah/umgah.c-		
src/uqm/ships/umgah/umgah.c-		GetElementStarShip (lpEvalDesc->ObjectPtr, &EnemyStarShipPtr);
src/uqm/ships/umgah/umgah.c-		if (EnoughJuice
src/uqm/ships/umgah/umgah.c:				&& ((StarShipPtr->old_status_flags & SPECIAL)
src/uqm/ships/umgah/umgah.c-				|| EnemyBehind
src/uqm/ships/umgah/umgah.c-				|| (this_turn > 6
src/uqm/ships/umgah/umgah.c-				&& MANEUVERABILITY (
src/uqm/ships/umgah/umgah.c:				&EnemyStarShipPtr->RaceDescPtr->cyborg_control
src/uqm/ships/umgah/umgah.c-				) <= RESOLUTION_COMPENSATED(SLOW_SHIP)) // JMS_GFX
src/uqm/ships/umgah/umgah.c-				|| (this_turn >= 16 && this_turn <= 24)))
src/uqm/ships/umgah/umgah.c:			StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = (LONG_RANGE_WEAPON << 3);
src/uqm/ships/umgah/umgah.c-		else
src/uqm/ships/umgah/umgah.c:			StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = CLOSE_RANGE_WEAPON;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-		ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c:		if (StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange == CLOSE_RANGE_WEAPON)
src/uqm/ships/umgah/umgah.c:			StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/umgah/umgah.c-		else
src/uqm/ships/umgah/umgah.c-		{
src/uqm/ships/umgah/umgah.c-			BOOLEAN LinedUp;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c:			StarShipPtr->ship_input_state &= ~THRUST;
src/uqm/ships/umgah/umgah.c-			LinedUp = (BOOLEAN)(ShipPtr->turn_wait == 0
src/uqm/ships/umgah/umgah.c:					&& !(StarShipPtr->old_status_flags & (LEFT | RIGHT)));
src/uqm/ships/umgah/umgah.c:			if (((StarShipPtr->old_status_flags & SPECIAL)
src/uqm/ships/umgah/umgah.c:					&& this_turn <= StarShipPtr->RaceDescPtr->characteristics.special_wait)
src/uqm/ships/umgah/umgah.c:					|| (!(StarShipPtr->old_status_flags & SPECIAL)
src/uqm/ships/umgah/umgah.c-					&& EnemyBehind && (LinedUp || this_turn < 16)))
src/uqm/ships/umgah/umgah.c-			{
src/uqm/ships/umgah/umgah.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/umgah/umgah.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait = this_turn;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-				/* don't want him backing straight into ship */
src/uqm/ships/umgah/umgah.c-				if (this_turn <= 8 && LinedUp)
src/uqm/ships/umgah/umgah.c-				{
src/uqm/ships/umgah/umgah.c-					if (TFB_Random () & 1)
src/uqm/ships/umgah/umgah.c:						StarShipPtr->ship_input_state |= LEFT;
src/uqm/ships/umgah/umgah.c-					else
src/uqm/ships/umgah/umgah.c:						StarShipPtr->ship_input_state |= RIGHT;
src/uqm/ships/umgah/umgah.c-				}
src/uqm/ships/umgah/umgah.c-			}
src/uqm/ships/umgah/umgah.c:			else if (StarShipPtr->old_status_flags & SPECIAL)
src/uqm/ships/umgah/umgah.c-			{
src/uqm/ships/umgah/umgah.c:				StarShipPtr->ship_input_state &= ~(SPECIAL | LEFT | RIGHT);
src/uqm/ships/umgah/umgah.c:				StarShipPtr->ship_input_state |= THRUST;
src/uqm/ships/umgah/umgah.c-			}
src/uqm/ships/umgah/umgah.c-		}
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-		if (this_turn < 16 && !EnemyBehind)
src/uqm/ships/umgah/umgah.c:			StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c:	if (!(StarShipPtr->ship_input_state & SPECIAL))
src/uqm/ships/umgah/umgah.c:		StarShipPtr->RaceDescPtr->characteristics.special_wait = 0xFF;
src/uqm/ships/umgah/umgah.c-}
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-static COUNT
--
src/uqm/ships/umgah/umgah.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/umgah/umgah.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/umgah/umgah.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/umgah/umgah.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/umgah/umgah.c:	MissileBlock.face = StarShipPtr->ShipFacing;
src/uqm/ships/umgah/umgah.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/umgah/umgah.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/umgah/umgah.c-	MissileBlock.pixoffs = UMGAH_OFFSET;
--
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	// This func is called every frame while the player is holding down WEAPON
src/uqm/ships/umgah/umgah.c-	// Don't reset the cone FRAME to the first image every time
src/uqm/ships/umgah/umgah.c:	if (ShipPtr->next.image.frame != (FRAME) StarShipPtr->RaceDescPtr->data)
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c:		StarShipPtr->RaceDescPtr->data = (intptr_t) ShipPtr->next.image.frame;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c:		StarShipPtr->RaceDescPtr->ship_data.special[0] =
src/uqm/ships/umgah/umgah.c-				SetAbsFrameIndex (
src/uqm/ships/umgah/umgah.c:				StarShipPtr->RaceDescPtr->ship_data.special[0],
src/uqm/ships/umgah/umgah.c:				StarShipPtr->ShipFacing
src/uqm/ships/umgah/umgah.c-				);
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-	
src/uqm/ships/umgah/umgah.c:	MissileBlock.index = GetFrameIndex (StarShipPtr->RaceDescPtr->ship_data.special[0]);
src/uqm/ships/umgah/umgah.c-	ConeArray[0] = initialize_missile (&MissileBlock);
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	if (ConeArray[0])
--
src/uqm/ships/umgah/umgah.c-		ConePtr->next = ConePtr->current;
src/uqm/ships/umgah/umgah.c-		InitIntersectStartPoint (ConePtr);
src/uqm/ships/umgah/umgah.c-		InitIntersectEndPoint (ConePtr);
src/uqm/ships/umgah/umgah.c:		ConePtr->IntersectControl.IntersectStamp.frame = StarShipPtr->RaceDescPtr->ship_data.special[0];
src/uqm/ships/umgah/umgah.c-		UnlockElement (ConeArray[0]);
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-
--
src/uqm/ships/umgah/umgah.c-	STARSHIP *StarShipPtr;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/umgah/umgah.c:	if (StarShipPtr->special_counter > 0)
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c:		StarShipPtr->special_counter = 0;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-		ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/ships/umgah/umgah.c-	}
--
src/uqm/ships/umgah/umgah.c-	if (ElementPtr->state_flags & APPEARING)
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c-		// Reset the value just in case
src/uqm/ships/umgah/umgah.c:		StarShipPtr->RaceDescPtr->data = 0;
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-	else
src/uqm/ships/umgah/umgah.c-	{
src/uqm/ships/umgah/umgah.c-		if (ElementPtr->thrust_wait == 0
src/uqm/ships/umgah/umgah.c:				&& (StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/umgah/umgah.c-				&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/umgah/umgah.c-		{
src/uqm/ships/umgah/umgah.c-			COUNT facing;
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c-			ProcessSound (SetAbsSoundIndex (
src/uqm/ships/umgah/umgah.c-							/* ZIP_BACKWARDS */
src/uqm/ships/umgah/umgah.c:					StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/umgah/umgah.c:			facing = FACING_TO_ANGLE (StarShipPtr->ShipFacing) + HALF_CIRCLE;
src/uqm/ships/umgah/umgah.c-			DeltaVelocityComponents (&ElementPtr->velocity,
src/uqm/ships/umgah/umgah.c-					COSINE (facing, WORLD_TO_VELOCITY (JUMP_DIST)),
src/uqm/ships/umgah/umgah.c-					SINE (facing, WORLD_TO_VELOCITY (JUMP_DIST)));
src/uqm/ships/umgah/umgah.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/umgah/umgah.c-					~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/umgah/umgah.c-
src/uqm/ships/umgah/umgah.c:			StarShipPtr->special_counter = SPECIAL_WAIT;
src/uqm/ships/umgah/umgah.c-		}
src/uqm/ships/umgah/umgah.c-	}
src/uqm/ships/umgah/umgah.c-}
--
src/uqm/ships/supox/supox.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/supox/supox.c:	if (StarShipPtr->special_counter || lpEvalDesc->ObjectPtr == 0)
src/uqm/ships/supox/supox.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/supox/supox.c-	else
src/uqm/ships/supox/supox.c-	{
src/uqm/ships/supox/supox.c-		BOOLEAN LinedUp;
--
src/uqm/ships/supox/supox.c-		direction_angle = ARCTAN (delta_x, delta_y);
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-		LinedUp = (BOOLEAN)(NORMALIZE_ANGLE (NORMALIZE_ANGLE (direction_angle
src/uqm/ships/supox/supox.c:				- FACING_TO_ANGLE (StarShipPtr->ShipFacing))
src/uqm/ships/supox/supox.c-				+ QUADRANT) <= HALF_CIRCLE);
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-		if (!LinedUp
src/uqm/ships/supox/supox.c-				|| lpEvalDesc->which_turn > 20
src/uqm/ships/supox/supox.c-				|| NORMALIZE_ANGLE (
src/uqm/ships/supox/supox.c-				lpEvalDesc->facing
src/uqm/ships/supox/supox.c:				- (FACING_TO_ANGLE (StarShipPtr->ShipFacing)
src/uqm/ships/supox/supox.c-				+ HALF_CIRCLE) + OCTANT
src/uqm/ships/supox/supox.c-				) > QUADRANT)
src/uqm/ships/supox/supox.c:			StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/supox/supox.c-		else if (LinedUp && lpEvalDesc->which_turn <= 12)
src/uqm/ships/supox/supox.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c:		if (StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/supox/supox.c-			lpEvalDesc->MoveState = PURSUE;
src/uqm/ships/supox/supox.c-	}
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-	ship_intelligence (ShipPtr,
src/uqm/ships/supox/supox.c-			ObjectsOfConcern, ConcernCounter);
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c:	if (StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/supox/supox.c:		StarShipPtr->ship_input_state |= THRUST | WEAPON;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_WEAPON_INDEX];
src/uqm/ships/supox/supox.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/supox/supox.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/supox/supox.c-			&& lpEvalDesc->MoveState == AVOID
src/uqm/ships/supox/supox.c-			&& ShipPtr->turn_wait == 0)
src/uqm/ships/supox/supox.c-	{
src/uqm/ships/supox/supox.c:		StarShipPtr->ship_input_state &= ~THRUST;
src/uqm/ships/supox/supox.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/supox/supox.c:		if (!(StarShipPtr->cur_status_flags & (LEFT | RIGHT)))
src/uqm/ships/supox/supox.c:			StarShipPtr->ship_input_state |= 1 << ((BYTE)TFB_Random () & 1);
src/uqm/ships/supox/supox.c-		else
src/uqm/ships/supox/supox.c:			StarShipPtr->ship_input_state |=
src/uqm/ships/supox/supox.c:					StarShipPtr->cur_status_flags & (LEFT | RIGHT);
src/uqm/ships/supox/supox.c-	}
src/uqm/ships/supox/supox.c-}
src/uqm/ships/supox/supox.c-
--
src/uqm/ships/supox/supox.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/supox/supox.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/supox/supox.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/supox/supox.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/supox/supox.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/supox/supox.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/supox/supox.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/supox/supox.c-	MissileBlock.pixoffs = SUPOX_OFFSET;
--
src/uqm/ships/supox/supox.c-	STARSHIP *StarShipPtr;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/supox/supox.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/supox/supox.c-/*
src/uqm/ships/supox/supox.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST)
src/uqm/ships/supox/supox.c-*/
--
src/uqm/ships/supox/supox.c-		SIZE add_facing;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-		add_facing = 0;
src/uqm/ships/supox/supox.c:		if (StarShipPtr->cur_status_flags & THRUST)
src/uqm/ships/supox/supox.c-		{
src/uqm/ships/supox/supox.c-			if (ElementPtr->thrust_wait == 0)
src/uqm/ships/supox/supox.c-				++ElementPtr->thrust_wait;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c-			add_facing = ANGLE_TO_FACING (HALF_CIRCLE);
src/uqm/ships/supox/supox.c-		}
src/uqm/ships/supox/supox.c:		if (StarShipPtr->cur_status_flags & LEFT)
src/uqm/ships/supox/supox.c-		{
src/uqm/ships/supox/supox.c-			if (ElementPtr->turn_wait == 0)
src/uqm/ships/supox/supox.c-				++ElementPtr->turn_wait;
--
src/uqm/ships/supox/supox.c-			else
src/uqm/ships/supox/supox.c-				add_facing = -ANGLE_TO_FACING (QUADRANT);
src/uqm/ships/supox/supox.c-		}
src/uqm/ships/supox/supox.c:		else if (StarShipPtr->cur_status_flags & RIGHT)
src/uqm/ships/supox/supox.c-		{
src/uqm/ships/supox/supox.c-			if (ElementPtr->turn_wait == 0)
src/uqm/ships/supox/supox.c-				++ElementPtr->turn_wait;
--
src/uqm/ships/supox/supox.c-			COUNT facing;
src/uqm/ships/supox/supox.c-			STATUS_FLAGS thrust_status;
src/uqm/ships/supox/supox.c-
src/uqm/ships/supox/supox.c:			facing = StarShipPtr->ShipFacing;
src/uqm/ships/supox/supox.c:			StarShipPtr->ShipFacing = NORMALIZE_FACING (
src/uqm/ships/supox/supox.c-					facing + add_facing
src/uqm/ships/supox/supox.c-					);
src/uqm/ships/supox/supox.c-			thrust_status = inertial_thrust (ElementPtr);
src/uqm/ships/supox/supox.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/supox/supox.c-					~(SHIP_AT_MAX_SPEED
src/uqm/ships/supox/supox.c-					| SHIP_BEYOND_MAX_SPEED
src/uqm/ships/supox/supox.c-					| SHIP_IN_GRAVITY_WELL);
src/uqm/ships/supox/supox.c:			StarShipPtr->cur_status_flags |= thrust_status;
src/uqm/ships/supox/supox.c:			StarShipPtr->ShipFacing = facing;
src/uqm/ships/supox/supox.c-		}
src/uqm/ships/supox/supox.c-	}
src/uqm/ships/supox/supox.c-}
--
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c-		PaidFor = FALSE;
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c:		LockElement (StarShipPtr->hShip, &ShipPtr);
src/uqm/ships/human/human.c-		for (hObject = GetTailElement (); hObject; hObject = hNextObject)
src/uqm/ships/human/human.c-		{
src/uqm/ships/human/human.c-			ELEMENT *ObjectPtr;
--
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c-						ProcessSound (SetAbsSoundIndex (
src/uqm/ships/human/human.c-										/* POINT_DEFENSE_LASER */
src/uqm/ships/human/human.c:								StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/human/human.c:						StarShipPtr->special_counter =
src/uqm/ships/human/human.c:								StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/human/human.c-						PaidFor = TRUE;
src/uqm/ships/human/human.c-					}
src/uqm/ships/human/human.c-
--
src/uqm/ships/human/human.c-			}
src/uqm/ships/human/human.c-			UnlockElement (hObject);
src/uqm/ships/human/human.c-		}
src/uqm/ships/human/human.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/ships/human/human.c-	}
src/uqm/ships/human/human.c-}
src/uqm/ships/human/human.c-
--
src/uqm/ships/human/human.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/human/human.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/human/human.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/human/human.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/human/human.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/human/human.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/human/human.c-	MissileBlock.flags = 0;
src/uqm/ships/human/human.c-	MissileBlock.pixoffs = HUMAN_OFFSET;
--
src/uqm/ships/human/human.c-	STARSHIP *StarShipPtr;
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/human/human.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/human/human.c-			&& ((ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr != NULL
src/uqm/ships/human/human.c-			&& ObjectsOfConcern[ENEMY_WEAPON_INDEX].which_turn <= 2)
src/uqm/ships/human/human.c-			|| (ObjectsOfConcern[ENEMY_SHIP_INDEX].ObjectPtr != NULL
src/uqm/ships/human/human.c-			&& ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn <= 4)))
src/uqm/ships/human/human.c:		StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/human/human.c-	else
src/uqm/ships/human/human.c:		StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/human/human.c-	ObjectsOfConcern[ENEMY_WEAPON_INDEX].ObjectPtr = NULL;
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c-	ship_intelligence (ShipPtr,
src/uqm/ships/human/human.c-			ObjectsOfConcern, ConcernCounter);
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c:	if (StarShipPtr->weapon_counter == 0)
src/uqm/ships/human/human.c-	{
src/uqm/ships/human/human.c-		if (ObjectsOfConcern[ENEMY_SHIP_INDEX].ObjectPtr
src/uqm/ships/human/human.c:				&& (!(StarShipPtr->ship_input_state & (LEFT | RIGHT /* | THRUST */))
src/uqm/ships/human/human.c-				|| ObjectsOfConcern[ENEMY_SHIP_INDEX].which_turn <= 12))
src/uqm/ships/human/human.c:			StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/human/human.c-	}
src/uqm/ships/human/human.c-}
src/uqm/ships/human/human.c-
--
src/uqm/ships/human/human.c-	STARSHIP *StarShipPtr;
src/uqm/ships/human/human.c-
src/uqm/ships/human/human.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/human/human.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/human/human.c:			&& StarShipPtr->special_counter == 0)
src/uqm/ships/human/human.c-	{
src/uqm/ships/human/human.c-		spawn_point_defense (ElementPtr);
src/uqm/ships/human/human.c-	}
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	STARSHIP *EnemyStarShipPtr = NULL;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:	CanTransform = (BOOLEAN)(StarShipPtr->special_counter == 0
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			&& StarShipPtr->RaceDescPtr->ship_info.energy_level >=
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->characteristics.special_energy_cost);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	if (lpEvalDesc->ObjectPtr)
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	if (CanTransform
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			&& !(StarShipPtr->ship_input_state & WEAPON))
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		SDWORD delta_x, delta_y;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		COUNT travel_angle, direction_angle;
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		if (ShipPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.ship)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			if (lpEvalDesc->which_turn > 8)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				if (MANEUVERABILITY (&EnemyStarShipPtr->RaceDescPtr->cyborg_control) <= RESOLUTION_COMPENSATED(SLOW_SHIP) // JMS_GFX
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						|| NORMALIZE_ANGLE (
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-								direction_angle - travel_angle + QUADRANT
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-								) > HALF_CIRCLE)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:					StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		else
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						|| NORMALIZE_ANGLE (
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-								direction_angle - travel_angle + OCTANT
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-								) <= QUADRANT)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:					StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			else if (lpEvalDesc->which_turn > 32
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					&& NORMALIZE_ANGLE (
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-							direction_angle - travel_angle + QUADRANT
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-							) > HALF_CIRCLE)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:	if (ShipPtr->current.image.farray == StarShipPtr->RaceDescPtr->ship_data.special)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		if (!(StarShipPtr->ship_input_state & SPECIAL)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-				&& lpEvalDesc->ObjectPtr)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->ship_input_state |= WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		else
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->ship_input_state &= ~WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	STARSHIP *StarShipPtr;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:	facing = StarShipPtr->ShipFacing;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	angle = FACING_TO_ANGLE (facing);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	cx = ShipPtr->next.location.x + COSINE (angle, CENTER_OFFS);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	cy = ShipPtr->next.location.y + SINE (angle, CENTER_OFFS);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:	if (ShipPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.ship)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-#define WING_OFFS DISPLAY_TO_WORLD (10 << RESOLUTION_FACTOR) // JMS_GFX
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		COORD ex, ey;
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		MISSILE_BLOCK TorpBlock;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		ELEMENT *TorpPtr;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		TorpBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		TorpBlock.sender = ShipPtr->playerNr;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		TorpBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		TorpBlock.pixoffs = 0;
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						/* TRANSFORM */
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ElementPtr);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		StarShipPtr->weapon_counter = 0;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		/* Swap characteristics descriptors around */
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		otherwing_desc = (CHARACTERISTIC_STUFF *)StarShipPtr->RaceDescPtr->data;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		t = *otherwing_desc;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		*otherwing_desc = StarShipPtr->RaceDescPtr->characteristics;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		StarShipPtr->RaceDescPtr->characteristics = t;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		StarShipPtr->RaceDescPtr->cyborg_control.ManeuverabilityIndex = 0;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		if (ElementPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.special)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = (LONG_RANGE_WEAPON - 1) << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_info.ship_flags &= ~IMMEDIATE_WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_info.ship_flags |= SEEKING_WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_data.ship_sounds =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:					SetAbsSoundIndex (StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 2);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->cur_status_flags &=
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		else
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->cyborg_control.WeaponRange = CLOSE_RANGE_WEAPON << RESOLUTION_FACTOR; // JMS_GFX
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_info.ship_flags &= ~SEEKING_WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_info.ship_flags |= IMMEDIATE_WEAPON;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			StarShipPtr->RaceDescPtr->ship_data.ship_sounds =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:					SetAbsSoundIndex (StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 0);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			if (StarShipPtr->cur_status_flags
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				StarShipPtr->cur_status_flags |=
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	}
--
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	if (!(ElementPtr->state_flags & APPEARING))
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:		if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				&& StarShipPtr->special_counter == 0)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			/* Either we transform or text will flash */
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:			if (DeltaEnergy (ElementPtr, -StarShipPtr->RaceDescPtr->characteristics.special_energy_cost))
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			{
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				if (ElementPtr->next.image.farray == StarShipPtr->RaceDescPtr->ship_data.ship)
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					ElementPtr->next.image.farray =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:							StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-				else
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-					ElementPtr->next.image.farray =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:							StarShipPtr->RaceDescPtr->ship_data.ship;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-				ElementPtr->next.image.frame =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						SetEquFrameIndex (ElementPtr->next.image.farray[0],
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-						ElementPtr->next.image.frame);
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-				ElementPtr->state_flags |= CHANGING;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:				StarShipPtr->special_counter =
src/uqm/ships/mmrnmhrm/mmrnmhrm.c:						StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-			}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-		}
src/uqm/ships/mmrnmhrm/mmrnmhrm.c-	}
--
src/uqm/ships/spathi/spathi.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/spathi/spathi.c-	ButtMissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/spathi/spathi.c-	ButtMissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/spathi/spathi.c:	ButtMissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.special;
src/uqm/ships/spathi/spathi.c-	ButtMissileBlock.face = ButtMissileBlock.index =
src/uqm/ships/spathi/spathi.c:			NORMALIZE_FACING (StarShipPtr->ShipFacing
src/uqm/ships/spathi/spathi.c-			+ ANGLE_TO_FACING (HALF_CIRCLE));
src/uqm/ships/spathi/spathi.c-	ButtMissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/spathi/spathi.c-	ButtMissileBlock.flags = 0;
--
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-		ProcessSound (SetAbsSoundIndex (
src/uqm/ships/spathi/spathi.c-					/* LAUNCH_BUTT_MISSILE */
src/uqm/ships/spathi/spathi.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1), ButtPtr);
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-		UnlockElement (ButtMissile);
src/uqm/ships/spathi/spathi.c-		PutElement (ButtMissile);
--
src/uqm/ships/spathi/spathi.c-	ship_intelligence (ShipPtr, ObjectsOfConcern, ConcernCounter);
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/spathi/spathi.c:	StarShipPtr->ship_input_state &= ~SPECIAL;
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-	lpEvalDesc = &ObjectsOfConcern[ENEMY_SHIP_INDEX];
src/uqm/ships/spathi/spathi.c:	if (StarShipPtr->special_counter == 0
src/uqm/ships/spathi/spathi.c-			&& lpEvalDesc->ObjectPtr
src/uqm/ships/spathi/spathi.c-			&& lpEvalDesc->which_turn <= 24)
src/uqm/ships/spathi/spathi.c-	{
--
src/uqm/ships/spathi/spathi.c-				);
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-		if (NORMALIZE_FACING (direction_facing
src/uqm/ships/spathi/spathi.c:				- (StarShipPtr->ShipFacing + ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/spathi/spathi.c-				+ ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/spathi/spathi.c-				<= ANGLE_TO_FACING (HALF_CIRCLE)
src/uqm/ships/spathi/spathi.c-				&& (lpEvalDesc->which_turn <= 8
--
src/uqm/ships/spathi/spathi.c-						))
src/uqm/ships/spathi/spathi.c-				+ ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/spathi/spathi.c-				<= ANGLE_TO_FACING (HALF_CIRCLE))
src/uqm/ships/spathi/spathi.c:				&& (!(StarShipPtr->cur_status_flags &
src/uqm/ships/spathi/spathi.c-				(SHIP_BEYOND_MAX_SPEED | SHIP_IN_GRAVITY_WELL))
src/uqm/ships/spathi/spathi.c-				|| NORMALIZE_FACING (direction_facing
src/uqm/ships/spathi/spathi.c-				- travel_facing + ANGLE_TO_FACING (QUADRANT))
src/uqm/ships/spathi/spathi.c-				<= ANGLE_TO_FACING (HALF_CIRCLE)))
src/uqm/ships/spathi/spathi.c:			StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/ships/spathi/spathi.c-	}
src/uqm/ships/spathi/spathi.c-}
src/uqm/ships/spathi/spathi.c-
--
src/uqm/ships/spathi/spathi.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/ships/spathi/spathi.c-	MissileBlock.cx = ShipPtr->next.location.x;
src/uqm/ships/spathi/spathi.c-	MissileBlock.cy = ShipPtr->next.location.y;
src/uqm/ships/spathi/spathi.c:	MissileBlock.farray = StarShipPtr->RaceDescPtr->ship_data.weapon;
src/uqm/ships/spathi/spathi.c:	MissileBlock.face = MissileBlock.index = StarShipPtr->ShipFacing;
src/uqm/ships/spathi/spathi.c-	MissileBlock.sender = ShipPtr->playerNr;
src/uqm/ships/spathi/spathi.c-	MissileBlock.flags = IGNORE_SIMILAR;
src/uqm/ships/spathi/spathi.c-	MissileBlock.pixoffs = SPATHI_FORWARD_OFFSET;
--
src/uqm/ships/spathi/spathi.c-	STARSHIP *StarShipPtr;
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ships/spathi/spathi.c:	if ((StarShipPtr->cur_status_flags & SPECIAL)
src/uqm/ships/spathi/spathi.c:			&& StarShipPtr->special_counter == 0
src/uqm/ships/spathi/spathi.c-			&& DeltaEnergy (ElementPtr, -SPECIAL_ENERGY_COST))
src/uqm/ships/spathi/spathi.c-	{
src/uqm/ships/spathi/spathi.c-		spawn_butt_missile (ElementPtr);
src/uqm/ships/spathi/spathi.c-
src/uqm/ships/spathi/spathi.c:		StarShipPtr->special_counter =
src/uqm/ships/spathi/spathi.c:				StarShipPtr->RaceDescPtr->characteristics.special_wait;
src/uqm/ships/spathi/spathi.c-	}
src/uqm/ships/spathi/spathi.c-}
src/uqm/ships/spathi/spathi.c-
--
src/uqm/process.c-								STARSHIP *StarShipPtr;
src/uqm/process.c-
src/uqm/process.c-								GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/process.c:								StarShipPtr->ShipFacing =
src/uqm/process.c-										GetFrameIndex (
src/uqm/process.c-										ElementPtr->next.image.frame);
src/uqm/process.c-							}
--
src/uqm/process.c-								STARSHIP *StarShipPtr;
src/uqm/process.c-
src/uqm/process.c-								GetElementStarShip (TestElementPtr, &StarShipPtr);
src/uqm/process.c:								StarShipPtr->ShipFacing =
src/uqm/process.c-										GetFrameIndex (
src/uqm/process.c-										TestElementPtr->next.image.frame);
src/uqm/process.c-							}
--
src/uqm/planets/scan.c-		StarShipPtr = LockShipFrag (&GLOBAL (npc_built_ship_q),
src/uqm/planets/scan.c-				hStarShip);
src/uqm/planets/scan.c-		// Name Fwiffo
src/uqm/planets/scan.c:		StarShipPtr->captains_name_index = NAME_OFFSET +
src/uqm/planets/scan.c-				NUM_CAPTAINS_NAMES;
src/uqm/planets/scan.c-		UnlockShipFrag (&GLOBAL (npc_built_ship_q), hStarShip);
src/uqm/planets/scan.c-	}
--
src/uqm/planets/roster.c-		return FALSE;
src/uqm/planets/roster.c-
src/uqm/planets/roster.c-	hTemplate = GetStarShipFromIndex (&GLOBAL (avail_race_q),
src/uqm/planets/roster.c:			StarShipPtr->race_id);
src/uqm/planets/roster.c-	TemplatePtr = LockFleetInfo (&GLOBAL (avail_race_q), hTemplate);
src/uqm/planets/roster.c-
src/uqm/planets/roster.c:	StarShipPtr->crew_level += crew_delta;
src/uqm/planets/roster.c-
src/uqm/planets/roster.c:	if (StarShipPtr->crew_level == 0)
src/uqm/planets/roster.c:		StarShipPtr->crew_level = 1;
src/uqm/planets/roster.c:	else if (StarShipPtr->crew_level > TemplatePtr->crew_level &&
src/uqm/planets/roster.c-			crew_delta > 0)
src/uqm/planets/roster.c:		StarShipPtr->crew_level -= crew_delta;
src/uqm/planets/roster.c-	else
src/uqm/planets/roster.c-	{
src/uqm/planets/roster.c:		if (StarShipPtr->crew_level >= TemplatePtr->crew_level)
src/uqm/planets/roster.c:			sprintf (buf, "%u", StarShipPtr->crew_level);
src/uqm/planets/roster.c-		else
src/uqm/planets/roster.c-			sprintf (buf, "%u/%u",
src/uqm/planets/roster.c:					StarShipPtr->crew_level,
src/uqm/planets/roster.c-					TemplatePtr->crew_level);
src/uqm/planets/roster.c-
src/uqm/planets/roster.c-		DrawStatusMessage (buf);
--
src/uqm/tactrans.c-		UnlockElement (hElement);
src/uqm/tactrans.c-
src/uqm/tactrans.c-		if (StarShipPtr && StarShipPtr != TestStarShipPtr
src/uqm/tactrans.c:				&& StarShipPtr->RaceDescPtr->ship_info.crew_level == 0)
src/uqm/tactrans.c-			return FALSE;
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-
--
src/uqm/tactrans.c-	GetElementStarShip (DeadShipPtr, &DeadStarShipPtr);
src/uqm/tactrans.c-	{
src/uqm/tactrans.c-		// Ship explosion has finished, or ship has just warped out
src/uqm/tactrans.c:		// if DeadStarShipPtr->crew_level != 0
src/uqm/tactrans.c-		BOOLEAN MusicStarted;
src/uqm/tactrans.c-		HELEMENT hElement, hSuccElement;
src/uqm/tactrans.c-
src/uqm/tactrans.c-		/* Record crew left after the battle */
src/uqm/tactrans.c:		DeadStarShipPtr->crew_level =
src/uqm/tactrans.c:				DeadStarShipPtr->RaceDescPtr->ship_info.crew_level;
src/uqm/tactrans.c-
src/uqm/tactrans.c-		MusicStarted = FALSE;
src/uqm/tactrans.c-
--
src/uqm/tactrans.c-			}
src/uqm/tactrans.c-
src/uqm/tactrans.c-			if (StarShipPtr
src/uqm/tactrans.c:					&& (StarShipPtr->cur_status_flags & PLAY_VICTORY_DITTY))
src/uqm/tactrans.c-			{
src/uqm/tactrans.c-				// StarShipPtr points to the remaining ship.
src/uqm/tactrans.c-				MusicStarted = TRUE;
src/uqm/tactrans.c-				PlayDitty (StarShipPtr);
src/uqm/tactrans.c:				StarShipPtr->cur_status_flags &= ~PLAY_VICTORY_DITTY;
src/uqm/tactrans.c-			}
src/uqm/tactrans.c-
src/uqm/tactrans.c-			UnlockElement (hElement);
--
src/uqm/tactrans.c-		SetElementStarShip (DeadShipPtr, 0);
src/uqm/tactrans.c-		RestartMusic = OpponentAlive (DeadStarShipPtr);
src/uqm/tactrans.c-
src/uqm/tactrans.c:		if (DeadStarShipPtr->RaceDescPtr->uninit_func != NULL)
src/uqm/tactrans.c:			(*DeadStarShipPtr->RaceDescPtr->uninit_func) (
src/uqm/tactrans.c:					DeadStarShipPtr->RaceDescPtr);
src/uqm/tactrans.c:		free_ship (DeadStarShipPtr->RaceDescPtr, TRUE, TRUE);
src/uqm/tactrans.c:		DeadStarShipPtr->RaceDescPtr = 0;
src/uqm/tactrans.c-		
src/uqm/tactrans.c-		// Graphics are batched while the draw queue is processed,
src/uqm/tactrans.c-		// but we are going to draw the ship selection box now
--
src/uqm/tactrans.c-		}
src/uqm/tactrans.c-#endif  /* NETPLAY */
src/uqm/tactrans.c-
src/uqm/tactrans.c:		if (!FleetIsInfinite (DeadStarShipPtr->playerNr))
src/uqm/tactrans.c-		{	// This may be a dead ship (crew_level == 0) or a warped out ship
src/uqm/tactrans.c-			UpdateShipFragCrew (DeadStarShipPtr);
src/uqm/tactrans.c-			// Deactivate the ship (cannot be selected)
src/uqm/tactrans.c:			DeadStarShipPtr->SpeciesID = NO_ID;
src/uqm/tactrans.c-		}
src/uqm/tactrans.c-
src/uqm/tactrans.c:		if (GetNextStarShip (DeadStarShipPtr, DeadStarShipPtr->playerNr))
src/uqm/tactrans.c-		{
src/uqm/tactrans.c-#ifdef NETPLAY
src/uqm/tactrans.c-			{
--
src/uqm/tactrans.c-	{	// Not running away and not reincarnating (Pkunk)
src/uqm/tactrans.c-		// When a ship tries to run away, it is (dis)counted in DoRunAway(),
src/uqm/tactrans.c-		// so when it dies while running away, we will not count it again
src/uqm/tactrans.c:		assert (StarShipPtr->playerNr >= 0);
src/uqm/tactrans.c:		battle_counter[StarShipPtr->playerNr]--;
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-
src/uqm/tactrans.c-	VictoriousStarShipPtr = NULL;
--
src/uqm/tactrans.c-				&& ElementPtr->mass_points <= MAX_SHIP_MASS)
src/uqm/tactrans.c-		{
src/uqm/tactrans.c-			GetElementStarShip (ElementPtr, &VictoriousStarShipPtr);
src/uqm/tactrans.c:			if (VictoriousStarShipPtr->RaceDescPtr->ship_info.crew_level == 0)
src/uqm/tactrans.c-				VictoriousStarShipPtr = NULL;
src/uqm/tactrans.c-
src/uqm/tactrans.c-			UnlockElement (hElement);
--
src/uqm/tactrans.c-		UnlockElement (hElement);
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-
src/uqm/tactrans.c:	StarShipPtr->cur_status_flags &= ~PLAY_VICTORY_DITTY;
src/uqm/tactrans.c-
src/uqm/tactrans.c-	DeltaEnergy (ShipPtr,
src/uqm/tactrans.c:			-(SIZE)StarShipPtr->RaceDescPtr->ship_info.energy_level);
src/uqm/tactrans.c-
src/uqm/tactrans.c-	ShipPtr->life_span = NUM_EXPLOSION_FRAMES * 3;
src/uqm/tactrans.c-	ShipPtr->state_flags &= ~DISAPPEARING;
--
src/uqm/tactrans.c-	if (ShipPtr->crew_level) /* only happens for shofixti self-destruct */
src/uqm/tactrans.c-	{
src/uqm/tactrans.c-		PlaySound (SetAbsSoundIndex (
src/uqm/tactrans.c:				StarShipPtr->RaceDescPtr->ship_data.ship_sounds, 1),
src/uqm/tactrans.c-				CalcSoundPosition (ShipPtr), ShipPtr,
src/uqm/tactrans.c-				GAME_SOUND_PRIORITY + 1);
src/uqm/tactrans.c-
--
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-
src/uqm/tactrans.c-	if (VictoriousStarShipPtr != NULL)
src/uqm/tactrans.c:		VictoriousStarShipPtr->cur_status_flags |= PLAY_VICTORY_DITTY;
src/uqm/tactrans.c-
src/uqm/tactrans.c-	// The winner is set once per battle. If both ships die, this function is
src/uqm/tactrans.c-	// called twice, once for each ship. We need to preserve the winner
--
src/uqm/tactrans.c-		STARSHIP *StarShipPtr;
src/uqm/tactrans.c-
src/uqm/tactrans.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/tactrans.c:		angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing) + HALF_CIRCLE;
src/uqm/tactrans.c:		GetFrameRect (StarShipPtr->RaceDescPtr->ship_data.ship[0], &r);
src/uqm/tactrans.c-		r.extent.height = DISPLAY_TO_WORLD (r.extent.height + r.corner.y);
src/uqm/tactrans.c-
src/uqm/tactrans.c-		InsertElement (hIonElement, GetHeadElement ());
--
src/uqm/tactrans.c-		STARSHIP *StarShipPtr;
src/uqm/tactrans.c-		
src/uqm/tactrans.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/tactrans.c:		LockElement (StarShipPtr->hShip, &ShipImagePtr);
src/uqm/tactrans.c-
src/uqm/tactrans.c-		if (!(ShipImagePtr->state_flags & NONSOLID))
src/uqm/tactrans.c-		{
--
src/uqm/tactrans.c-
src/uqm/tactrans.c-			PutElement (hShipImage);
src/uqm/tactrans.c-
src/uqm/tactrans.c:			angle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/tactrans.c-
src/uqm/tactrans.c-			LockElement (hShipImage, &ShipImagePtr);
src/uqm/tactrans.c-			ShipImagePtr->playerNr = NEUTRAL_PLAYER_NUM;
--
src/uqm/tactrans.c-			UnlockElement (hShipImage);
src/uqm/tactrans.c-		}
src/uqm/tactrans.c-
src/uqm/tactrans.c:		UnlockElement (StarShipPtr->hShip);
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-}
src/uqm/tactrans.c-
--
src/uqm/tactrans.c-	}
src/uqm/tactrans.c-
src/uqm/tactrans.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/tactrans.c:	StarShipPtr->cur_status_flags &=
src/uqm/tactrans.c-			~(LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/tactrans.c-			// Ignore control input when fleeing.
src/uqm/tactrans.c-	PreProcessStatus (ElementPtr);
--
src/uqm/collide.c-				STARSHIP *StarShipPtr;
src/uqm/collide.c-
src/uqm/collide.c-				GetElementStarShip (ElementPtr0, &StarShipPtr);
src/uqm/collide.c:				StarShipPtr->cur_status_flags &=
src/uqm/collide.c-						~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/collide.c-				if (!(ElementPtr0->state_flags & DEFY_PHYSICS))
src/uqm/collide.c-				{
--
src/uqm/collide.c-				STARSHIP *StarShipPtr;
src/uqm/collide.c-
src/uqm/collide.c-				GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/collide.c:				StarShipPtr->cur_status_flags &=
src/uqm/collide.c-						~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/collide.c-				if (!(ElementPtr1->state_flags & DEFY_PHYSICS))
src/uqm/collide.c-				{
--
src/uqm/uqmdebug.c-		return;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c-	StarShipPtr = findPlayerShip (RPG_PLAYER_NUM);
src/uqm/uqmdebug.c:	if (StarShipPtr == NULL || StarShipPtr->RaceDescPtr == NULL)
src/uqm/uqmdebug.c-		return;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c:	delta = StarShipPtr->RaceDescPtr->ship_info.max_crew -
src/uqm/uqmdebug.c:			StarShipPtr->RaceDescPtr->ship_info.crew_level;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c-	OldContext = SetContext (StatusContext);
src/uqm/uqmdebug.c:	DeltaCrew (StarShipPtr->hShip, delta);
src/uqm/uqmdebug.c-	SetContext (OldContext);
src/uqm/uqmdebug.c-}
src/uqm/uqmdebug.c-
--
src/uqm/uqmdebug.c-		return;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c-	StarShipPtr = findPlayerShip (RPG_PLAYER_NUM);
src/uqm/uqmdebug.c:	if (StarShipPtr == NULL || StarShipPtr->RaceDescPtr == NULL)
src/uqm/uqmdebug.c-		return;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c:	delta = StarShipPtr->RaceDescPtr->ship_info.max_energy -
src/uqm/uqmdebug.c:			StarShipPtr->RaceDescPtr->ship_info.energy_level;
src/uqm/uqmdebug.c-
src/uqm/uqmdebug.c-	OldContext = SetContext (StatusContext);
src/uqm/uqmdebug.c:	DeltaEnergy (StarShipPtr->hShip, delta);
src/uqm/uqmdebug.c-	SetContext (OldContext);
src/uqm/uqmdebug.c-}
src/uqm/uqmdebug.c-
--
src/uqm/supermelee/pickmele.c-	for (hShip = GetHeadLink (queue); hShip != 0; hShip = hNextShip)
src/uqm/supermelee/pickmele.c-	{
src/uqm/supermelee/pickmele.c-		STARSHIP *StarShipPtr = LockStarShip (queue, hShip);
src/uqm/supermelee/pickmele.c:		if (StarShipPtr->index == index)
src/uqm/supermelee/pickmele.c-		{
src/uqm/supermelee/pickmele.c-			hNextShip = hShip;
src/uqm/supermelee/pickmele.c:			if (StarShipPtr->SpeciesID == NO_ID)
src/uqm/supermelee/pickmele.c-				hShip = 0;
src/uqm/supermelee/pickmele.c-			UnlockStarShip (queue, hNextShip);
src/uqm/supermelee/pickmele.c-			break;
--
src/uqm/supermelee/pickmele.c-	for (hShip = GetHeadLink (queue); hShip != 0; hShip = hNextShip)
src/uqm/supermelee/pickmele.c-	{
src/uqm/supermelee/pickmele.c-		STARSHIP *StarShipPtr = LockStarShip (queue, hShip);
src/uqm/supermelee/pickmele.c:		if ((StarShipPtr->SpeciesID != NO_ID) && index-- == 0)
src/uqm/supermelee/pickmele.c-		{
src/uqm/supermelee/pickmele.c-			UnlockStarShip (queue, hShip);
src/uqm/supermelee/pickmele.c-			break;
--
src/uqm/supermelee/pickmele.c-{
src/uqm/supermelee/pickmele.c-	COUNT result;
src/uqm/supermelee/pickmele.c-	STARSHIP *StarShipPtr = LockStarShip (queue, hShip);
src/uqm/supermelee/pickmele.c:	result = StarShipPtr->index;
src/uqm/supermelee/pickmele.c-	UnlockStarShip (queue, hShip);
src/uqm/supermelee/pickmele.c-}
src/uqm/supermelee/pickmele.c-#endif
--
src/uqm/supermelee/pickmele.c-		STARSHIP *StarShipPtr = LockStarShip (queue, hBattleShip);
src/uqm/supermelee/pickmele.c-		hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/supermelee/pickmele.c-		
src/uqm/supermelee/pickmele.c:		if (StarShipPtr->SpeciesID == NO_ID)
src/uqm/supermelee/pickmele.c-			continue;  // Not active any more.
src/uqm/supermelee/pickmele.c-
src/uqm/supermelee/pickmele.c:		result += StarShipPtr->ship_cost;
src/uqm/supermelee/pickmele.c-
src/uqm/supermelee/pickmele.c-		UnlockStarShip (queue, hBattleShip);
src/uqm/supermelee/pickmele.c-	}
--
src/uqm/sis.c-		s.origin.x = RES_STAT_SCALE(pship_pos->x)
src/uqm/sis.c-			+ ((pship_pos - ship_pos) % 2 ? RES_CASE(0,3,5) : RES_CASE(0,-2,-2)); // JMS_GFX
src/uqm/sis.c-		s.origin.y = RES_STAT_SCALE(pship_pos->y) + RES_CASE(0,5,0); // JMS_GFX
src/uqm/sis.c:		s.frame = SetAbsFrameIndex (StarShipPtr->icons, 2);
src/uqm/sis.c-		LockMutex (GraphicsLock);
src/uqm/sis.c-		DrawStamp (&s);
src/uqm/sis.c-		UnlockMutex (GraphicsLock);
--
src/uqm/weapon.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/weapon.c-	if (modify_flags & MODIFY_IMAGE)
src/uqm/weapon.c-	{
src/uqm/weapon.c:		ShipIntersect.IntersectStamp.frame = SetAbsFrameIndex ( StarShipPtr->RaceDescPtr->ship_info.icons, 1);
src/uqm/weapon.c-		
src/uqm/weapon.c-		if (ShipIntersect.IntersectStamp.frame == 0)
src/uqm/weapon.c-			return (0);
--
src/uqm/weapon.c-	{
src/uqm/weapon.c-		or.corner.x += ObjectIntersect.IntersectStamp.origin.x;
src/uqm/weapon.c-		or.corner.y += ObjectIntersect.IntersectStamp.origin.y;
src/uqm/weapon.c:		InitShipStatus (&StarShipPtr->RaceDescPtr->ship_info, StarShipPtr, &or, FALSE);
src/uqm/weapon.c-	}
src/uqm/weapon.c-	else
src/uqm/weapon.c-	{
--
src/uqm/weapon.c-CheckTracking:
src/uqm/weapon.c-			GetElementStarShip (Trackee, &StarShipPtr);
src/uqm/weapon.c-			if (Trackee->life_span
src/uqm/weapon.c:					&& StarShipPtr->RaceDescPtr->ship_info.crew_level)
src/uqm/weapon.c-			{
src/uqm/weapon.c-				SIZE delta_x, delta_y, delta_facing;
src/uqm/weapon.c-
--
src/uqm/pickship.c-						hBattleShip = hNextShip)
src/uqm/pickship.c-				{
src/uqm/pickship.c-					StarShipPtr = LockStarShip (&race_q[0], hBattleShip);
src/uqm/pickship.c:					if (StarShipPtr->index == ship_index
src/uqm/pickship.c:							&& (StarShipPtr->SpeciesID != NO_ID))
src/uqm/pickship.c-					{
src/uqm/pickship.c-						UnlockStarShip (&race_q[0], hBattleShip);
src/uqm/pickship.c-						break;
--
src/uqm/pickship.c-				t.align = ALIGN_CENTER;
src/uqm/pickship.c-
src/uqm/pickship.c-				StarShipPtr = LockStarShip (&race_q[0], hBattleShip);
src/uqm/pickship.c:				if (StarShipPtr->captains_name_index == 0)
src/uqm/pickship.c-				{
src/uqm/pickship.c-					t.pStr = GLOBAL_SIS (CommanderName);
src/uqm/pickship.c-					t.CharCount = (COUNT)~0;
--
src/uqm/pickship.c-					STRING locString;
src/uqm/pickship.c-
src/uqm/pickship.c-					locString = SetAbsStringTableIndex (
src/uqm/pickship.c:							StarShipPtr->race_strings,
src/uqm/pickship.c:							StarShipPtr->captains_name_index);
src/uqm/pickship.c-					t.pStr = (UNICODE *)GetStringAddress (locString);
src/uqm/pickship.c-					t.CharCount = GetStringLength (locString);
src/uqm/pickship.c:					crew_level = StarShipPtr->crew_level;
src/uqm/pickship.c:					max_crew = StarShipPtr->max_crew;
src/uqm/pickship.c-				}
src/uqm/pickship.c-				UnlockStarShip (&race_q[0], hBattleShip);
src/uqm/pickship.c-
--
src/uqm/pickship.c-			else if (LastStarShipPtr != 0)
src/uqm/pickship.c-			{	// last ship was the flagship
src/uqm/pickship.c-#define RUN_AWAY_FUEL_COST (5 * FUEL_TANK_SCALE)
src/uqm/pickship.c:				if (LastStarShipPtr->crew_level == 0)
src/uqm/pickship.c-				{	// Died in the line of duty
src/uqm/pickship.c-					GLOBAL_SIS (CrewEnlisted) = (COUNT)~0;
src/uqm/pickship.c-				}
--
src/uqm/pickship.c-					// XXX: Note that if Syreen had a homeworld you could
src/uqm/pickship.c-					//   fight, all Syreen ships there would be crewed to
src/uqm/pickship.c-					//   the maximum, instead of the normal level
src/uqm/pickship.c:					LastStarShipPtr->crew_level = LastStarShipPtr->max_crew;
src/uqm/pickship.c:					LastStarShipPtr->playerNr = which_player;
src/uqm/pickship.c:					LastStarShipPtr->captains_name_index = PickCaptainName ();
src/uqm/pickship.c-				}
src/uqm/pickship.c-				battle_counter[which_player]++;
src/uqm/pickship.c-				
--
src/uqm/pickship.c-	{
src/uqm/pickship.c-		StarShipPtr = LockStarShip (&race_q[0], hBattleShip);
src/uqm/pickship.c-
src/uqm/pickship.c:		if (StarShipPtr->captains_name_index)
src/uqm/pickship.c-		{	// Escort ship, not SIS
src/uqm/pickship.c-			COUNT ship_index;
src/uqm/pickship.c-
src/uqm/pickship.c:			ship_index = StarShipPtr->index;
src/uqm/pickship.c-
src/uqm/pickship.c-			s.origin.x = pick_r.corner.x
src/uqm/pickship.c-				+ ((5 << RESOLUTION_FACTOR) + ((ICON_WIDTH + (4 << RESOLUTION_FACTOR))
--
src/uqm/pickship.c-			s.origin.y = pick_r.corner.y
src/uqm/pickship.c-				+ ((16 << RESOLUTION_FACTOR) + ((ICON_HEIGHT + (4 << RESOLUTION_FACTOR))
src/uqm/pickship.c-					* (ship_index / NUM_PICK_SHIP_COLUMNS))); // JMS_GFX
src/uqm/pickship.c:			s.frame = StarShipPtr->icons;
src/uqm/pickship.c-			r.corner = s.origin;
src/uqm/pickship.c-			SetContextForeGroundColor (BLACK_COLOR);
src/uqm/pickship.c-			DrawFilledRectangle (&r);
src/uqm/pickship.c:			if ((StarShipPtr->SpeciesID != NO_ID) || (StarShipPtr->crew_level == 0))
src/uqm/pickship.c-			{
src/uqm/pickship.c-				DrawStamp (&s);
src/uqm/pickship.c:				if (StarShipPtr->SpeciesID == NO_ID)
src/uqm/pickship.c-				{
src/uqm/pickship.c-					/* Dead ship - mark with an X. */
src/uqm/pickship.c-					s.origin.x -= (1 << RESOLUTION_FACTOR); // JMS_GFX
--
src/uqm/shipyard.c-	FLEET_INFO *TemplatePtr;
src/uqm/shipyard.c-
src/uqm/shipyard.c-	hTemplate = GetStarShipFromIndex (&GLOBAL (avail_race_q),
src/uqm/shipyard.c:			StarShipPtr->race_id);
src/uqm/shipyard.c-	TemplatePtr = LockFleetInfo (&GLOBAL (avail_race_q), hTemplate);
src/uqm/shipyard.c:	if (StarShipPtr->crew_level >= TemplatePtr->crew_level)
src/uqm/shipyard.c:		sprintf (buf, "%u", StarShipPtr->crew_level);
src/uqm/shipyard.c:	else if (StarShipPtr->crew_level == 0)
src/uqm/shipyard.c-		// XXX: "SCRAP" needs to be moved to starcon.txt
src/uqm/shipyard.c-		utf8StringCopy (buf, sizeof (buf), "SCRAP");
src/uqm/shipyard.c-	else
src/uqm/shipyard.c-		sprintf (buf, "%u/%u",
src/uqm/shipyard.c:				StarShipPtr->crew_level,
src/uqm/shipyard.c-				TemplatePtr->crew_level);
src/uqm/shipyard.c-	UnlockFleetInfo (&GLOBAL (avail_race_q), hTemplate);
src/uqm/shipyard.c-
--
src/uqm/shipyard.c-		SetContextForeGroundColor (BLACK_COLOR);
src/uqm/shipyard.c-		DrawFilledRectangle (&r);
src/uqm/shipyard.c-	}
src/uqm/shipyard.c:	SetContextForeGroundColor ((StarShipPtr->crew_level != 0) ?
src/uqm/shipyard.c-			(BUILD_COLOR (MAKE_RGB15 (0x00, 0x14, 0x00), 0x02)):
src/uqm/shipyard.c-			(BUILD_COLOR (MAKE_RGB15 (0x12, 0x00, 0x00), 0x2B)));
src/uqm/shipyard.c-	font_DrawText (&t);
--
src/uqm/shipyard.c-
src/uqm/shipyard.c-		pship_win_info->ship_s.origin.x = (SHIP_WIN_WIDTH >> 1) + 1;
src/uqm/shipyard.c-		pship_win_info->ship_s.origin.y = (SHIP_WIN_WIDTH >> 1);
src/uqm/shipyard.c:		pship_win_info->ship_s.frame = YankedStarShipPtr->melee_icon;
src/uqm/shipyard.c-
src/uqm/shipyard.c-		pship_win_info->finished_s.x = hangar_x_coords[which_window % HANGAR_SHIPS_ROW];
src/uqm/shipyard.c-		pship_win_info->finished_s.y = HANGAR_Y + (HANGAR_DY *
--
src/uqm/shipyard.c-			while (hStarShip)
src/uqm/shipyard.c-			{
src/uqm/shipyard.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c:				if (StarShipPtr->index > which_window)
src/uqm/shipyard.c-				{
src/uqm/shipyard.c-					UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c-					break;
--
src/uqm/shipyard.c-
src/uqm/shipyard.c-			hStarShip = hTailShip;
src/uqm/shipyard.c-			StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c:			StarShipPtr->index = which_window;
src/uqm/shipyard.c-			UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c-		}
src/uqm/shipyard.c-
--
src/uqm/shipyard.c-
src/uqm/shipyard.c-			pship_win_info->ship_s.origin.x = (SHIP_WIN_WIDTH >> 1) + 1;
src/uqm/shipyard.c-			pship_win_info->ship_s.origin.y = (SHIP_WIN_WIDTH >> 1);
src/uqm/shipyard.c:			pship_win_info->ship_s.frame = StarShipPtr->melee_icon;
src/uqm/shipyard.c-
src/uqm/shipyard.c:			which_window = StarShipPtr->index;
src/uqm/shipyard.c-			pship_win_info->finished_s.x = hangar_x_coords[which_window % HANGAR_SHIPS_ROW];
src/uqm/shipyard.c-			pship_win_info->finished_s.y = HANGAR_Y + (HANGAR_DY *
src/uqm/shipyard.c-					(which_window / HANGAR_SHIPS_ROW));
--
src/uqm/shipyard.c-			{
src/uqm/shipyard.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c-
src/uqm/shipyard.c:				if (StarShipPtr->index == pMS->CurState)
src/uqm/shipyard.c-				{
src/uqm/shipyard.c-					UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/shipyard.c-					break;
--
src/uqm/shipyard.c-					{
src/uqm/shipyard.c-						StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q),
src/uqm/shipyard.c-								hStarShip);
src/uqm/shipyard.c:						if (StarShipPtr->crew_level == 0)
src/uqm/shipyard.c-						{
src/uqm/shipyard.c-							SetFlashRect (NULL);
src/uqm/shipyard.c-							UnlockMutex (GraphicsLock);
--
src/uqm/shipyard.c-
src/uqm/shipyard.c-							hTemplate = GetStarShipFromIndex (
src/uqm/shipyard.c-									&GLOBAL (avail_race_q),
src/uqm/shipyard.c:									StarShipPtr->race_id);
src/uqm/shipyard.c-							TemplatePtr = LockFleetInfo (
src/uqm/shipyard.c-									&GLOBAL (avail_race_q), hTemplate);
src/uqm/shipyard.c-							if (GLOBAL_SIS (ResUnits) >=
src/uqm/shipyard.c-									(DWORD)GLOBAL (CrewCost)
src/uqm/shipyard.c:									&& StarShipPtr->crew_level <
src/uqm/shipyard.c:									StarShipPtr->max_crew &&
src/uqm/shipyard.c:									StarShipPtr->crew_level <
src/uqm/shipyard.c-									TemplatePtr->crew_level)
src/uqm/shipyard.c-							{
src/uqm/shipyard.c:								if (StarShipPtr->crew_level > 0)
src/uqm/shipyard.c-									DeltaSISGauges (0, 0, -GLOBAL (CrewCost));
src/uqm/shipyard.c-								else
src/uqm/shipyard.c-									DeltaSISGauges (0, 0, -(COUNT)ShipCost[
src/uqm/shipyard.c:											StarShipPtr->race_id]);
src/uqm/shipyard.c:								++StarShipPtr->crew_level;
src/uqm/shipyard.c-								crew_delta = 1;
src/uqm/shipyard.c-								ShowShipCrew (StarShipPtr, &pMS->flash_rect0);
src/uqm/shipyard.c-								r.corner.x = pMS->flash_rect0.corner.x;
--
src/uqm/shipyard.c-						}
src/uqm/shipyard.c-						else
src/uqm/shipyard.c-						{
src/uqm/shipyard.c:							if (StarShipPtr->crew_level > 0)
src/uqm/shipyard.c-							{
src/uqm/shipyard.c:								if (StarShipPtr->crew_level > 1)
src/uqm/shipyard.c-									DeltaSISGauges (0, 0, GLOBAL (CrewCost)
src/uqm/shipyard.c-											- (crew_bought ==
src/uqm/shipyard.c-											CREW_EXPENSE_THRESHOLD ? 2 : 0));
src/uqm/shipyard.c-								else
src/uqm/shipyard.c-									DeltaSISGauges (0, 0, (COUNT)ShipCost[
src/uqm/shipyard.c:											StarShipPtr->race_id]);
src/uqm/shipyard.c-								crew_delta = -1;
src/uqm/shipyard.c:								--StarShipPtr->crew_level;
src/uqm/shipyard.c-							}
src/uqm/shipyard.c-							else
src/uqm/shipyard.c-							{	// no crew to dismiss
--
src/uqm/encount.c-	HSTARSHIP hStarShip, hNextShip;
src/uqm/encount.c-	STARSHIP *ship;
src/uqm/encount.c-
src/uqm/encount.c:	frag_q = GetShipFragQueueForPlayer (StarShipPtr->playerNr);
src/uqm/encount.c:	ship_q = &race_q[StarShipPtr->playerNr];
src/uqm/encount.c-
src/uqm/encount.c-	// Find a SHIP_FRAGMENT that corresponds to the given STARSHIP
src/uqm/encount.c-	// The ships and fragments are in the same order in two queues
--
src/uqm/shipstat.c-	
src/uqm/shipstat.c-	if (StarShipPtr) // set during battle
src/uqm/shipstat.c-	{
src/uqm/shipstat.c:		assert (StarShipPtr->playerNr >= 0);
src/uqm/shipstat.c:		y = status_y_offsets[StarShipPtr->playerNr];
src/uqm/shipstat.c-	}
src/uqm/shipstat.c-	
src/uqm/shipstat.c-	OldContext = SetContext (StatusContext);
--
src/uqm/shipstat.c-		DrawFilledRectangle (&r);
src/uqm/shipstat.c-	}
src/uqm/shipstat.c-	
src/uqm/shipstat.c:	if (!StarShipPtr || StarShipPtr->captains_name_index)
src/uqm/shipstat.c-	{	// Any regular ship. SIS and Sa-Matra are separate.
src/uqm/shipstat.c-		// This includes Melee menu.
src/uqm/shipstat.c-		STRING locString;
--
src/uqm/shipstat.c-			else
src/uqm/shipstat.c-			{
src/uqm/shipstat.c-				locString = SetAbsStringTableIndex (SIPtr->race_strings,
src/uqm/shipstat.c:													StarShipPtr->captains_name_index);
src/uqm/shipstat.c-				Text.pStr = (UNICODE *)GetStringAddress (locString);
src/uqm/shipstat.c-				Text.CharCount = GetStringLength (locString);
src/uqm/shipstat.c-			}
--
src/uqm/shipstat.c-			SetContextFont (OldFont);
src/uqm/shipstat.c-		}
src/uqm/shipstat.c-	}
src/uqm/shipstat.c:	else if (StarShipPtr->playerNr == RPG_PLAYER_NUM)
src/uqm/shipstat.c-	{	// This is SIS
src/uqm/shipstat.c-		DrawCrewFuelString (y, 0);
src/uqm/shipstat.c-		DrawShipNameString (GLOBAL_SIS (ShipName), (COUNT)~0, y);
--
src/uqm/hyper.c-	num_turns = GetFrameCount (ElementPtr1->next.image.frame)
src/uqm/hyper.c-			- ANGLE_TO_FACING (FULL_CIRCLE)
src/uqm/hyper.c-			+ NORMALIZE_FACING (ANGLE_TO_FACING (FULL_CIRCLE)
src/uqm/hyper.c:			- StarShipPtr->ShipFacing);
src/uqm/hyper.c-	if (num_turns == 0)
src/uqm/hyper.c-		num_turns = 1;
src/uqm/hyper.c-	
--
src/uqm/hyper.c-			udy = -((GLOBAL (autopilot)).y - universe.y);
src/uqm/hyper.c-			
src/uqm/hyper.c-			facing = NORMALIZE_FACING (ANGLE_TO_FACING (ARCTAN (udx, udy)));
src/uqm/hyper.c:			StarShipPtr->ShipFacing = facing;
src/uqm/hyper.c-			SetElementStarShip(ElementPtr, StarShipPtr);
src/uqm/hyper.c-		}
src/uqm/hyper.c-
--
src/uqm/hyper.c-				frame_index = NORMALIZE_FACING (frame_index);
src/uqm/hyper.c-
src/uqm/hyper.c-			GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/hyper.c:			if (frame_index == StarShipPtr->ShipFacing)
src/uqm/hyper.c-			{
src/uqm/hyper.c-				ElementPtr->preprocess_func = ship_preprocess;
src/uqm/hyper.c-				ElementPtr->postprocess_func = ship_postprocess;
--
src/uqm/hyper.c-		GetCurrentVelocityComponents (&ElementPtr1->velocity, &dx, &dy);
src/uqm/hyper.c-		if (SDPtr == CurStarDescPtr
src/uqm/hyper.c-				|| (ElementPtr1->state_flags & APPEARING)
src/uqm/hyper.c:				|| !(dx || dy || (StarShipPtr->cur_status_flags
src/uqm/hyper.c-				& (LEFT | RIGHT | THRUST | WEAPON | SPECIAL))))
src/uqm/hyper.c-		{
src/uqm/hyper.c-			CurStarDescPtr = SDPtr;
--
src/uqm/hyper.c-		return NULL;
src/uqm/hyper.c-
src/uqm/hyper.c-	StarShipPtr = LockStarShip (&race_q[RPG_PLAYER_NUM], hSis);
src/uqm/hyper.c:	hShip = StarShipPtr->hShip;
src/uqm/hyper.c-	UnlockStarShip (&race_q[RPG_PLAYER_NUM], hSis);
src/uqm/hyper.c-
src/uqm/hyper.c-#ifdef DEBUG
--
src/uqm/hyper.c-	LockElement (hSisElement, &ElementPtr);
src/uqm/hyper.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/hyper.c-	// XXX: Solar system reentry test depends on ShipFacing != 0
src/uqm/hyper.c:	GLOBAL (ShipFacing) = StarShipPtr->ShipFacing + 1;
src/uqm/hyper.c-	UnlockElement (hSisElement);
src/uqm/hyper.c-}
src/uqm/hyper.c-
--
src/uqm/battle.c-{
src/uqm/battle.c-	ELEMENT *ElementPtr;
src/uqm/battle.c-
src/uqm/battle.c:	LockElement (StarShipPtr->hShip, &ElementPtr);
src/uqm/battle.c-	if (GetPrimType (&DisplayArray[ElementPtr->PrimIndex]) == STAMP_PRIM
src/uqm/battle.c-			&& ElementPtr->life_span == NORMAL_LIFE
src/uqm/battle.c-			&& !(ElementPtr->state_flags & FINITE_LIFE)
--
src/uqm/battle.c-		ElementPtr->preprocess_func = flee_preprocess;
src/uqm/battle.c-		ElementPtr->mass_points = MAX_SHIP_MASS * 10;
src/uqm/battle.c-		ZeroVelocityComponents (&ElementPtr->velocity);
src/uqm/battle.c:		StarShipPtr->cur_status_flags &=
src/uqm/battle.c-				~(SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED);
src/uqm/battle.c-
src/uqm/battle.c-		SetPrimColor (&DisplayArray[ElementPtr->PrimIndex],
--
src/uqm/battle.c-				// but it is slightly different (0x0A as red value). - SvdB.
src/uqm/battle.c-		SetPrimType (&DisplayArray[ElementPtr->PrimIndex], STAMPFILL_PRIM);
src/uqm/battle.c-
src/uqm/battle.c:		StarShipPtr->ship_input_state = 0;
src/uqm/battle.c-	}
src/uqm/battle.c:	UnlockElement (StarShipPtr->hShip);
src/uqm/battle.c-}
src/uqm/battle.c-
src/uqm/battle.c-static void
--
src/uqm/battle.c-			StarShipPtr = LockStarShip (&race_q[cur_player], hBattleShip);
src/uqm/battle.c-			hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/battle.c-
src/uqm/battle.c:			if (StarShipPtr->hShip)
src/uqm/battle.c-			{
src/uqm/battle.c-				// TODO: review and see if we have to do this every frame, or
src/uqm/battle.c-				//   if we can do this once somewhere
src/uqm/battle.c:				StarShipPtr->control = PlayerControl[cur_player];
src/uqm/battle.c-
src/uqm/battle.c-				InputState = PlayerInput[cur_player]->handlers->frameInput (
src/uqm/battle.c-						PlayerInput[cur_player], StarShipPtr);
--
src/uqm/battle.c-				}
src/uqm/battle.c-#endif
src/uqm/battle.c-
src/uqm/battle.c:				StarShipPtr->ship_input_state = 0;
src/uqm/battle.c:				if (StarShipPtr->RaceDescPtr->ship_info.crew_level)
src/uqm/battle.c-				{
src/uqm/battle.c-					if (InputState & BATTLE_LEFT)
src/uqm/battle.c:						StarShipPtr->ship_input_state |= LEFT;
src/uqm/battle.c-					else if (InputState & BATTLE_RIGHT)
src/uqm/battle.c:						StarShipPtr->ship_input_state |= RIGHT;
src/uqm/battle.c-					if (InputState & BATTLE_THRUST)
src/uqm/battle.c:						StarShipPtr->ship_input_state |= THRUST;
src/uqm/battle.c-					if (InputState & BATTLE_WEAPON)
src/uqm/battle.c:						StarShipPtr->ship_input_state |= WEAPON;
src/uqm/battle.c-					if (InputState & BATTLE_SPECIAL)
src/uqm/battle.c:						StarShipPtr->ship_input_state |= SPECIAL;
src/uqm/battle.c-
src/uqm/battle.c-					if (CanRunAway && cur_player == 0 &&
src/uqm/battle.c-							(InputState & BATTLE_ESCAPE))
--
src/uqm/init.c-	if (!hStarShip)
src/uqm/init.c-		return 0;
src/uqm/init.c-	StarShipPtr = LockStarShip (&race_q[0], hStarShip);
src/uqm/init.c:	StarShipPtr->playerNr = RPG_PLAYER_NUM;
src/uqm/init.c:	StarShipPtr->captains_name_index = 0;
src/uqm/init.c-	UnlockStarShip (&race_q[0], hStarShip);
src/uqm/init.c-
src/uqm/init.c-	return hStarShip;
--
src/uqm/init.c-
src/uqm/init.c-			// There should only be one ship left in battle.
src/uqm/init.c-			// He gets the crew still floating in space.
src/uqm/init.c:			if (StarShipPtr->RaceDescPtr->ship_info.crew_level)
src/uqm/init.c-			{
src/uqm/init.c-				if (crew_retrieved >=
src/uqm/init.c:						StarShipPtr->RaceDescPtr->ship_info.max_crew -
src/uqm/init.c:						StarShipPtr->RaceDescPtr->ship_info.crew_level)
src/uqm/init.c:					StarShipPtr->RaceDescPtr->ship_info.crew_level =
src/uqm/init.c:							StarShipPtr->RaceDescPtr->ship_info.max_crew;
src/uqm/init.c-				else
src/uqm/init.c:					StarShipPtr->RaceDescPtr->ship_info.crew_level +=
src/uqm/init.c-							crew_retrieved;
src/uqm/init.c-			}
src/uqm/init.c-
src/uqm/init.c:			if (StarShipPtr->RaceDescPtr->uninit_func != NULL)
src/uqm/init.c:				(*StarShipPtr->RaceDescPtr->uninit_func) (
src/uqm/init.c:						StarShipPtr->RaceDescPtr);
src/uqm/init.c-			/* Record crew left after battle */
src/uqm/init.c:			StarShipPtr->crew_level =
src/uqm/init.c:					StarShipPtr->RaceDescPtr->ship_info.crew_level;
src/uqm/init.c:			SPtr[StarShipPtr->playerNr] = StarShipPtr;
src/uqm/init.c:			free_ship (StarShipPtr->RaceDescPtr, TRUE, TRUE);
src/uqm/init.c:			StarShipPtr->RaceDescPtr = 0;
src/uqm/init.c-		}
src/uqm/init.c-		UnlockElement (hElement);
src/uqm/init.c-	}
--
src/uqm/intel.c-	if (StarShipPtr)
src/uqm/intel.c-	{
src/uqm/intel.c-		// Selecting the next action for in battle.
src/uqm/intel.c:		if (StarShipPtr->control & CYBORG_CONTROL)
src/uqm/intel.c-		{
src/uqm/intel.c-			InputState = tactical_intelligence (context, StarShipPtr);
src/uqm/intel.c-
src/uqm/intel.c-			// Allow a player to warp-escape in cyborg mode
src/uqm/intel.c:			if (StarShipPtr->playerNr == RPG_PLAYER_NUM)
src/uqm/intel.c-				InputState |= CurrentInputToBattleInput (
src/uqm/intel.c-						context->playerNr) & BATTLE_ESCAPE;
src/uqm/intel.c-		}
--
src/uqm/ship.c-	VelocityPtr = &ElementPtr->velocity;
src/uqm/ship.c-
src/uqm/ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ship.c:	CurrentAngle = FACING_TO_ANGLE (StarShipPtr->ShipFacing);
src/uqm/ship.c-	TravelAngle = GetVelocityTravelAngle (VelocityPtr);
src/uqm/ship.c:	thrust_increment = StarShipPtr->RaceDescPtr->characteristics.thrust_increment;
src/uqm/ship.c:	max_thrust = StarShipPtr->RaceDescPtr->characteristics.max_thrust;
src/uqm/ship.c-	if (thrust_increment == max_thrust)
src/uqm/ship.c-	{	// inertialess acceleration (Skiff)
src/uqm/ship.c-		SetVelocityVector (VelocityPtr,
src/uqm/ship.c:				max_thrust, StarShipPtr->ShipFacing);
src/uqm/ship.c-		return (SHIP_AT_MAX_SPEED);
src/uqm/ship.c-	}
src/uqm/ship.c-	else if (TravelAngle == CurrentAngle
src/uqm/ship.c:			&& (StarShipPtr->cur_status_flags
src/uqm/ship.c-				& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED))
src/uqm/ship.c:			&& !(StarShipPtr->cur_status_flags & SHIP_IN_GRAVITY_WELL))
src/uqm/ship.c-	{	// already maxed-out acceleration
src/uqm/ship.c:		return (StarShipPtr->cur_status_flags
src/uqm/ship.c-				& (SHIP_AT_MAX_SPEED | SHIP_BEYOND_MAX_SPEED));
src/uqm/ship.c-	}
src/uqm/ship.c-	else
--
src/uqm/ship.c-		{	// normal acceleration
src/uqm/ship.c-			SetVelocityComponents (VelocityPtr, delta_x, delta_y);
src/uqm/ship.c-		}
src/uqm/ship.c:		else if (((StarShipPtr->cur_status_flags & SHIP_IN_GRAVITY_WELL)
src/uqm/ship.c-				&& desired_speed <= MAX_ALLOWED_SPEED_SQR)
src/uqm/ship.c-				|| desired_speed < current_speed)
src/uqm/ship.c-		{	// acceleration in a gravity well within max allowed
--
src/uqm/ship.c-		{	// normal max acceleration, same vector
src/uqm/ship.c-			if (current_speed <= max_speed)
src/uqm/ship.c-				SetVelocityVector (VelocityPtr, max_thrust,
src/uqm/ship.c:						StarShipPtr->ShipFacing);
src/uqm/ship.c-			return (SHIP_AT_MAX_SPEED);
src/uqm/ship.c-		}
src/uqm/ship.c-		else
--
src/uqm/ship.c-	RACE_DESC *RDPtr;
src/uqm/ship.c-
src/uqm/ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ship.c:	RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/ship.c-
src/uqm/ship.c-	cur_status_flags =
src/uqm/ship.c:			StarShipPtr->cur_status_flags
src/uqm/ship.c-			& ~(LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/ship.c-	if (!(ElementPtr->state_flags & APPEARING))
src/uqm/ship.c-	{
src/uqm/ship.c:		cur_status_flags |= StarShipPtr->ship_input_state
src/uqm/ship.c-				& (LEFT | RIGHT | THRUST | WEAPON | SPECIAL);
src/uqm/ship.c-	}
src/uqm/ship.c-	else
--
src/uqm/ship.c-				return;
src/uqm/ship.c-		}
src/uqm/ship.c-	}
src/uqm/ship.c:	StarShipPtr->cur_status_flags = cur_status_flags;
src/uqm/ship.c-
src/uqm/ship.c:	if (StarShipPtr->energy_counter)
src/uqm/ship.c:		--StarShipPtr->energy_counter;
src/uqm/ship.c-	else if (RDPtr->ship_info.energy_level < (BYTE)RDPtr->ship_info.max_energy
src/uqm/ship.c-			|| (SBYTE)RDPtr->characteristics.energy_regeneration < 0)
src/uqm/ship.c-		DeltaEnergy (ElementPtr,
--
src/uqm/ship.c-	if (RDPtr->preprocess_func)
src/uqm/ship.c-	{
src/uqm/ship.c-		(*RDPtr->preprocess_func) (ElementPtr);
src/uqm/ship.c:		cur_status_flags = StarShipPtr->cur_status_flags;
src/uqm/ship.c-	}
src/uqm/ship.c-
src/uqm/ship.c-	if (ElementPtr->turn_wait)
--
src/uqm/ship.c-	else if (cur_status_flags & (LEFT | RIGHT))
src/uqm/ship.c-	{
src/uqm/ship.c-		if (cur_status_flags & LEFT)
src/uqm/ship.c:			StarShipPtr->ShipFacing =
src/uqm/ship.c:					NORMALIZE_FACING (StarShipPtr->ShipFacing - 1);
src/uqm/ship.c-		else
src/uqm/ship.c:			StarShipPtr->ShipFacing =
src/uqm/ship.c:					NORMALIZE_FACING (StarShipPtr->ShipFacing + 1);
src/uqm/ship.c-		ElementPtr->next.image.frame =
src/uqm/ship.c-				SetAbsFrameIndex (ElementPtr->next.image.frame,
src/uqm/ship.c:				StarShipPtr->ShipFacing);
src/uqm/ship.c-		ElementPtr->state_flags |= CHANGING;
src/uqm/ship.c-
src/uqm/ship.c-		ElementPtr->turn_wait = RDPtr->characteristics.turn_wait;
--
src/uqm/ship.c-		STATUS_FLAGS thrust_status;
src/uqm/ship.c-
src/uqm/ship.c-		thrust_status = inertial_thrust (ElementPtr);
src/uqm/ship.c:		StarShipPtr->cur_status_flags &=
src/uqm/ship.c-				~(SHIP_AT_MAX_SPEED
src/uqm/ship.c-				| SHIP_BEYOND_MAX_SPEED
src/uqm/ship.c-				| SHIP_IN_GRAVITY_WELL);
src/uqm/ship.c:		StarShipPtr->cur_status_flags |= thrust_status;
src/uqm/ship.c-
src/uqm/ship.c-		ElementPtr->thrust_wait = RDPtr->characteristics.thrust_wait;
src/uqm/ship.c-
--
src/uqm/ship.c-		return;
src/uqm/ship.c-
src/uqm/ship.c-	GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/ship.c:	RDPtr = StarShipPtr->RaceDescPtr;
src/uqm/ship.c-
src/uqm/ship.c:	if (StarShipPtr->weapon_counter)
src/uqm/ship.c:		--StarShipPtr->weapon_counter;
src/uqm/ship.c:	else if ((StarShipPtr->cur_status_flags
src/uqm/ship.c-			& WEAPON) && DeltaEnergy (ElementPtr,
src/uqm/ship.c-			-RDPtr->characteristics.weapon_energy_cost))
src/uqm/ship.c-	{
--
src/uqm/ship.c-				ProcessSound (RDPtr->ship_data.ship_sounds, ElementPtr);
src/uqm/ship.c-		}
src/uqm/ship.c-
src/uqm/ship.c:		StarShipPtr->weapon_counter =
src/uqm/ship.c-				RDPtr->characteristics.weapon_wait;
src/uqm/ship.c-	}
src/uqm/ship.c-
src/uqm/ship.c:	if (StarShipPtr->special_counter)
src/uqm/ship.c:		--StarShipPtr->special_counter;
src/uqm/ship.c-
src/uqm/ship.c-	if (RDPtr->postprocess_func)
src/uqm/ship.c-		(*RDPtr->postprocess_func) (ElementPtr);
--
src/uqm/ship.c-	HELEMENT hShip;
src/uqm/ship.c-	RACE_DESC *RDPtr;
src/uqm/ship.c-
src/uqm/ship.c:	RDPtr = load_ship (StarShipPtr->SpeciesID, TRUE);
src/uqm/ship.c-	if (!RDPtr)
src/uqm/ship.c-		return FALSE;
src/uqm/ship.c-
src/uqm/ship.c:	StarShipPtr->RaceDescPtr = RDPtr;
src/uqm/ship.c-
src/uqm/ship.c:	StarShipPtr->ship_input_state = 0;
src/uqm/ship.c:	StarShipPtr->cur_status_flags = 0;
src/uqm/ship.c:	StarShipPtr->old_status_flags = 0;
src/uqm/ship.c-
src/uqm/ship.c-	if (LOBYTE (GLOBAL (CurrentActivity)) == IN_ENCOUNTER
src/uqm/ship.c-			|| LOBYTE (GLOBAL (CurrentActivity)) == IN_LAST_BATTLE)
src/uqm/ship.c-	{
src/uqm/ship.c:		if (StarShipPtr->crew_level == 0)
src/uqm/ship.c-		{
src/uqm/ship.c-			// SIS, already handled from sis_ship.c.
src/uqm/ship.c-			// RDPtr->ship_info.crew_level = GLOBAL_SIS (CrewEnlisted);
src/uqm/ship.c-		}
src/uqm/ship.c-		else
src/uqm/ship.c:			RDPtr->ship_info.crew_level = StarShipPtr->crew_level;
src/uqm/ship.c-
src/uqm/ship.c-		if (RDPtr->ship_info.crew_level > RDPtr->ship_info.max_crew)
src/uqm/ship.c-			RDPtr->ship_info.crew_level = RDPtr->ship_info.max_crew;
src/uqm/ship.c-	}
src/uqm/ship.c-
src/uqm/ship.c:	StarShipPtr->energy_counter = 0;
src/uqm/ship.c:	StarShipPtr->weapon_counter = 0;
src/uqm/ship.c:	StarShipPtr->special_counter = 0;
src/uqm/ship.c-
src/uqm/ship.c:	hShip = StarShipPtr->hShip;
src/uqm/ship.c-	if (hShip == 0)
src/uqm/ship.c-	{
src/uqm/ship.c-		hShip = AllocElement ();
--
src/uqm/ship.c-			InsertElement (hShip, GetHeadElement ());
src/uqm/ship.c-	}
src/uqm/ship.c-
src/uqm/ship.c:	StarShipPtr->hShip = hShip;
src/uqm/ship.c:	if (StarShipPtr->hShip != 0)
src/uqm/ship.c-	{
src/uqm/ship.c-		// Construct an ELEMENT for the STARSHIP
src/uqm/ship.c-		ELEMENT *ShipElementPtr;
src/uqm/ship.c-
src/uqm/ship.c-		LockElement (hShip, &ShipElementPtr);
src/uqm/ship.c-
src/uqm/ship.c:		ShipElementPtr->playerNr = StarShipPtr->playerNr;
src/uqm/ship.c-		ShipElementPtr->crew_level = 0;
src/uqm/ship.c-		ShipElementPtr->mass_points = RDPtr->characteristics.ship_mass;
src/uqm/ship.c-		ShipElementPtr->state_flags = APPEARING | PLAYER_SHIP | IGNORE_SIMILAR;
--
src/uqm/ship.c-				&& LOBYTE (GLOBAL (CurrentActivity)) == IN_LAST_BATTLE)
src/uqm/ship.c-		{
src/uqm/ship.c-			// This is the Sa-Matra
src/uqm/ship.c:			StarShipPtr->ShipFacing = 0;
src/uqm/ship.c-			ShipElementPtr->current.image.frame =
src/uqm/ship.c-					SetAbsFrameIndex (RDPtr->ship_data.ship[0],
src/uqm/ship.c:					StarShipPtr->ShipFacing);
src/uqm/ship.c-			ShipElementPtr->current.location.x = LOG_SPACE_WIDTH >> 1;
src/uqm/ship.c-			ShipElementPtr->current.location.y = LOG_SPACE_HEIGHT >> 1;
src/uqm/ship.c-			++ShipElementPtr->life_span;
src/uqm/ship.c-		}
src/uqm/ship.c-		else
src/uqm/ship.c-		{
src/uqm/ship.c:			StarShipPtr->ShipFacing = NORMALIZE_FACING (TFB_Random ());
src/uqm/ship.c-			if (LOBYTE (GLOBAL (CurrentActivity)) == IN_HYPERSPACE)
src/uqm/ship.c-			{	// Only one ship is ever spawned in HyperSpace -- flagship
src/uqm/ship.c-				COUNT facing = GLOBAL (ShipFacing);
--
src/uqm/ship.c-				//   for when the ship returns from an encounter back
src/uqm/ship.c-				//   to HyperSpace. However, it is overwritten later
src/uqm/ship.c-				//   in sis.c. See also r1614.
src/uqm/ship.c:				//GLOBAL (ShipFacing) = StarShipPtr->ShipFacing + 1;
src/uqm/ship.c:				StarShipPtr->ShipFacing = facing;
src/uqm/ship.c-			}
src/uqm/ship.c-			ShipElementPtr->current.image.frame =
src/uqm/ship.c-					SetAbsFrameIndex (RDPtr->ship_data.ship[0],
src/uqm/ship.c:					StarShipPtr->ShipFacing);
src/uqm/ship.c-			do
src/uqm/ship.c-			{
src/uqm/ship.c-				ShipElementPtr->current.location.x =
--
src/uqm/ship.c-				LastStarShipPtr = 0;
src/uqm/ship.c-			}
src/uqm/ship.c-			else
src/uqm/ship.c:				StarShipPtr->hShip = LastStarShipPtr->hShip;
src/uqm/ship.c-		}
src/uqm/ship.c-
src/uqm/ship.c-		if (!spawn_ship (StarShipPtr))
--
src/uqm/ship.c-	}
src/uqm/ship.c-
src/uqm/ship.c-	if (LastStarShipPtr)
src/uqm/ship.c:		LastStarShipPtr->hShip = 0;
src/uqm/ship.c-
src/uqm/ship.c-	return (hBattleShip != 0);
src/uqm/ship.c-}
--
src/uqm/build.c-
src/uqm/build.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-				hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/build.c:				total += ShipCost[StarShipPtr->race_id];
src/uqm/build.c-				UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-			}
src/uqm/build.c-			return total;
--
src/uqm/build.c-
src/uqm/build.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-				hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/build.c:				ship_type = StarShipPtr->race_id;
src/uqm/build.c-				UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-
src/uqm/build.c-				if (ship_type == which_ship)
--
src/uqm/build.c-
src/uqm/build.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-				hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/build.c:				RemoveShip = (StarShipPtr->race_id == which_ship);
src/uqm/build.c-				UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-
src/uqm/build.c-				if (RemoveShip)
--
src/uqm/build.c-
src/uqm/build.c-					StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q),
src/uqm/build.c-							hOldShip);
src/uqm/build.c:					win_loc = StarShipPtr->index;
src/uqm/build.c-					UnlockShipFrag (&GLOBAL (built_ship_q), hOldShip);
src/uqm/build.c-					if (which_window <= win_loc)
src/uqm/build.c-						break;
src/uqm/build.c-				}
src/uqm/build.c-
src/uqm/build.c-				StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c:				StarShipPtr->index = which_window - 1;
src/uqm/build.c-				UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-
src/uqm/build.c-				InsertQueue (&GLOBAL (built_ship_q), hStarShip, hOldShip);
--
src/uqm/build.c-	{
src/uqm/build.c-		StarShipPtr = LockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-		hNextShip = _GetSuccLink (StarShipPtr);
src/uqm/build.c:		if (which_ship == StarShipPtr->race_id &&
src/uqm/build.c:				StarShipPtr->crew_level == TemplatePtr->crew_level)
src/uqm/build.c-			break; /* found one */
src/uqm/build.c-		UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-	}
src/uqm/build.c-	if (hStarShip)
src/uqm/build.c-	{
src/uqm/build.c:		StarShipPtr->crew_level = crew_level;
src/uqm/build.c:		StarShipPtr->captains_name_index = captain;
src/uqm/build.c-		UnlockShipFrag (&GLOBAL (built_ship_q), hStarShip);
src/uqm/build.c-	}
src/uqm/build.c-	else
--
src/uqm/gravity.c-							STARSHIP *StarShipPtr;
src/uqm/gravity.c-
src/uqm/gravity.c-							GetElementStarShip (TestElementPtr, &StarShipPtr);
src/uqm/gravity.c:							StarShipPtr->cur_status_flags &= ~SHIP_AT_MAX_SPEED;
src/uqm/gravity.c:							StarShipPtr->cur_status_flags |= SHIP_IN_GRAVITY_WELL;
src/uqm/gravity.c-						}
src/uqm/gravity.c-					}
src/uqm/gravity.c-				}
--
src/uqm/misc.c-		STARSHIP *StarShipPtr;
src/uqm/misc.c-
src/uqm/misc.c-		GetElementStarShip (ElementPtr, &StarShipPtr);
src/uqm/misc.c:		if (StarShipPtr && StarShipPtr->RaceDescPtr->ship_info.crew_level)
src/uqm/misc.c:			ElementPtr->hTarget = StarShipPtr->hShip;
src/uqm/misc.c-		else
src/uqm/misc.c-		{
src/uqm/misc.c-			COUNT facing;
--
src/uqm/misc.c-		STARSHIP *StarShipPtr;
src/uqm/misc.c-
src/uqm/misc.c-		GetElementStarShip (ElementPtr1, &StarShipPtr);
src/uqm/misc.c:		if (!(StarShipPtr->RaceDescPtr->ship_info.ship_flags & CREW_IMMUNE))
src/uqm/misc.c-		{
src/uqm/misc.c-			ProcessSound (SetAbsSoundIndex (GameSounds, GRAB_CREW), ElementPtr1);
src/uqm/misc.c-			DeltaCrew (ElementPtr1, 1);
--
src/uqm/misc.c-	INTERSECT_CONTROL ShipIntersect;
src/uqm/misc.c-
src/uqm/misc.c-	GetElementStarShip (ShipPtr, &StarShipPtr);
src/uqm/misc.c:	if (StarShipPtr->RaceDescPtr->ship_info.ship_flags & CREW_IMMUNE)
src/uqm/misc.c-		return;
src/uqm/misc.c-
src/uqm/misc.c-	ShipIntersect = ShipPtr->IntersectControl;
--
src/uqm/misc.c-		SetElementStarShip (CrewPtr, StarShipPtr);
src/uqm/misc.c-
src/uqm/misc.c-		GetElementStarShip (TargetPtr, &StarShipPtr);
src/uqm/misc.c:		CrewPtr->hTarget = StarShipPtr->hShip;
src/uqm/misc.c-
src/uqm/misc.c-		{
src/uqm/misc.c-			SIZE w, h;
